<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaSE</title>
    <url>/2021/10/29/JavaSE/</url>
    <content><![CDATA[<html><head></head><body><h2 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1.Java语言概述"></a>1.Java语言概述</h2><h4 id="1）整体内容框架"><a href="#1）整体内容框架" class="headerlink" title="1）整体内容框架"></a>1）整体内容框架</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211015184213040.png" alt="image-20211015184213040"></p>
<blockquote>
<p>第一部分：编程语言核心结构</p>
</blockquote>
<p>主要知识点：变量、基本语法、分支、循环、数组</p>
<blockquote>
<p>第二部分：Java面向对象核心逻辑</p>
</blockquote>
<p>主要知识点：OOP、封装、继承、多态、接口</p>
<blockquote>
<p>第三部分：开发JavaSE高级应用程序</p>
</blockquote>
<p>主要知识点：异常、集合、I/O、多线程、反射机制、网络编程、</p>
<h4 id="2）开发环境搭建"><a href="#2）开发环境搭建" class="headerlink" title="2）开发环境搭建"></a>2）开发环境搭建</h4><blockquote>
<p>JDK、JRE、JVM的关系</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015195809885.png" alt="image-20211015195809885"></p>
<blockquote>
<p>path环境变量的配置</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015195918675.png" alt="image-20211015195918675"></p>
<h4 id="3-Java程序"><a href="#3-Java程序" class="headerlink" title="3) Java程序"></a>3) Java程序</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211015200020502.png" alt="image-20211015200020502"></p>
<p><strong>java程序编写-编译-运行的过程：</strong></p>
<ul>
<li>编写：我们将编写的java代码保存在以”.java”结尾的源文件中</li>
<li>编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java</li>
<li>运行：使用java.exe命令解释运行我们的字节码文件。 格式：java 类名</li>
</ul>
<h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h2><h4 id="1-关键字与标识符"><a href="#1-关键字与标识符" class="headerlink" title="1) 关键字与标识符"></a>1) 关键字与标识符</h4><blockquote>
<p>1.java关键字的使用</p>
</blockquote>
<p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>特点：关键字中所字母都为小写</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200302740.png" alt="image-20211015200302740"></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200306806.png" alt="image-20211015200306806"></p>
<blockquote>
<p>2.保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</p>
</blockquote>
<p>具体哪些保留字：goto 、const</p>
<h4 id="2-变量的使用"><a href="#2-变量的使用" class="headerlink" title="2) 变量的使用"></a>2) 变量的使用</h4><blockquote>
<p>1 按数据类型分类</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200503566.png" alt="image-20211015200503566"></p>
<p><strong>//1. 整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)</strong></p>
<p>​        //① byte范围：-128 ~ 127<br>​        // ② 声明long型变量，必须以”l”或”L”结尾<br>​        // ③ 通常，定义整型变量时，使用int型。<br>​        //④整型的常量，默认类型是：int型</p>
<p><strong>//2. 浮点型：float(4字节) \ double(8字节)</strong></p>
<p>​        //① 浮点型，表示带小数点的数值<br>​        //② float表示数值的范围比long还大<br>​        //③ 定义float类型变量时，变量要以”f”或”F”结尾<br>​        //④ 通常，定义浮点型变量时，使用double型。<br>​        //⑤ 浮点型的常量，默认类型为：double</p>
<p><strong>//3. 字符型：char (1字符=2字节)</strong></p>
<p>​    //① 定义char型变量，通常使用一对’’,内部只能写一个字符<br>​    //② 表示方式：1.声明一个字符 2.转义字符 3.直接使用     Unicode 值来表示字符型常量</p>
<p><strong>//4.布尔型：boolean</strong><br>    //① 只能取两个值之一：true 、 false<br>    //② 常常在条件判断、循环结构中使用</p>
<blockquote>
<pre><code>     2. 按声明的位置分类
</code></pre>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015203740944.png" alt="image-20211015203740944"></p>
<blockquote>
<p>  3.变量使用的注意点：</p>
</blockquote>
<p>​    ① 变量必须先声明，后使用<br>​    ② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了<br>​    ③ 同一个作用域内，不可以声明两个同名的变量</p>
<blockquote>
<ol start="4">
<li>自动类型转换(只涉及7种基本数据类型）</li>
</ol>
</blockquote>
<p>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p>
<p><strong>byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double</strong><br>    特别的：当byte、char、short三种类型的变量做运算时，结果为int型</p>
<blockquote>
<p>​    5 强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</p>
</blockquote>
<p>1.需要使用强转符：()<br>2.注意点：强制类型转换，可能导致精度损失。</p>
<h4 id="3-进制"><a href="#3-进制" class="headerlink" title="3) 进制"></a>3) 进制</h4><blockquote>
<p>​    1.编程中涉及的进制及表示方式：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015204245631.png" alt="image-20211015204245631"></p>
<blockquote>
<p>​    2.二进制的使用说明：</p>
</blockquote>
<p>2.1 计算机底层的存储方式：所有数字在计算机底层都以二进制形式存在。<br>2.2 二进制数据的存储方式：所有的数值，不管正负，底层都以补码的方式存储。<br>2.3 原码、反码、补码的说明：</p>
<p>正数：</p>
<p>​        三码合一</p>
<p>负数：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015204332717.png" alt="image-20211015204332717"></p>
<h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4) 运算符"></a>4) 运算符</h4><blockquote>
<p>​    1.算术运算符： + - + - * / % (前)++ (后)++ (前)– (后)– </p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//(前)++ :先自增1，后运算</span>
 <span class="token comment" spellcheck="true">//(后)++ :先运算，后自增1</span>
    
<span class="token number">2</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//(前)-- :先自减1，后运算</span>
  <span class="token comment" spellcheck="true">//(后)-- :先运算，后自减1</span>
    
<span class="token number">3</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//连接符：+：只能使用在String与其他数据类型变量之间使用。</span>
</code></pre>
<blockquote>
<p>​    2.赋值运算符：=  +=  -=  *=  /=  %= </p>
</blockquote>
<p>1.运算的结果不会改变变量本身的数据类型</p>
<p>2.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)</span>

​        <span class="token comment" spellcheck="true">//方式一：num = num + 2;</span>
​        <span class="token comment" spellcheck="true">//方式二：num += 2; (推荐)</span>
</code></pre>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)</span>

    <span class="token comment" spellcheck="true">//方式一：num = num + 1;</span>
    <span class="token comment" spellcheck="true">//方式二：num += 1; </span>
    <span class="token comment" spellcheck="true">//方式三：num++; (推荐)</span>
</code></pre>
<blockquote>
<p>​    3.比较运算符（关系运算符）: == != &gt;  &lt;  &gt;=  &lt;=  instanceof</p>
</blockquote>
<ul>
<li>​    1.比较运算符的结果是boolean类型</li>
<li>​    2.&gt;  &lt;  &gt;=  &lt;= :只能使用在数值类型的数据之间。</li>
<li>​    3.== 和 !=: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。</li>
</ul>
<blockquote>
<p>​    4.逻辑运算符：&amp; &amp;&amp;  |  || !  ^</p>
</blockquote>
<p><strong>1.区分&amp; 与 &amp;&amp;</strong></p>
<pre class=" language-markdown"><code class="language-markdown">//相同点1：&amp; 与  &amp;&amp; 的运算结果相同
//相同点2：当符号左边是true时，二者都会执行符号右边的运算

//不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。
</code></pre>
<p>​        <strong>//开发中，推荐使用&amp;&amp;</strong></p>
<p><strong>2.区分：| 与 ||</strong> </p>
<pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    //相同点1：| 与  || 的运算结果相同</span>
<span class="token code keyword">    //相同点2：当符号左边是false时，二者都会执行符号右边的运算</span>
    
<span class="token code keyword">    //不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算</span>
    
</code></pre>
<p>​    <strong>//开发中，推荐使用||</strong></p>
<blockquote>
<p>​    5.位运算符：&lt;&lt;  &gt;&gt; &gt;&gt;&gt; &amp;  |  ^  ~</p>
</blockquote>
<p>【面试题】 你能否写出最高效的2 * 8的实现方式？<br>    答案：2 &lt;&lt; 3  或  8 &lt;&lt; 1</p>
<ol>
<li>位运算符操作的都是整型的数据</li>
<li>&lt;&lt; ：在一定范围内，每向左移1位，相当于 * 2</li>
<li>‘&gt;&gt;’:在一定范围内，每向右移1位，相当于 / 2</li>
</ol>
<blockquote>
<p>​    6.三元运算符：(条件表达式)? 表达式1 : 表达式2</p>
</blockquote>
<p> 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p>
<h4 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6) 流程控制"></a>6) 流程控制</h4><p>顺序结构：程序从上到下执行。</p>
<blockquote>
<p>​    分支结构</p>
</blockquote>
<p>1.if-else条件判断结构</p>
<p>2.switch-case选择结构</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
    执行语句<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
    执行语句<span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">default</span><span class="token operator">:</span>
    执行语句n<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>2.说明：</strong><br>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p>
<p>② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</p>
<p>③ switch结构中的表达式，只能是如下的6种数据类型之一：<br>   <strong>byte</strong> 、<strong>short</strong>、<strong>char</strong>、<strong>int</strong>、<strong>enum</strong>、<strong>String</strong></p>
<p>④ case 之后只能声明常量。不能声明范围。</p>
<p>⑤ break关键字是可选的。</p>
<p>⑥ default:相当于if-else结构中的else。   default结构是可选的，而且位置是灵活的。</p>
<p><strong>3.如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。</strong></p>
<p><strong>4.break在switch-case中是可选的</strong></p>
<blockquote>
<p>​    循环结构</p>
</blockquote>
<p>1.循环结构的四要素</p>
<p>① 初始化条件<br>② 循环条件  —&gt;是boolean类型<br>③ 循环体<br>④ 迭代条件</p>
<p><strong>for和while循环总结：</strong></p>
<ol>
<li>开发中，基本上我们都会从for、while中进行选择，实现循环结构。</li>
<li>for循环和while循环是可以相互转换的！<br>区别：for循环和while循环的初始化条件部分的作用范围不同。</li>
<li>我们写程序，要避免出现死循环。</li>
</ol>
<p><strong>补充:衡量一个功能代码的优劣</strong>：<br>1.正确性<br>2.可读性<br>3.健壮性<br>4.高效率与低存储：时间复杂度 、空间复杂度 （衡量算法的好坏）</p>
<blockquote>
<p>​    break和continue关键字的使用</p>
</blockquote>
<p>break:        结束<strong>当前</strong>循环</p>
<p>continue:  结束<strong>当次</strong>循环</p>
<blockquote>
<p>​    Scanner类</p>
</blockquote>
<p>如何从键盘获取不同类型的变量：需要使用Scanner类</p>
<p><strong>具体实现步骤：</strong><br>1.导包：import java.util.Scanner;<br>2.Scanner的实例化:Scanner scan = new Scanner(System.in);<br>3.调用Scanner类的相关方法（next() / nextXxx()），来获取指定类型的变量</p>
<h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><h4 id="1）数组的概述"><a href="#1）数组的概述" class="headerlink" title="1）数组的概述"></a>1）数组的概述</h4><p><strong>1.数组的理解：</strong></p>
<ul>
<li>数组(Array)，是多个相同类型数据一定顺序排列的集合，并使用一个名字命名，</li>
</ul>
<p><strong>2.数组的特点：</strong></p>
<ul>
<li>数组是序排列的</li>
<li>数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li>
<li>创建数组对象会在内存中开辟一整块连续的空间</li>
<li>数组的长度一旦确定，就不能修改。</li>
</ul>
<h4 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2) 一维数组"></a>2) 一维数组</h4><blockquote>
<p>​    1.一维数组的声明与初始化</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//类型推断</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    2.一维数组的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015224004165.png" alt="image-20211015224004165"></p>
<h4 id="3-二维数组"><a href="#3-二维数组" class="headerlink" title="3) 二维数组"></a>3) 二维数组</h4><blockquote>
<p>​    二维数组的声明与初始化</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//动态初始化1</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//动态初始化2</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//也是正确的写法：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型推断</span>
</code></pre>
<blockquote>
<p>​    二维数组的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016204716700.png" alt="image-20211016204716700"></p>
<h4 id="4）十大内部排序算法"><a href="#4）十大内部排序算法" class="headerlink" title="4）十大内部排序算法"></a>4）十大内部排序算法</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211016204852206.png" alt="image-20211016204852206"></p>
<p>1）衡量排序算法的优劣：时间复杂度、空间复杂度、稳定性</p>
<p>2）排序的分类：内部排序 与 外部排序（需要借助于磁盘）</p>
<p>3）不同排序算法的时间复杂度</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016204923356.png" alt="image-20211016204923356"></p>
<h4 id="5）Arrays工具类的使用"><a href="#5）Arrays工具类的使用" class="headerlink" title="5）Arrays工具类的使用"></a>5）Arrays工具类的使用</h4><p>1.理解：<br>① 定义在java.util包下。<br>② Arrays:提供了很多操作数组的方法。</p>
<p>2.使用：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断两个数组是否相等</span>
<span class="token comment" spellcheck="true">//boolean euqals(int[] a, int[] b)</span>
    
<span class="token comment" spellcheck="true">//输出数组信息</span>
<span class="token comment" spellcheck="true">//String toString(int[] a)</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token comment" spellcheck="true">//将指定值填充到数组之中。</span>
Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//对数组进行排序。</span>
Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="6-数组的常见异常"><a href="#6-数组的常见异常" class="headerlink" title="6) 数组的常见异常"></a>6) 数组的常见异常</h4><blockquote>
<p>​    1.数组角标越界异常：ArrayIndexOutOfBoundsException</p>
</blockquote>
<blockquote>
<p>​    2.空指针异常：NullPointerException</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//情况一：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment" spellcheck="true">//情况二：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="4-面对对象——上"><a href="#4-面对对象——上" class="headerlink" title="4.面对对象——上"></a>4.面对对象——上</h2><ul>
<li><p>1.Java类及类的成员：属性、方法、构造器；代码块、内部类</p>
</li>
<li><p>2.面向对象的大特征：封装性、继承性、多态性、(抽象性)</p>
</li>
<li><p>3.其它关键字：this、super、static、final、abstract、interface、package、import等</p>
<p><strong>“大处着眼，小处着手”</strong></p>
</li>
</ul>
<h4 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1) 类与对象"></a>1) 类与对象</h4><blockquote>
<p>​    1.面向对象与面向过程（理解）</p>
</blockquote>
<p>1.面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。<br>2.面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<blockquote>
<p>​    2.面向对象中两个重要的概念：</p>
</blockquote>
<p><strong>类：</strong>对一类事物的描述，是抽象的、概念上的定义<br><strong>对象：</strong>是实际存在的该类事物的每个个体，因而也称为实例(instance)</p>
<ul>
<li>面向对象程序设计的重点是类的设计</li>
<li>设计类，就是设计类的成员。</li>
</ul>
<blockquote>
<p>​    3.对象的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016214911907.png" alt="image-20211016214911907"></p>
<blockquote>
<p>​    4.匿名对象:</p>
</blockquote>
<p>我们创建的对象，没显式的赋给一个变量名。即为匿名对象</p>
<p>匿名对象只能调用一次。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1999</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.0</span>
</code></pre>
<h4 id="2-JVM内存结构"><a href="#2-JVM内存结构" class="headerlink" title="2) JVM内存结构"></a>2) JVM内存结构</h4><p>编译完源程序以后，生成一个或多个字节码文件。<br>我们使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016215258999.png" alt="image-20211016215258999"></p>
<p><strong>虚拟机栈</strong>，即为平时提到的栈结构。我们将局部变量存储在栈结构中</p>
<p><strong>堆</strong>，我们将new出来的结构（比如：数组、对象）加载在对空间中。</p>
<p>补充：对象的属性（非static的）加载在堆空间中。<br>方法区：类的加载信息、常量池、静态域</p>
<h4 id="3）属性"><a href="#3）属性" class="headerlink" title="3）属性"></a>3）属性</h4><p>对比：<strong>属性  vs  局部变量</strong></p>
<blockquote>
<p>​    1 在类中声明的位置的不同</p>
</blockquote>
<p>属性：直接定义在类的一对{}内</p>
<p>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p>
<blockquote>
<p>​    2 关于权限修饰符的不同</p>
</blockquote>
<p>属性：可以在声明属性时，指明其权限，使用权限修饰符。</p>
<p>常用的权限修饰符：private、public、缺省、protected  —&gt;封装性;目前，大家声明属性时，都使用缺省就可以了。</p>
<p>局部变量：不可以使用权限修饰符。</p>
<blockquote>
<p>​    3 默认初始化值的情况：</p>
</blockquote>
<p>属性：类的属性，根据其类型，都默认初始化值。</p>
<ul>
<li><pre><code>        整型（byte、short、int、long：0）
</code></pre>
</li>
<li><pre><code>        浮点型（float、double：0.0）
</code></pre>
</li>
<li><pre><code>        字符型（char：0  （或'\u0000'））
</code></pre>
</li>
<li><pre><code>        布尔型（boolean：false）
</code></pre>
</li>
<li><pre><code>        引用数据类型（类、数组、接口：null）
</code></pre>
</li>
</ul>
<p>局部变量：没默认初始化值。</p>
<ul>
<li><pre><code>     意味着，我们在调用局部变量之前，一定要显式赋值。
</code></pre>
</li>
<li><pre><code>     特别地：形参在调用时，我们赋值即可。
</code></pre>
</li>
</ul>
<blockquote>
<p>​    4 在内存中加载的位置：</p>
</blockquote>
<p>属性：加载到堆空间中   （非static）</p>
<p>局部变量：加载到栈空间</p>
<blockquote>
<p>​    方式一：按照数据类型</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016222237851.png" alt="image-20211016222237851"></p>
<blockquote>
<p>​    方式二：按照在类中声明的位置：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016222258960.png" alt="image-20211016222258960"></p>
<h4 id="4-封装与隐藏"><a href="#4-封装与隐藏" class="headerlink" title="4) 封装与隐藏"></a>4) 封装与隐藏</h4><blockquote>
<p>​    1.为什么要引入封装性？</p>
</blockquote>
<p>我们程序设计追求“高内聚，低耦合”。<br><strong>高内聚</strong> ：类的内部数据操作细节自己完成，不允许外部干涉；<br><strong>低耦合</strong> ：仅对外暴露少量的方法用于使用。</p>
<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p>
<blockquote>
<p>​    2.Java规定的四种权限修饰符</p>
</blockquote>
<p>权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public</p>
<blockquote>
<pre><code>     3.具体的修饰范围：
</code></pre>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016225016305.png" alt="image-20211016225016305"></p>
<h4 id="5-构造器"><a href="#5-构造器" class="headerlink" title="5) 构造器"></a>5) 构造器</h4><blockquote>
<p>​    构造器的作用：</p>
</blockquote>
<ul>
<li>1.创建对象</li>
<li>2.初始化对象的信息</li>
</ul>
<blockquote>
<p>​    2.使用说明：</p>
</blockquote>
<ul>
<li>1.如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li>
<li>2.定义构造器的格式：权限修饰符  类名(形参列表){}</li>
<li>3.一个类中定义的多个构造器，彼此构成重载</li>
<li>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li>
<li>5.一个类中，至少会有一个构造器。</li>
</ul>
<h4 id="6）this关键字"><a href="#6）this关键字" class="headerlink" title="6）this关键字"></a>6）this关键字</h4><p>1.可以调用的结构：属性、方法；构造器</p>
<blockquote>
<pre><code>     2.this调用属性、方法：
</code></pre>
</blockquote>
<p>​    this理解为：当前对象  或 当前正在创建的对象</p>
<p>2.1  在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，</p>
<ul>
<li>  通常情况下，我们都择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式</li>
<li>  的使用”this.变量”的方式，表明此变量是属性，而非形参。</li>
</ul>
<blockquote>
<p>​    3.this调用构造器：</p>
</blockquote>
<p>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器<br>② 构造器中不能通过”this(形参列表)”方式调用自己<br>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”<br>④ 规定：”this(形参列表)”必须声明在当前构造器的首行<br>⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p>
<h4 id="7-package"><a href="#7-package" class="headerlink" title="7) package"></a>7) package</h4><blockquote>
<p>​    JDK中的主要包介绍</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211017220322671.png" alt="image-20211017220322671"></p>
<h2 id="5-面向对象——中"><a href="#5-面向对象——中" class="headerlink" title="5.面向对象——中"></a>5.面向对象——中</h2><h4 id="1-继承性"><a href="#1-继承性" class="headerlink" title="1) 继承性"></a>1) 继承性</h4><blockquote>
<p>​    1.为什么要有类的继承性？(继承性的好处）</p>
</blockquote>
<ul>
<li>① 减少了代码的冗余，提高了代码的复用性</li>
<li>② 便于功能的扩展</li>
<li>③ 为之后多态性的使用，提供了前提</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211017220510110.png" alt="image-20211017220510110"></p>
<blockquote>
<p>​    2.继承性的格式：</p>
</blockquote>
<p>class A extends B{}</p>
<ul>
<li>   A:子类、派生类、subclass</li>
<li>   B:父类、超类、基类、superclass</li>
</ul>
<blockquote>
<p>​    3.子类继承父类以后有哪些不同？</p>
</blockquote>
<ul>
<li>一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的<strong>属性</strong>和<strong>方法</strong>。<ul>
<li>特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。</li>
</ul>
</li>
<li>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。<ul>
<li>   子类和父类的关系，不同于子集和集合的关系。</li>
<li>   extends：延展、扩展</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    4.Java中继承性的说明</p>
</blockquote>
<p>1.一个类可以被多个子类继承。<br>2.Java中类的单继承性：一个类只能有一个父类<br>3.子父类是相对的概念。<br>4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类<br>5.子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法</p>
<blockquote>
<p>​    5.java.lang.Object类的理解</p>
</blockquote>
<ol>
<li>如果我们没显式的声明一个类的父类的话，则此类继承于java.lang.Object类</li>
<li>所的java类（除java.lang.Object类之外都直接或间接的继承于java.lang.Object类</li>
<li>意味着，所的java类具有java.lang.Object类声明的功能。</li>
</ol>
<h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2) 方法的重写"></a>2) 方法的重写</h4><blockquote>
<p>​    1.什么是方法的重写(override 或 overwrite)？</p>
</blockquote>
<p>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作.</p>
<blockquote>
<p>​    2. 应用：</p>
</blockquote>
<p>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。</p>
<blockquote>
<p>​    3.重写的规则：</p>
</blockquote>
<p>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</p>
<p> ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p>
<p>返回值：       </p>
<ul>
<li><table>
<thead>
<tr>
<th>父类：void</th>
<th>子类：void</th>
</tr>
</thead>
<tbody><tr>
<td>父类：A类</td>
<td>子类：A类或者A类的子类</td>
</tr>
<tr>
<td>父类：基本数据类型</td>
<td>子类：和父类相同</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>特殊情况</strong>：子类不能重写父类中声明为private权限的方法</p>
<p>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候</p>
<p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写，要么都声明为static的（不是重写)。    </p>
<blockquote>
<p>​    5.区分方法的重写和重载？</p>
</blockquote>
<p>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p>
<p><em>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</em></p>
<p>而对于<strong>多态</strong>，只等到方法<strong>调用</strong>的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。 </p>
<h4 id="3-super关键字"><a href="#3-super关键字" class="headerlink" title="3) super关键字"></a>3) super关键字</h4><blockquote>
<p>​    1.super 关键字可以理解为：父类的</p>
</blockquote>
<blockquote>
<p>​    2.可以用来调用的结构：</p>
</blockquote>
<p>属性、方法、构造器</p>
<blockquote>
<p>​    3.super调用属性、方法：</p>
</blockquote>
<ul>
<li> 我们可以在子类的方法或构造器中。通过使用”<strong>super.属性”或”super.方法</strong>“的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li>
<li> 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中<strong>调用父类</strong>中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li>
<li> 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</li>
</ul>
<blockquote>
<p>​    4.super调用构造器：</p>
</blockquote>
<ul>
<li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li>
<li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li>
<li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二一，不能同时出现</li>
<li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li>
<li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li>
</ul>
<h4 id="4-子类对象实例化全过程"><a href="#4-子类对象实例化全过程" class="headerlink" title="4) 子类对象实例化全过程"></a>4) 子类对象实例化全过程</h4><blockquote>
<p>​    1.从结果上看：继承性</p>
</blockquote>
<ul>
<li>子类继承父类以后，就获取了父类中声明的属性或方法。</li>
<li>创建子类的对象，在堆空间中，就会加载所父类中声明的属性。</li>
</ul>
<blockquote>
<p>​    2.从过程上看：</p>
</blockquote>
<p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用。</p>
<blockquote>
<p>​    3.强调说明：</p>
</blockquote>
<p>虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p>
<h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5) 多态性"></a>5) 多态性</h4><blockquote>
<p>​    1.多态性的理解：可以理解为一个事物的多种形态。</p>
</blockquote>
<blockquote>
<p>​    2.何为多态性：</p>
</blockquote>
<p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//举例：</span>
Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    3.多态性的使用：虚拟方法调用</p>
</blockquote>
<ul>
<li><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p>
</li>
<li><p>总结：编译，看左边；运行，看右边。</p>
</li>
</ul>
<blockquote>
<p>​    4.多态性的使用前提：</p>
</blockquote>
<p>① 类的继承关系  ② 方法的重写</p>
<blockquote>
<p>​    5.多态性的应用举例：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">举例一：
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Animal animal = new Dog();</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

举例二：
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token punctuation">}</span>

举例三：
<span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doData</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//conn = new MySQlConnection(); / conn = new OracleConnection();</span>
                <span class="token comment" spellcheck="true">//规范的步骤去操作数据</span>
<span class="token comment" spellcheck="true">//        conn.method1();</span>
<span class="token comment" spellcheck="true">//        conn.method2();</span>
<span class="token comment" spellcheck="true">//        conn.method3();</span>
        
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    6.多态性使用的注意点：</p>
</blockquote>
<p>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边)</p>
<blockquote>
<p>​    7.关于向上转型与向下转型：</p>
</blockquote>
<ul>
<li><p>向上转型：多态</p>
</li>
<li><p>向下转型：类型转换符（）</p>
</li>
</ul>
<p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。</p>
<p><strong>注意:</strong></p>
<p>① 使用强转时，可能出现ClassCastException的异常。</p>
<p>② 为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p>
<blockquote>
<p>​    8. instanceof的使用：</p>
</blockquote>
<p>① a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。</p>
<p>② 如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。</p>
<p>③ 要求a所属的类与类A必须是子类和父类的关系，否则编译错误。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018000554514.png" alt="image-20211018000554514"></p>
<blockquote>
<p>​    9.面试题：</p>
</blockquote>
<p><strong>1.谈谈你对多态性的理解？</strong></p>
<p>① 实现代码的通用性。</p>
<p>② Object类中定义的public boolean equals(Object obj){  }</p>
<p>  JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</p>
<p>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</p>
<p><strong>2.多态是编译时行为还是运行时行为？</strong></p>
<p>编译，看左边；运行，看右边。</p>
<h4 id="6-Object类的使用"><a href="#6-Object类的使用" class="headerlink" title="6) Object类的使用"></a>6) Object类的使用</h4><blockquote>
<p>​    1.java.lang.Object类的说明：</p>
</blockquote>
<p>1.Object类是所Java类的根父类</p>
<p>2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 </p>
<p>3.Object类中的功能(属性、方法)就具通用性。</p>
<p>方法：equals() / toString() / getClass() /hashCode() / clone() / finalize()、wait() 、 notify()、notifyAll()</p>
<ol start="4">
<li>Object类只声明了一个空参的构造器</li>
</ol>
<blockquote>
<p>​    2.equals()方法</p>
</blockquote>
<ol>
<li>是一个方法，而非运算符</li>
<li>只能适用于引用数据类型</li>
<li>Object类中equals()的定义：</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p>
<ol start="4">
<li>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</li>
<li>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写</li>
</ol>
<blockquote>
<p>​    3.如何重写equals()</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//手动重写举例：</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
String name<span class="token punctuation">;</span>
<span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//重写其equals()方法</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> u<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4.== 运算符的使用：</p>
</blockquote>
<ol>
<li><p>可以使用在基本数据类型变量和引用数据类型变量中</p>
</li>
<li><p>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p>
</li>
<li><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p>
</li>
</ol>
<p><strong>补充</strong>： == 符号使用时，必须保证符号左右两边的变量类型一致</p>
<h4 id="7-Java中的JUnit单元测试"><a href="#7-Java中的JUnit单元测试" class="headerlink" title="7) Java中的JUnit单元测试"></a>7) Java中的JUnit单元测试</h4><p><strong>步骤：</strong></p>
<ul>
<li>1.中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步</li>
<li>2.创建Java类，进行单元测试。</li>
<li>此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器</li>
<li>3.此类中声明单元测试方法。</li>
<li>此时的单元测试方法：方法的权限是public,没返回值，没形参</li>
<li></li>
<li>4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</li>
<li></li>
<li>5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。</li>
<li>6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</li>
</ul>
<h4 id="8-包装类的使用"><a href="#8-包装类的使用" class="headerlink" title="8) 包装类的使用"></a>8) 包装类的使用</h4><blockquote>
<p>​    1.为什么要有包装类(或封装类）</p>
</blockquote>
<p>为了使基本数据类型的变量具有类的特征，引入包装类。</p>
<blockquote>
<p>​    2.基本数据类型与对应的包装类：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018001353022.png" alt="image-20211018001353022"></p>
<blockquote>
<p>​    3.需要掌握的类型间的转换：（基本数据类型、包装类、String）</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018001416347.png" alt="image-20211018001416347"></p>
<blockquote>
<p>​    简易版：</p>
</blockquote>
<ul>
<li><p>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱</p>
</li>
<li><p>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)</p>
</li>
<li><p>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</p>
<p>注意：转换时，可能会报NumberFormatException</p>
</li>
</ul>
<p><strong>应用场景举例：</strong></p>
<p>① Vector类中关于添加元素，只定义了形参为Object类型的方法：</p>
<p>v.addElement(Object obj);   //基本数据类型 —&gt;包装类 —&gt;使用多态</p>
<h2 id="6-面向对象——下"><a href="#6-面向对象——下" class="headerlink" title="6.面向对象——下"></a>6.面向对象——下</h2><h4 id="1-static-关键字"><a href="#1-static-关键字" class="headerlink" title="1) static 关键字"></a>1) static 关键字</h4><blockquote>
<p>​    1.可以用来修饰的结构：主要用来修饰类的内部结构</p>
</blockquote>
<p>属性、方法、代码块、内部类</p>
<blockquote>
<p>​    2.static修饰属性：静态变量（或类变量）</p>
</blockquote>
<ul>
<li><p>属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</p>
<ul>
<li><p>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p>
</li>
<li><p>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p>
</li>
</ul>
</li>
<li><p>① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</p>
</li>
<li><p>② 静态变量的加载要早于对象的创建。</p>
</li>
<li><p>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p>
</li>
</ul>
<blockquote>
<p>​    3.静态变量内存解析：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018200553246.png" alt="image-20211018200553246"></p>
<blockquote>
<p>​    4.static修饰方法：静态方法、类方法</p>
</blockquote>
<p>① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用</p>
<p>② 静态方法中，只能调用静态的方法或属性</p>
<p>③ 非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>
<blockquote>
<p>​    5. static的注意点：</p>
</blockquote>
<p>在静态的方法内，不能使用this关键字、super关键字</p>
<p>关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</p>
<blockquote>
<p>​    6.如何判定属性和方法应该使用static关键字：</p>
</blockquote>
<ul>
<li><p>关于属性</p>
<ul>
<li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</li>
<li>类中的常量也常常声明为static</li>
</ul>
</li>
<li><p>关于方法</p>
<ul>
<li><p>操作静态属性的方法，通常设置为static的</p>
</li>
<li><p>工具类中的方法，习惯上声明为static的。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    7.使用举例：</p>
</blockquote>
<p>举例一：Arrays、Math、Collections等工具类</p>
<p>举例二：单例模式</p>
<h4 id="2-main-方法"><a href="#2-main-方法" class="headerlink" title="2) main()方法"></a>2) main()方法</h4><ul>
<li><ol>
<li>main()方法作为程序的入口</li>
</ol>
</li>
<li><ol start="2">
<li>main()方法也是一个普通的静态方法</li>
</ol>
</li>
<li><ol start="3">
<li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li>
</ol>
</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018201041980.png" alt="image-20211018201041980"></p>
<h4 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3) 代码块"></a>3) 代码块</h4><blockquote>
<p>​    1.代码块的作用：用来初始化类、对象的信息</p>
</blockquote>
<blockquote>
<p>​    2.分类：代码块要是使用修饰符，只能使用static</p>
</blockquote>
<p>分类：静态代码块  vs 非静态代码块</p>
<blockquote>
<p>​    3.静态代码块：</p>
</blockquote>
<ul>
<li>内部可以输出语句</li>
<li><strong>随着类的加载而执行,而且只执行一次</strong></li>
<li>作用：初始化类的信息</li>
<li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序</li>
<li>执行静态代码块的执行要优先于非静态代码块的执行</li>
<li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li>
</ul>
<blockquote>
<p>​    4.非静态代码块：</p>
</blockquote>
<ul>
<li>内部可以输出语句</li>
<li><strong>随着对象的创建而执行</strong></li>
<li>每创建一个对象，就执行一次非静态代码块</li>
<li>作用：可以在创建对象时，对对象的属性等进行初始化</li>
<li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li>
<li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li>
</ul>
<blockquote>
<p>​    5.属性的赋值顺序</p>
</blockquote>
<ul>
<li>①默认初始化</li>
<li>②显式初始化/⑤在代码块中赋值</li>
<li>③构造器中初始化</li>
<li>④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值</li>
</ul>
<p>执行的先后顺序：① - ② / ⑤ - ③ - ④</p>
<h4 id="4-final-关键字"><a href="#4-final-关键字" class="headerlink" title="4) final 关键字"></a>4) final 关键字</h4><blockquote>
<p>​    1.可以用来修饰：类、方法、变量</p>
</blockquote>
<blockquote>
<p>​    2.具体的：</p>
</blockquote>
<ul>
<li><p>final 用来修饰一个类:<strong>此类不能被其他类所继承。</strong></p>
<ul>
<li>比如：String类、System类、StringBuffer类</li>
</ul>
</li>
<li><p>final 用来修饰方法：<strong>表明此方法不可以被重写</strong></p>
<ul>
<li>比如：Object类中getClass();</li>
</ul>
</li>
<li><p>final 用来修饰变量：<strong>此时的”变量”就称为是一个常量</strong></p>
<ul>
<li>1.final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始</li>
<li><ol start="2">
<li>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li>
</ol>
</li>
</ul>
</li>
<li><p>static final 用来修饰属性：<strong>全局常量</strong></p>
</li>
</ul>
<h4 id="5-abstract-关键字"><a href="#5-abstract-关键字" class="headerlink" title="5) abstract 关键字"></a>5) abstract 关键字</h4><blockquote>
<p>​    1.可以用来修饰：类、方法</p>
</blockquote>
<blockquote>
<p>​    2.具体的：</p>
</blockquote>
<p><strong>abstract修饰类：抽象类</strong></p>
<ul>
<li>此类不能实例化</li>
<li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li>
</ul>
<p><strong>abstract修饰方法：抽象方法</strong></p>
<ul>
<li><pre><code>    抽象方法只方法的声明，没方法体
</code></pre>
</li>
<li><pre><code>    包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。
</code></pre>
</li>
<li><pre><code>    若子类重写了父类中的所的抽象方法后，此子类方可实例化
</code></pre>
</li>
<li><pre><code>    若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰
</code></pre>
</li>
</ul>
<blockquote>
<p>​    3.注意点：</p>
</blockquote>
<ul>
<li><p>1.abstract不能用来修饰：属性、构造器等结构</p>
</li>
<li><p>2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p>
</li>
</ul>
<h4 id="6-interface-接口"><a href="#6-interface-接口" class="headerlink" title="6) interface 接口"></a>6) interface 接口</h4><blockquote>
<p>​    1.使用说明：</p>
</blockquote>
<ul>
<li>1.接口使用interface来定义</li>
</ul>
<ul>
<li>2.Java中，接口和类是并列的两个结构</li>
<li>3.如何定义接口：定义接口中的成员</li>
</ul>
<ul>
<li><p>3.1 JDK7及以前：只能定义全局常量和抽象方法</p>
<pre><code>- 全局常量：public static final的.但是书写时，可以省略不写
- 抽象方法：public abstract的
</code></pre>
</li>
<li><p>3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略</p>
</li>
<li><ol start="4">
<li>接口中不能定义构造器的！意味着<strong>接口不可以实例化</strong></li>
</ol>
</li>
<li><ol start="5">
<li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li>
</ol>
<ul>
<li><p>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</p>
</li>
<li><p>如果实现类没覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p>
</li>
</ul>
</li>
<li><ol start="6">
<li>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</li>
</ol>
<ul>
<li>格式：class AA extends BB implements CC,DD,EE</li>
</ul>
</li>
<li><ol start="7">
<li>接口与接口之间可以继承，而且可以多继承</li>
</ol>
</li>
<li><ol start="8">
<li>接口的具体使用，体现多态性</li>
</ol>
</li>
<li><ol start="9">
<li>接口，实际上可以看做是一种规范</li>
</ol>
</li>
</ul>
<blockquote>
<p>​    2.面向接口编程的思想</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018222932796.png" alt="image-20211018222932796"></p>
<p>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个</p>
<blockquote>
<p>​    3.Java8中关于接口的新规范</p>
</blockquote>
<ul>
<li>知识点1：接口中定义的静态方法，只能通过接口来调用。</li>
<li>知识点2：通过实现类的对象，可以调用接口中的默认方法。如果实现类<strong>重写了接口</strong>中的默认方法，调用时，仍然调用的是重写以后的方法</li>
<li>知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了<strong>同名同参数的</strong>默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则</li>
<li>知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突。</li>
<li>知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用自己定义的重写的方法</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用的是父类中声明的</span>
        <span class="token comment" spellcheck="true">//调用接口中的默认方法</span>
        CompareA<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CompareB<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    抽象类和接口的异同？</p>
</blockquote>
<ul>
<li>相同点：不能实例化；都可以包含抽象方法的</li>
<li>不同点：<ul>
<li>把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明</li>
<li>2）类：单继承性    接口：多继承</li>
</ul>
</li>
</ul>
<h4 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7) 内部类"></a>7) 内部类</h4><blockquote>
<p>​    1.定义：</p>
</blockquote>
<p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</p>
<blockquote>
<p>​    2.内部类的分类：</p>
</blockquote>
<p>成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)</p>
<blockquote>
<p>​    3.成员内部类的理解：</p>
</blockquote>
<p><strong>一方面，作为外部类的成员：</strong></p>
<ul>
<li>调用外部类的结构</li>
<li>可以被static修饰</li>
<li>可以被4种不同的权限修饰</li>
</ul>
<p><strong>另一方面，作为一个类：</strong></p>
<ul>
<li><pre><code>        类内可以定义属性、方法、构造器等
</code></pre>
</li>
<li><pre><code>        可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承
</code></pre>
</li>
<li><pre><code>        可以被abstract修饰
</code></pre>
</li>
</ul>
<blockquote>
<p>​    4.成员内部类：</p>
</blockquote>
<ul>
<li>4.1如何创建成员内部类的对象？(静态的，非静态的)</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建静态的Dog内部类的实例(静态的成员内部类):</span>
person<span class="token punctuation">.</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//创建非静态的Bird内部类的实例(非静态的成员内部类):</span>
<span class="token comment" spellcheck="true">//Person.Bird bird = new Person.Bird();//错误的</span>
Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>Bird bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>4.2如何在成员内部类中调用外部类的结构？</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    String name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//非静态成员内部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>
        String name <span class="token operator">=</span> <span class="token string">"杜鹃"</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法的形参</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部类的属性</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部类的属性</span>
        <span class="token comment" spellcheck="true">//Person.this.eat();</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    5.局部内部类的使用：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回一个实现了Comparable接口的类的对象</span>
<span class="token keyword">public</span> Comparable <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//方式一：</span>
    <span class="token keyword">class</span> <span class="token class-name">Mycomparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//方式二：</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结：</strong></p>
<p>成员内部类和局部内部类，在编译以后，都会生成字节码文件。</p>
<p>格式： 成员内部类：外部类$内部类名.class</p>
<p>​            局部内部类：外部类$数字 内部类名.class</p>
<h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><h4 id="1-异常"><a href="#1-异常" class="headerlink" title="1) 异常"></a>1) 异常</h4><blockquote>
<p>​    1. 异常的体系结构</p>
</blockquote>
<ul>
<li>java.lang.Throwable<ul>
<li><pre><code>    |-----java.lang.Error:一般不编写针对性的代码进行处理。
</code></pre>
</li>
<li><pre><code>    |-----java.lang.Exception:可以进行异常的处理    * |------**编译时异常(checked)**      * |-----IOException        *                         |-----FileNotFoundException      * |-----ClassNotFoundException    * |------**运行时异常**(unchecked,RuntimeException)      *                     |-----NullPointerException      *                     |-----ArrayIndexOutOfBoundsException      *                     |-----ClassCastException      *                     |-----NumberFormatException      *                     |-----InputMismatchException      *                     |-----ArithmeticException
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018230857756.png" alt="image-20211018230857756"></p>
<blockquote>
<p>​    2.从程序执行过程，看编译时异常和运行时异常</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018230945731.png" alt="image-20211018230945731"></p>
<p>编译时异常：执行javac.exe命名时，可能出现的异常</p>
<p>运行时异常：执行java.exe命名时，出现的异常</p>
<blockquote>
<p>​    3.常见的异常类型，请举例说明：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>以下是运行时异常<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token comment" spellcheck="true">//ArithmeticException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//InputMismatchException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//NumberFormatException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        String str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//ClassCastException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//ArrayIndexOutOfBoundsException</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//StringIndexOutOfBoundsException</span>
        String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//NullPointerException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
<span class="token comment" spellcheck="true">//        int[] arr = null;</span>
<span class="token comment" spellcheck="true">//        System.out.println(arr[3]);</span>
        
        String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> null<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>以下是编译时异常<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="2-异常的处理"><a href="#2-异常的处理" class="headerlink" title="2) 异常的处理"></a>2) 异常的处理</h4><blockquote>
<p>​    1.java异常处理的抓抛模型</p>
</blockquote>
<p><strong>过程一：</strong>“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</p>
<ol>
<li><p>并将此对象抛出。</p>
</li>
<li><p>一旦抛出对象以后，其后的代码就不再执行。</p>
<p><strong>关于异常对象的产生：</strong></p>
</li>
</ol>
<p>① 系统自动生成的异常对象</p>
<p>② 手动的生成一个异常对象，并抛出（throw）</p>
<p><strong>过程二</strong>：”抓”：可以理解为异常的处理方式：① try-catch-finally  ② throws</p>
<blockquote>
<p>​    2.异常处理方式一：try-catch-finally</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//可能出现异常的代码</span>
  
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式1</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式2</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式3</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">finally</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//一定会执行的代码</span>
  <span class="token punctuation">}</span>
</code></pre>
<p><strong>说明：</strong></p>
<ol>
<li>finally是可选的。</li>
<li>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li>
<li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没写finally的情况。继续执行其后的代码</li>
<li>catch中的异常类型如果没子父类关系，则谁声明在上，谁声明在下无所谓。catch中的异常类型如果满足子父类关系，则要求<strong>子类一定声明在父类的上面</strong>。否则，报错</li>
<li>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</li>
<li>在try结构中声明的变量，再出了try结构以后，就不能再被调用</li>
<li>try-catch-finally结构可以嵌套</li>
</ol>
<blockquote>
<p>​    2.finally</p>
</blockquote>
<p>1.finally是可选的</p>
<p>2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况。</p>
<p>3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</p>
<blockquote>
<p>​    3.final、finally、finalize三者的区别？</p>
</blockquote>
<p><strong>类似：</strong></p>
<ul>
<li>throw 和 throws</li>
<li>Collection 和 Collections</li>
<li>String 、StringBuffer、StringBuilder</li>
<li>ArrayList 、 LinkedList</li>
<li>HashMap 、LinkedHashMap</li>
<li>重写、重载</li>
</ul>
<p><strong>结构不相似的：</strong></p>
<ul>
<li>抽象类、接口</li>
<li>== 、 equals()</li>
<li>sleep()、wait()</li>
</ul>
<blockquote>
<p>​    3.异常处理方式二：</p>
</blockquote>
<p>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。</p>
<p>一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>
<blockquote>
<p>​    4. 对比两种处理方式</p>
</blockquote>
<p>try-catch-finally:真正的将异常给处理掉了。</p>
<p>throws的方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。 </p>
<blockquote>
<p>​    5. 体会开发中应该如何选择两种处理方式？</p>
</blockquote>
<p>如果父类中被重写的方法没throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中异常，必须使用try-catch-finally方式处理。</p>
<p>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</p>
<p>方法重写的规则之一：</p>
<p><strong>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</strong></p>
<h4 id="3-手动抛出异常"><a href="#3-手动抛出异常" class="headerlink" title="3) 手动抛出异常"></a>3) 手动抛出异常</h4><blockquote>
<p>​    1.使用说明</p>
</blockquote>
<p>在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象。</p>
<blockquote>
<p>​    2.throw 和  throws区别：</p>
</blockquote>
<ul>
<li>throw 表示抛出一个异常类的对象，生成异常对象的过程。声明在方法体内。</li>
<li>throws 属于异常处理的一种方式，声明在方法的声明处。</li>
</ul>
<blockquote>
<p>​    3.典型例题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//手动抛出异常对象</span>
<span class="token comment" spellcheck="true">//            throw new RuntimeException("您输入的数据非法！");</span>
<span class="token comment" spellcheck="true">//            throw new Exception("您输入的数据非法！");</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
<span class="token punctuation">}</span>

</code></pre>
<h4 id="4-自定义异常类"><a href="#4-自定义异常类" class="headerlink" title="4) 自定义异常类"></a>4) 自定义异常类</h4><blockquote>
<p>​    1.如何自定义一个异常类？</p>
</blockquote>
<ol>
<li><p>继承于现的异常结构：RuntimeException 、Exception</p>
</li>
<li><p>提供全局常量：serialVersionUID</p>
</li>
<li><p>提供重载的构造器</p>
</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7034897193246939L<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<h2 id="8-多线程"><a href="#8-多线程" class="headerlink" title="8.多线程"></a>8.多线程</h2><h4 id="1）程序、进程、线程"><a href="#1）程序、进程、线程" class="headerlink" title="1）程序、进程、线程"></a>1）程序、进程、线程</h4><blockquote>
<p>​    01. 程序(programm)</p>
</blockquote>
<p>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</p>
<blockquote>
<p>​    02. 进程(process)</p>
</blockquote>
<p>概念：程序的一次执行过程，或是正在运行的一个程序。</p>
<p>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>
<blockquote>
<p>​    03. 线程(thread)</p>
</blockquote>
<p>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>
<p>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022211236934.png" alt="image-20211022211236934"></p>
<ul>
<li>进程可以细化为多个线程。</li>
<li>每个线程，拥有自己独立的：栈、程序计数器</li>
<li>多个线程，共享同一个进程中的结构：方法区、堆。</li>
</ul>
<h4 id="2-并行与并发"><a href="#2-并行与并发" class="headerlink" title="2) 并行与并发"></a>2) 并行与并发</h4><blockquote>
<p>​    01. 单核CPU与多核CPU的理解</p>
</blockquote>
<p>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。<strong>例如</strong>：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。</p>
<p>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</p>
<p>一个Java应用程序java.exe，其实至少三个线程：<strong>main()主线程，gc()垃圾回收线程，异常处理线程</strong>。当然如果发生异常，会影响主线程。</p>
<blockquote>
<p>​    02. 并行与并发的理解</p>
</blockquote>
<p>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p>
<p>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</p>
<h4 id="3-创建多线程的两种方式"><a href="#3-创建多线程的两种方式" class="headerlink" title="3) 创建多线程的两种方式"></a>3) 创建多线程的两种方式</h4><blockquote>
<p>​    方式一：继承Thread类的方式：</p>
</blockquote>
<ul>
<li><ol>
<li>创建一个继承于Thread类的子类</li>
</ol>
</li>
<li><ol start="2">
<li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li>
</ol>
</li>
<li><ol start="3">
<li>创建Thread类的子类的对象</li>
</ol>
</li>
<li><ol start="4">
<li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li>
</ol>
</li>
</ul>
<p>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。</p>
<p>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</p>
<blockquote>
<p>​    方式二：实现Runnable接口的方式：</p>
</blockquote>
<ul>
<li><ol>
<li>创建一个实现了Runnable接口的类</li>
</ol>
</li>
<li><ol start="2">
<li>实现类去实现Runnable中的抽象方法：run()</li>
</ol>
</li>
<li><ol start="3">
<li>创建实现类的对象</li>
</ol>
</li>
<li><ol start="4">
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
</ol>
</li>
<li><ol start="5">
<li>通过Thread类的对象调用start()</li>
</ol>
</li>
</ul>
<blockquote>
<p>​    3.两种方式的对比：</p>
</blockquote>
<p>开发中：优先选择：实现Runnable接口的方式</p>
<p><strong>原因：</strong></p>
<ul>
<li>实现的方式没类的单继承性的局限性</li>
<li>实现的方式更适合来处理多个线程共享数据的情况。</li>
</ul>
<p><strong>相同点：</strong></p>
<ul>
<li>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</li>
<li>目前两种方式，要想启动线程，都是调用的Thread类中的start()。</li>
</ul>
<h4 id="4-Thread类中的常用方法"><a href="#4-Thread类中的常用方法" class="headerlink" title="4) Thread类中的常用方法"></a>4) Thread类中的常用方法</h4><blockquote>
<p>​    1.常用方法</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. start():启动当前线程；调用当前线程的run()</span>

<span class="token comment" spellcheck="true">//2. run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</span>

<span class="token comment" spellcheck="true">//3. currentThread():静态方法，返回执行当前代码的线程</span>

<span class="token comment" spellcheck="true">//4. getName():获取当前线程的名字</span>

<span class="token comment" spellcheck="true">//5. setName():设置当前线程的名字</span>

<span class="token comment" spellcheck="true">//6. yield():释放当前cpu的执行权</span>

<span class="token comment" spellcheck="true">//7. join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</span>

<span class="token comment" spellcheck="true">//8. stop():已过时。当执行此方法时，强制结束当前线程。</span>

<span class="token comment" spellcheck="true">//9. sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</span>

<span class="token comment" spellcheck="true">//10. isAlive():判断当前线程是否存活</span>
</code></pre>
<blockquote>
<p>​    2.线程的优先级</p>
</blockquote>
<p>MAX_PRIORITY：10</p>
<p>MIN _PRIORITY：1</p>
<p>NORM_PRIORITY：5  –&gt;默认优先级</p>
<p><strong>如何获取和设置当前线程的优先级</strong>？</p>
<p>getPriority():获取线程的优先级</p>
<p>setPriority(int p):设置线程的优先级</p>
<p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，<strong>高优先级的线程高概率的情况下被执行</strong>。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</p>
<p>线程通信：<strong>wait() / notify() / notifyAll()</strong> :此三个方法定义在Object类中的。</p>
<blockquote>
<p>​    3.线程的分类</p>
</blockquote>
<p>一种是守护线程，一种是用户线程。</p>
<h4 id="5-Thread的生命周期"><a href="#5-Thread的生命周期" class="headerlink" title="5) Thread的生命周期"></a>5) Thread的生命周期</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211022215952796.png" alt="image-20211022215952796"></p>
<p><strong>说明：</strong></p>
<p>1.生命周期关注两个概念：状态、相应的方法</p>
<p>2.关注：状态a–&gt;状态b:哪些方法执行了（回调方法）</p>
<p>​                某个方法主动调用：状态a–&gt;状态b</p>
<p>3.阻塞：临时状态，不可以作为最终状态<br>  死亡：最终状态。</p>
<h4 id="6）线程的同步机制"><a href="#6）线程的同步机制" class="headerlink" title="6）线程的同步机制"></a>6）线程的同步机制</h4><blockquote>
<p>​    方式一：同步代码块</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//需要被同步的代码块</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>说明：</strong></p>
<ol>
<li>操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</li>
<li><strong>共享数据</strong>：多个线程共同操作的变量。比如：ticket就是共享数据。</li>
<li><strong>同步监视器</strong>，俗称：锁。任何一个类的对象，都可以充当锁。要求：多个线程必须要共用同一把锁。</li>
</ol>
<p>补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</p>
<p>在继承Thread类创建多线程的方式中，<strong>慎用this充当同步监视器</strong>，考虑使用当前类充当同步监视器。</p>
<blockquote>
<p>​    方式二：同步方法</p>
</blockquote>
<p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p>
<p><strong>关于同步方法的总结：</strong></p>
<ol>
<li><p>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</p>
</li>
<li><p>非静态的同步方法，同步监视器是：this</p>
</li>
</ol>
<p>静态的同步方法，同步监视器是：当前类本身</p>
<blockquote>
<p>​    方式三：Lock锁  — JDK5.0新增</p>
</blockquote>
<ol>
<li>面试题：synchronized 与 Lock的异同？</li>
</ol>
<ul>
<li>相同：二者都可以解决线程安全问题</li>
<li>不同：<ul>
<li>synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</li>
<li>Lock需要手动的启动同步（lock()，同时结束同步也需要手动的实现（unlock()）</li>
</ul>
</li>
</ul>
<p><strong>使用的优先顺序：</strong></p>
<p> Lock —&gt; 同步代码块（已经进入了方法体，分配了相应资源 ) —&gt; 同步方法（在方法体之外)</p>
<blockquote>
<p>​    3.利弊</p>
</blockquote>
<p>同步的方式，解决了线程的安全问题。—好处</p>
<p>操作同步代码时，只能一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</p>
<h4 id="7-线程通讯"><a href="#7-线程通讯" class="headerlink" title="7) 线程通讯"></a>7) 线程通讯</h4><blockquote>
<p>​    1.线程通信涉及到的三个方法：</p>
</blockquote>
<ul>
<li>wait():一旦执行此方法，当前线程就进入<strong>阻塞</strong>状态，并释放同步监视器。</li>
<li>notify():一旦执行此方法，就会<strong>唤醒</strong>被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li>
<li>notifyAll():一旦执行此方法，就会<strong>唤醒所有</strong>被wait的线程。</li>
</ul>
<blockquote>
<p>​    2.说明：</p>
</blockquote>
<ul>
<li> 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li>
<li> 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。(否则，会出现<strong>IllegalMonitorStateException</strong>异常)</li>
<li> 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li>
</ul>
<blockquote>
<p>​    3.面试题：sleep() 和 wait()的异同？</p>
</blockquote>
<ul>
<li>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li>
<li>2.不同点：<ul>
<li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li>
<li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li>
<li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，<strong>sleep()不会释放锁，wait()会释放锁</strong>。</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    4.小结释放锁的操作：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022221033227.png" alt="image-20211022221033227"></p>
<blockquote>
<p>​    5.小结不会释放锁的操作：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022221046890.png" alt="image-20211022221046890"></p>
<h4 id="8-JDK5-0新增线程创建"><a href="#8-JDK5-0新增线程创建" class="headerlink" title="8) JDK5.0新增线程创建"></a>8) JDK5.0新增线程创建</h4><blockquote>
<p>​    新增方式一：实现Callable接口。</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建一个实现Callable的实现类</span>
<span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//2.实现Call方法，将此线程需要执行的操作声明在call()</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//3.创建Callable接口实现类的对象</span>
        NumThread numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4.将此Callable接口实现类的对象传递到FutureTask构造器中，创建FutureTask的对象</span>
        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>numThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>
          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//6.获取Callable中call方法的返回值</span>
            <span class="token comment" spellcheck="true">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>
             Object sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p>
<ol>
<li><p>call()可以返回值的。</p>
</li>
<li><p>call()可以抛出异常，被外面的操作捕获，获取异常的信息</p>
</li>
<li><p>Callable是支持泛型的</p>
</li>
</ol>
<blockquote>
<p>​    新增方式二：使用线程池</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1. 提供指定线程数量的线程池</span>
        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ThreadPoolExecutor service1 <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> service<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置线程池的属性</span>
<span class="token comment" spellcheck="true">//        System.out.println(service.getClass());</span>
<span class="token comment" spellcheck="true">//        service1.setCorePoolSize(15);</span>
<span class="token comment" spellcheck="true">//        service1.setKeepAliveTime();</span>


        <span class="token comment" spellcheck="true">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适合适用于Runnable</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适合适用于Runnable</span>

<span class="token comment" spellcheck="true">//        service.submit(Callable callable);//适合使用于Callable</span>
        <span class="token comment" spellcheck="true">//3.关闭连接池</span>
        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>好处：</strong></p>
<p>1.提高响应速度（减少了创建新线程的时间）</p>
<p>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p>
<p>3.便于线程管理</p>
<p>​    corePoolSize：核心池的大小</p>
<p>​     maximumPoolSize：最大线程数</p>
<p>​    keepAliveTime：线程没任务时最多保持多长时间后会终止</p>
<h2 id="9-Java常用类"><a href="#9-Java常用类" class="headerlink" title="9.Java常用类"></a>9.Java常用类</h2><h4 id="1）String类"><a href="#1）String类" class="headerlink" title="1）String类"></a>1）String类</h4><blockquote>
<p>​    1.概述</p>
</blockquote>
<p>String:字符串，使用一对””引起来表示。</p>
<ul>
<li>1.String声明为final的，不可被继承</li>
<li>2.String:<ul>
<li>实现了Serializable接口：表示字符串是支持序列化的。</li>
<li>实现了Comparable接口：表示String可以比较大小</li>
</ul>
</li>
<li>3.String内部定义了final char[] value用于存储字符串数据</li>
<li>4.通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。</li>
<li>5.字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</li>
</ul>
<blockquote>
<p>​    2.String的不可变性</p>
</blockquote>
<p><strong>说明:</strong></p>
<p>1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p>2.当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p>3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p><strong>内存图解:</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023205653151.png" alt="image-20211023205653151"></p>
<blockquote>
<p>​    3.String实例化的不同方式</p>
</blockquote>
<p><strong>3.1 方式说明</strong></p>
<p>方式一：通过字面量定义的方式  String s1 = “javaEE”;<br>方式二：通过new + 构造器的方式 String s3 = new String(“javaEE”);</p>
<p><strong>3.2 面试题</strong><br><strong>String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？</strong><br>两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p>
<p><strong>3.3 图示</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023205841979.png" alt="image-20211023205841979"></p>
<blockquote>
<p>​    4. 字符串拼接方式赋值的对比</p>
</blockquote>
<p><strong>4.1 说明</strong></p>
<p>1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>2.只要其中一个是变量，结果就在堆中。<br>3.如果拼接的结果调用intern()方法，返回值就在常量池中</p>
<blockquote>
<p>​    5.常用方法：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的长度
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>： 返回某索引处的字符
<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是空字符串
String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将 String 中的所字符转换为小写
String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：使用默认语言环境，将 String 中的所字符转换为大写
String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的副本，忽略前导空白和尾部空白
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>：比较字符串的内容是否相同
<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：与equals方法类似，忽略大小写
String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：将指定字符串连接到此字符串的结尾。 等价于用“<span class="token operator">+</span>”
<span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：比较两个字符串的大小
String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。
String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> ：返回一个新字符串，它是此字符串从beginIndex开始截取到<span class="token function">endIndex</span><span class="token punctuation">(</span>不包含<span class="token punctuation">)</span>的一个子字符串。

<span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>：测试此字符串是否以指定的后缀结束
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span>：测试此字符串是否以指定的前缀开始
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始

<span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>：当且仅当此字符串包含指定的 <span class="token keyword">char</span> 值序列时，返回 <span class="token boolean">true</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最右边出现处的索引
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索

注：indexOf和lastIndexOf方法如果未找到都是返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre>
<p><strong>替换：</strong></p>
<pre class=" language-java"><code class="language-java">String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。
String <span class="token function">replace</span><span class="token punctuation">(</span>CharSequence target<span class="token punctuation">,</span> CharSequence replacement<span class="token punctuation">)</span>：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。
String <span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span>：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。
String <span class="token function">replaceFirst</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。
匹配<span class="token operator">:</span>
<span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：告知此字符串是否匹配给定的正则表达式。
切片：
String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：根据给定正则表达式的匹配拆分此字符串。
String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。
</code></pre>
<blockquote>
<p>​    6. String与其它结构的转换</p>
</blockquote>
<p><strong>6.1 与基本数据类型、包装类之间的转换</strong></p>
<ul>
<li>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</li>
<li>基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> Intenger<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    String str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String str3 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
    
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.2 与字符数组之间的转换</strong></p>
<ul>
<li>String –&gt; char[]:调用String的toCharArray()</li>
<li>char[] –&gt; String:调用String的构造器</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//题目： a21cb3</span>

    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.3 与字节数组之间的转换</strong></p>
<ul>
<li><p>编码：String –&gt; byte[]:调用String的getBytes()</p>
</li>
<li><p>解码：byte[] –&gt; String:调用String的构造器</p>
</li>
<li></li>
<li><p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)</p>
</li>
<li><p>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂</p>
</li>
</ul>
<p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"abc123中国"</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行编码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用gbk字符集进行编码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行解码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现乱码。原因：编码集和解码集不一致！</span>


    String str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没出现乱码。原因：编码集和解码集一致！</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.4 与StringBuffer、StringBuilder之间的转换</strong></p>
<ul>
<li>String –&gt;StringBuffer、StringBuilder:<ul>
<li>调用StringBuffer构造器、</li>
<li>调用StringBuilder构造器</li>
</ul>
</li>
<li>StringBuffer、StringBuilder –&gt;String:<ul>
<li> ①调用String构造器；</li>
<li> ②StringBuffer、StringBuilder的toString()</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    7. JVM中字符串常量池存放位置说明：</p>
</blockquote>
<p>jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在<strong>方法区</strong>（永久区）</p>
<p>jdk 1.7:字符串常量池存储在<strong>堆空间</strong></p>
<p>jdk 1.8:字符串常量池存储在<strong>方法区（元空间）</strong></p>
<blockquote>
<p>​    8. 常见算法题目的考查：</p>
</blockquote>
<p>1）模拟一个trim方法，去除字符串两端的空格。</p>
<p>2）将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p>
<p>3）获取一个字符串在另一个字符串中出现的次数。<br>      比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p>
<p>4）获取两个字符串中最大相同子串。比如：<br>   str1 = “abcwerthelloyuiodef“;str2 = “cvhellobnm”</p>
<p>5）对字符串中字符进行自然顺序排序。</p>
<h4 id="2-StringBuffer、StringBuilder"><a href="#2-StringBuffer、StringBuilder" class="headerlink" title="2) StringBuffer、StringBuilder"></a>2) StringBuffer、StringBuilder</h4><blockquote>
<p>​    1.String、StringBuffer、StringBuilder三者的对比</p>
</blockquote>
<p>String:不可变的字符序列；底层使用char[]存储</p>
<p>StringBuffer:可变的字符序列；<strong>线程安全</strong>的，效率低；底层使用char[]存储</p>
<p>StringBuilder:可变的字符序列；jdk5.0新增的，<strong>线程不安全</strong>的，效率高；底层使用char[]存储</p>
<blockquote>
<p>​    2.StringBuffer与StringBuilder的内存解析</p>
</blockquote>
<p><strong>以StringBuffer为例：</strong></p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[0];</span>
String str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[]{'a','b','c'};</span>

StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[16];底层创建了一个长度是16的数组。</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value[0] = 'a';</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value[1] = 'b';</span>

StringBuffer sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char["abc".length() + 16];</span>

<span class="token comment" spellcheck="true">//问题1. System.out.println(sb2.length());//3</span>
<span class="token comment" spellcheck="true">//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span>
    默认情况下，扩容为原来容量的<span class="token number">2</span>倍 <span class="token operator">+</span> <span class="token number">2</span>，同时将原数组中的元素复制到新的数组中。
        
</code></pre>
<p> <strong>指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</strong></p>
<blockquote>
<p>​    3.对比String、StringBuffer、StringBuilder三者的执行效率</p>
</blockquote>
<p>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p>
<blockquote>
<p>​    4.StringBuffer、StringBuilder中的常用方法</p>
</blockquote>
<ul>
<li>增：append(xxx)</li>
<li>删：delete(int start,int end)</li>
<li>改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</li>
<li>查：charAt(int n )</li>
<li>插：insert(int offset, xxx)</li>
<li>长度：length();</li>
<li>*遍历：for() + charAt() / toString()</li>
</ul>
<h4 id="3-JDK8之前日期时间API"><a href="#3-JDK8之前日期时间API" class="headerlink" title="3) JDK8之前日期时间API"></a>3) JDK8之前日期时间API</h4><blockquote>
<p>​    1.获取系统当前时间：System类中的currentTimeMillis()</p>
</blockquote>
<p>long time = System.currentTimeMillis();</p>
<p>//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</p>
<blockquote>
<p>​    2. java.util.Date类与java.sql.Date类</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//构造器一：Date()：创建一个对应当前时间的Date对象</span>
        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sat Feb 16 16:35:31 GMT+08:00 2019</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1550306204104</span>

        <span class="token comment" spellcheck="true">//构造器二：创建指定毫秒数的Date对象</span>
        Date date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>155030620410L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建java.sql.Date对象</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>35235325345L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1971-02-13</span>

<span class="token comment" spellcheck="true">//如何将java.util.Date对象转换为java.sql.Date对象</span>
    <span class="token comment" spellcheck="true">//情况一：</span>
        Date date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>2343243242323L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date5 <span class="token operator">=</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date<span class="token punctuation">)</span> date4<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//情况二：</span>
        Date date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3. java.text.SimpleDataFormat类</p>
</blockquote>
<p><strong>SimpleDateFormat对日期Date类的格式化和解析</strong></p>
<p>格式化：日期 —&gt;字符串</p>
<p>解析：    字符串 —&gt; 日期 (格式化的逆过程)</p>
<pre class=" language-java"><code class="language-java">SimpleDateFormat sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true">//格式化</span>
        String format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18 11:48:27</span>

<span class="token operator">/</span>解析<span class="token operator">:</span>要求字符串必须是符合SimpleDateFormat识别的格式<span class="token punctuation">(</span>通过构造器参数体现<span class="token punctuation">)</span><span class="token punctuation">,</span>
Date date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-18 11:48:27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    4.Calendar类：日历类、抽象类</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化 调用其静态方法getInstance()</span>
 Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//2.常用方法</span>
        <span class="token comment" spellcheck="true">//get()</span>
        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//set()</span>
        <span class="token comment" spellcheck="true">//calendar可变性</span>
         calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//add()</span>
        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//getTime():日历类---> Date</span>
        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//setTime():Date ---> 日历类</span>
        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-JDK8中新日期时间API"><a href="#4-JDK8中新日期时间API" class="headerlink" title="4) JDK8中新日期时间API"></a>4) JDK8中新日期时间API</h4><blockquote>
<p>​    1.日期时间API的迭代：</p>
</blockquote>
<p>第一代：jdk 1.0 Date类<br>第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br>第三代：jdk 1.8 提出了新的一套API</p>
<blockquote>
<pre><code>     2.前两代存在的问题举例：
</code></pre>
</blockquote>
<ul>
<li>可变性：像日期和时间这样的类应该是不可变的。</li>
<li>偏移性：Date中的年份是从1900开始的，而月份都从0开始。</li>
<li>格式化：格式化只对Date用，Calendar则不行。</li>
<li>此外，它们也不是线程安全的；不能处理闰秒等。</li>
</ul>
<blockquote>
<p>​    3.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime</p>
</blockquote>
<p><strong>3.1 说明：</strong></p>
<p>① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p>
<p>② LocalDateTime相较于LocalDate、LocalTime，使用频率要高</p>
<p>③ 类似于Calendar</p>
<p><strong>3.2 常用方法：</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023215951752.png" alt="image-20211023215951752"></p>
<blockquote>
<p>​    4..时间点：Instant</p>
</blockquote>
<p><strong>4.1 说明：</strong><br>① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br>② 类似于 java.util.Date类</p>
<p><strong>4.2 常用方法：</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023220027154.png" alt="image-20211023220027154"></p>
<blockquote>
<p>​    5.日期时间格式化类：DateTimeFormatter</p>
</blockquote>
<p><strong>5.1 说明：</strong><br>① 格式化或解析日期、时间<br>② 类似于SimpleDateFormat</p>
<p><strong>5.2 常用方法：</strong><br>① 实例化方式：<br>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<p>② 常用方法：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023220142008.png" alt="image-20211023220142008"></p>
<h4 id="5）Java比较器"><a href="#5）Java比较器" class="headerlink" title="5）Java比较器"></a>5）Java比较器</h4><blockquote>
<p>​    1.Java比较器的使用背景：</p>
</blockquote>
<p>Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>如何实现？使用两个接口中的任何一个：<strong>Comparable 或 Comparator</strong></p>
<blockquote>
<p>​    2.自然排序：使用Comparable接口</p>
</blockquote>
<p><strong>2.1 说明</strong></p>
<ul>
<li><p>像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</p>
</li>
<li><p>2像String、包装类重写compareTo()方法以后，进行了从小到大的排列</p>
</li>
<li><p>重写compareTo(obj)的规则：</p>
<p>​    如果当前对象this大于形参对象obj，则返回正整数，<br>​    如果当前对象this小于形参对象obj，则返回负整数，<br>​    如果当前对象this等于形参对象obj，则返回零。</p>
</li>
<li><p>对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</p>
</li>
</ul>
<p><strong>2.2 自定义类代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            Goods goods <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//方式一：</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>
                rerturn <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//return 0;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeEcxeption</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3.定制排序：使用Comparator接口</p>
</blockquote>
<p><strong>3.1 说明</strong></p>
<p>1.背景：<br>当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序</p>
<p>2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：</p>
<p>如果方法返回正整数，则表示o1大于o2；<br>如果返回0，表示相等；<br>返回负整数，表示o1小于o2。</p>
<p><strong>3.2 代码举例：</strong></p>
<pre class=" language-java"><code class="language-java">Compartor com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compartor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 isntanceof Goods <span class="token operator">&amp;&amp;</span> o2 instanceif Goods<span class="token punctuation">)</span><span class="token punctuation">{</span>
            Goods g1 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
            Goods g2 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RunTimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 两种排序方式对比</p>
</blockquote>
<ul>
<li><p>   Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</p>
</li>
<li><p>   Comparator接口属于临时性的比较。</p>
</li>
</ul>
<h4 id="6-其他类"><a href="#6-其他类" class="headerlink" title="6) 其他类"></a>6) 其他类</h4><blockquote>
<p>​    1.System类</p>
</blockquote>
<ul>
<li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p>
</li>
<li><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</p>
</li>
<li><p>方法：</p>
<p>​    native long currentTimeMillis()<br>​    void exit(int status)<br>​    void gc()<br>​    String getProperty(String key)</p>
</li>
</ul>
<blockquote>
<p>​    2.Math类</p>
</blockquote>
<p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p>
<blockquote>
<p>​    3.BigInteger类、BigDecimal类</p>
</blockquote>
<p><strong>说明：</strong></p>
<p>① java.math包的BigInteger可以表示不可变的任意精度的整数。</p>
<p>② 要求数字精度比较高，用到java.math.BigDecimal类</p>
<p><strong>代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    BigInteger bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"12433241123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    BigDeciaml bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDeciaml</span><span class="token punctuation">(</span><span class="token string">"12345.351"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    BigDeciaml bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDeciaml</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span>BigDeciaml<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span>BigDeciaml<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="10-枚举类和注解"><a href="#10-枚举类和注解" class="headerlink" title="10.枚举类和注解"></a>10.枚举类和注解</h2><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1) 枚举类的使用"></a>1) 枚举类的使用</h4><blockquote>
<p>​    1. 枚举类的说明：</p>
</blockquote>
<ul>
<li>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li>
<li>2.当需要定义一组常量时，强烈建议使用枚举类</li>
<li>3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li>
</ul>
<blockquote>
<p>​    2. 如何自定义枚举类？</p>
</blockquote>
<p><strong>步骤：自定义枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.声明Season对象的属性:private final修饰</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>
    
     <span class="token comment" spellcheck="true">//2.私化类的构造器,并给对象属性赋值</span>
     <span class="token keyword">private</span> <span class="token function">Season</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span>String seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//3.提供当前枚举类的多个对象：public static final的</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//4.其他诉求1：获取枚举类对象的属性</span>
     <span class="token keyword">public</span> String <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3. jdk 5.0 新增使用enum定义枚举类。</p>
</blockquote>
<p><strong>步骤：//使用enum关键字枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//2.声明Season对象的属性:private final修饰</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>
    
     <span class="token comment" spellcheck="true">//3.私化类的构造器,并给对象属性赋值</span>
     <span class="token keyword">private</span> <span class="token function">Season1</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span>String seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
     <span class="token comment" spellcheck="true">//4.其他诉求1：获取枚举类对象的属性</span>
        <span class="token keyword">public</span> String <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）</p>
</blockquote>
<pre class=" language-java"><code class="language-java">Season summer <span class="token operator">=</span> Season<span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//toString():返回枚举类对象的名称</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//values():返回所的枚举类对象构成的数组</span>
Season1<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> Season1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>
Season winter <span class="token operator">=</span> Season<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    5. 使用enum定义枚举类之后，如何让枚举类对象分别实现接口：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>//使用enum关键字枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="2-注解的使用"><a href="#2-注解的使用" class="headerlink" title="2) 注解的使用"></a>2) 注解的使用</h4><blockquote>
<p>​    1. 注解的理解</p>
</blockquote>
<p>① jdk 5.0 新增的功能</p>
<p>② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</p>
<p>③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</p>
<p><strong>框架 = 注解 + 反射机制 + 设计模式</strong></p>
<blockquote>
<p>​    2. 注解的使用示例</p>
</blockquote>
<p>示例一：生成文档相关的注解</p>
<p>示例二：在编译时进行格式检查(JDK内置的个基本注解)</p>
<p>​    @Override: 限定重写父类方法, 该注解只能用于方法</p>
<p>​    @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p>
<p>​    @SuppressWarnings: 抑制编译器警告</p>
<blockquote>
<p>​    3.如何自定义注解：参照@SuppressWarnings定义</p>
</blockquote>
<p>① 注解声明为：@interface</p>
<p>② 内部定义成员，通常使用value表示</p>
<p>③ 可以指定成员的默认值，使用default定义</p>
<p>④ 如果自定义注解没成员，表明是一个标识作用。</p>
<p><strong>说明：</strong></p>
<p>如果注解有成员，在使用注解时，需要指明成员的值。<br>自定义注解必须配上注解的信息处理流程(使用反射)才意义。<br>自定义注解通过都会指明两个元注解：Retention、Target</p>
<p><strong>代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>MyAnnotations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">,</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>

    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 元注解 ：对现有的注解进行解释说明的注解。</p>
</blockquote>
<p><strong>jdk 提供的4种元注解：</strong></p>
<ul>
<li><strong>Retention</strong>：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为\RUNTIME只声明为RUNTIME生命周期的注解，才能通过反射获取。</li>
<li><strong>Target</strong>:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</li>
<li><strong>Documented</strong>:表示所修饰的注解在被javadoc解析时，保留下来。</li>
<li><strong>Inherited</strong>:被它修饰的 Annotation 将具继承性。</li>
</ul>
<p>—&gt;类比：元数据的概念：String name = “Tom”;</p>
<blockquote>
<p>​    5. 如何获取注解信息:通过发射来进行获取、调用。</p>
</blockquote>
<p>前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p>
<blockquote>
<p>​    6.JDK8中注解的新特性：可重复注解、类型注解</p>
</blockquote>
<p><strong>6.1 可重复注解：</strong></p>
<p>① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</p>
<p>② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</p>
<p><strong>6.2 类型注解：</strong></p>
<p>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明。</p>
<p>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p>
</body></html>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq知识点</title>
    <url>/2021/10/26/Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h2 id="1-Rabbitmq知识点"><a href="#1-Rabbitmq知识点" class="headerlink" title="1.Rabbitmq知识点"></a>1.Rabbitmq知识点</h2><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包 裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是 一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收， 存储和转发消息数据。</p>
<span id="more"></span>

<h3 id="1-1-MQ的相关概念"><a href="#1-1-MQ的相关概念" class="headerlink" title="1.1 MQ的相关概念"></a>1.1 MQ的相关概念</h3><h4 id="1-1-1-什么是MQ"><a href="#1-1-1-什么是MQ" class="headerlink" title="1.1.1 什么是MQ?"></a>1.1.1 什么是MQ?</h4><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“<strong>逻辑解耦+物理解耦</strong>”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p>
<h4 id="1-1-2-为什么要用MQ？"><a href="#1-1-2-为什么要用MQ？" class="headerlink" title="1.1.2 为什么要用MQ？"></a>1.1.2 为什么要用MQ？</h4><blockquote>
<p>1.流量消峰</p>
</blockquote>
<p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用<u>消息队列做缓冲</u>，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p>
<blockquote>
<p>2.应用解耦</p>
</blockquote>
<p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合 调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于 消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在 这几分钟的时间里，<u>物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成</u>。当物流 系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026110950724.png" alt="image-20211026110950724"></p>
<blockquote>
<p>3.异步处理</p>
</blockquote>
<p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可 以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题， <u>A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此 消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api</u>。同样 B 服务也不 用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026111104991.png" alt="image-20211026111104991"></p>
<h4 id="1-1-3-MQ的分类"><a href="#1-1-3-MQ的分类" class="headerlink" title="1.1.3 MQ的分类"></a>1.1.3 MQ的分类</h4><blockquote>
<p>1.ActiveMQ</p>
</blockquote>
<ul>
<li><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现</p>
<p>高可用性，消息可靠性较 低的概率丢失数据 </p>
</li>
<li><p>缺点:官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用。</p>
</li>
</ul>
<blockquote>
<p>2.Kafka</p>
</blockquote>
<p>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为大数据而生的消息中间件， 以其<strong>百万级 TPS 的吞吐量</strong>名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥 着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。</p>
<ul>
<li>优点: 性能卓越，单机写入 TPS 约在百万条/秒，最大的优点，就是吞吐量高。时效性 ms 级可用性非 常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采 用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方 Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持： 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</li>
<li>缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消 息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序， 但是一台代理宕机后，就会产生消息乱序，社区更新较慢；</li>
</ul>
<blockquote>
<p>3.RocketMQ</p>
</blockquote>
<p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一 些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场 景。</p>
<ul>
<li>优点:单机吞吐量十万级,可用性非常高，分布式架构,消息可以做到 0 丢失,MQ 功能较为完善，还是分 布式的，扩展性好,支持 10 亿级别的消息堆积，不会因为堆积导致性能下降,源码是 java 我们可以自己阅 读源码，定制自己公司的 MQ</li>
<li>缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码</li>
</ul>
<blockquote>
<p>4.RabbitMQ</p>
</blockquote>
<p>2007 年发布，是一个在 AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p>
<ul>
<li>优点:由于 erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备,健壮、稳定、易 用、跨平台、支持多种语言 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,社区活跃度高；更新频率相当高</li>
<li>缺点：商业版需要收费,学习成本较高</li>
</ul>
<h4 id="1-1-4-MQ-的选择"><a href="#1-1-4-MQ-的选择" class="headerlink" title="1.1.4 MQ 的选择"></a>1.1.4 MQ 的选择</h4><blockquote>
<p>1.Kafka</p>
</blockquote>
<p>Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集 和传输，适合<strong>产生大量数据</strong>的互联网服务的数据收集业务。<strong>大型公司</strong>建议可以选用，如果有日志采集功能， 肯定是首选 kafka 了。</p>
<blockquote>
<p>2.RocketMQ</p>
</blockquote>
<p><strong>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款</strong>，以及业务削 峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选RocketMQ。</p>
<blockquote>
<p>3.RabbitMQ</p>
</blockquote>
<p>结合 erlang 语言本身的并发优势，性能好<strong>时效性微秒级</strong>，社<strong>区活跃度也比较高</strong>，管理界面用起来十分 方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。</p>
<h3 id="1-2-RabbitMQ"><a href="#1-2-RabbitMQ" class="headerlink" title="1.2 RabbitMQ"></a>1.2 RabbitMQ</h3><h4 id="1-2-1-RabbitMQ-的概念"><a href="#1-2-1-RabbitMQ-的概念" class="headerlink" title="1.2.1 RabbitMQ 的概念"></a>1.2.1 RabbitMQ 的概念</h4><p>RabbitMQ 是一个消息中间件：它<strong>接受并转发消息</strong>。你可以把它当做一个快递站点，当你要发送一个包 裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是 一个<strong>快递站</strong>，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收， 存储和转发消息数据。</p>
<h4 id="1-2-2-四大核心概念"><a href="#1-2-2-四大核心概念" class="headerlink" title="1.2.2 四大核心概念"></a>1.2.2 四大核心概念</h4><p><code>生产者</code>: 产生数据发送消息的程序是生产者</p>
<p><code>交换机</code>: 交换机是 RabbitMQ 非常重要的一个部件，<u>一方面它接收来自生产者的消息，另一方面它将消息 推送到队列中</u>。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推 送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p>
<p><code>队列</code>: 队列是 RabbitMQ 内部使用的一种<u>数据结构</u>，尽管消息流经 RabbitMQ 和应用程序，但它们只能存 储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的<u>消息缓冲区</u>。许多生产者可 以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p>
<p><code>消费者</code>:消费与接收具有相似的含义。消费者大多时候是一个<u>等待接收消息的程序</u>。请注意生产者，消费 者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p>
<h4 id="1-2-3-RabbitMQ-核心部分"><a href="#1-2-3-RabbitMQ-核心部分" class="headerlink" title="1.2.3 RabbitMQ 核心部分"></a>1.2.3 RabbitMQ 核心部分</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026112550047.png" alt="image-20211026112550047"></p>
<h4 id="1-2-4-各个名词介绍"><a href="#1-2-4-各个名词介绍" class="headerlink" title="1.2.4 各个名词介绍"></a>1.2.4 各个名词介绍</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026112621011.png" alt="image-20211026112621011"></p>
<p><code>Broker</code>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</p>
<p><strong>Virtual host</strong>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似 于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出 多个 vhost，每个用户在自己的 vhost 创建 exchange／queue </p>
<p><code>Connection</code>：publisher／consumer 和 broker 之间的 TCP 连接</p>
<p><code>Channel</code>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP  Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程 序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客 户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。<u>Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</u></p>
<p><code>Exchange</code>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发 消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout  (multicast)</p>
<p><code>Queue</code>：消息最终被送到这里等待 consumer 取走</p>
<p><code>Binding</code>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保 存到 exchange 中的查询表中，用于 message 的分发依</p>
<h4 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5 安装"></a>1.2.5 安装</h4><blockquote>
<p>1.官网地址</p>
</blockquote>
<p><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p>
<blockquote>
<p>2.文件上传</p>
</blockquote>
<p>上传到/usr/local/software 目录下(如果没有 software 需要自己创建)</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026113007870.png" alt="image-20211026113007870"></p>
<blockquote>
<p>3.安装文件(分别按照以下顺序安装)</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash">rpm -ivh erlang-21.3-1.el7.x86_64.rpm
yum <span class="token function">install</span> socat -y
rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm
</code></pre>
<blockquote>
<p>4.常用命令(按照以下顺序执行)</p>
</blockquote>
<p>1.添加开机启动 RabbitMQ 服务</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">chkconfig</span> rabbitmq-server on
</code></pre>
<p>2.启动服务</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server start
</code></pre>
<p>此处可能会启动失败，首先要确保端口号15762和5672是打开状态，可以选择直接关闭防火墙或者放行端口。如果是阿里云用户需要先在安全组里放行这两个端口号。</p>
<p>1)查看防火墙状态（running表示正常运行）</p>
<pre class=" language-bash"><code class="language-bash">systemctl status firewalld
</code></pre>
<p>2)放行端口（返回success表示成功）–permanent:永久生效</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#开启15672端口</span>
firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>15672/tcp --permanent
firewall-cmd --reload <span class="token comment" spellcheck="true">#重启防火墙</span>
firewall-cmd --zone<span class="token operator">=</span>public --query-port<span class="token operator">=</span>15672/tcp <span class="token comment" spellcheck="true">#查看状态</span>

<span class="token comment" spellcheck="true">#关闭15672端口</span>
firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span>15672/tcp --permanent
</code></pre>
<p>防火墙开闭：</p>
<pre class=" language-bash"><code class="language-bash">1、启动服务：systemctl start firewalld.service
2、关闭服务：systemctl stop firewalld.service
3、重启服务：systemctl restart firewalld.service
4、显示服务的状态：systemctl status firewalld.service
5、开机自动启动：systemctl <span class="token function">enable</span> firewalld.service
6、禁用开机自动启动：systemctl disable firewalld.service
</code></pre>
<p>3.查看服务状态</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server status
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026114842550.png" alt="image-20211026114842550"></p>
<p>4.停止服务(选择执行)</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server stop
</code></pre>
<p>5.开启 web 管理插件</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-plugins <span class="token function">enable</span> rabbitmq_management
</code></pre>
<p>6.添加一个新的用户</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建账号</span>
rabbitmqctl add_user admin 123
<span class="token comment" spellcheck="true">#设置用户角色</span>
rabbitmqctl set_user_tags admin administrator
<span class="token comment" spellcheck="true">#设置用户权限</span>
rabbitmqctl set_permissions -p <span class="token string">"/"</span> admin <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>
<span class="token comment" spellcheck="true">#查看用户和角色</span>
rabbitmqctl list_users
</code></pre>
<p>7.浏览器登录到47.113.221.239：15672（此处输入自己的ip地址或者阿里云）</p>
<p>输入账号：admin和密码：123</p>
<p>8.重置命令（可选）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#关闭应用的命令为</span>
rabbitmqctl stop_app
<span class="token comment" spellcheck="true">#清除的命令为</span>
rabbitmqctl reset
<span class="token comment" spellcheck="true">#重新启动命令为</span>
rabbitmqctl start_app
</code></pre>
<h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2.Hello World"></a>2.Hello World</h2><p>在本教程的这一部分中，我们将用 Java 编写两个程序。发送单个消息的生产者和接收消息并打印 出来的消费者。我们将介绍 Java API 中的一些细节。</p>
<p> 在下图中，“ P”是我们的生产者，“ C”是我们的消费者。中间的框是一个队列-RabbitMQ 代 表使用者保留的消息缓冲区</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026115448031.png" alt="image-20211026115448031"></p>
<h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h3><p>创建空工程，并新建一个maven项目</p>
<blockquote>
<p>pom依赖</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--指定 jdk 编译版本--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--rabbitmq 依赖客户端--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--操作文件流的一个依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- logback --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0-alpha5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- slf4j --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="2-2-消息生产者"><a href="#2-2-消息生产者" class="headerlink" title="2.2 消息生产者"></a>2.2 消息生产者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//定义消息队列名称</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建一个连接工厂</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//channel实现了自动关闭接口，不需要手动close()</span>
        <span class="token comment" spellcheck="true">//创建连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取信道</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 生成一个队列
         * 参数：
         *  1.队列名称
         *  2.队列里面的消息是否持久化 默认消息存储在内存
         *  3.该队列是否只供一个消费者进行消费 
         *  4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除
         *  5.其他参数
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String message <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         *发送一个消息
         *  1.发送到那个交换机
         *  2.路由的 key 是哪个
         *  3.其他的参数信息
         *  4.发送消息的消息体
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-3-消息消费者"><a href="#2-3-消息消费者" class="headerlink" title="2.3 消息消费者"></a>2.3 消息消费者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//接收消息时的回调</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span>message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//只拿到消息体</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//取消消息时的回调</span>
        CancelCallback cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息消费被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 消费者消费消息
         *  1.消费哪个队列
         *  2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答
         *  3.消费者成功消费的回调
         *  4.消费者取消消费的回调
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-Work-Queues"><a href="#3-Work-Queues" class="headerlink" title="3.Work Queues"></a>3.Work Queues</h2><p>工作队列(又称任务队列)的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。 相反我们安排任务在之后执行。我们把任务封装为消息并将其发送到队列。在后台运行的工作进 程将弹出任务并最终执行作业。当有多个工作线程时，这些工作线程将一起处理这些任务。</p>
<h3 id="3-1-轮训分发消息"><a href="#3-1-轮训分发消息" class="headerlink" title="3.1 轮训分发消息"></a>3.1 轮训分发消息</h3><p>在这个案例中我们会启动两个工作线程，一个消息发送线程，我们来看看他们两个工作线程 是如何工作的。</p>
<h4 id="3-1-1-抽取工具类"><a href="#3-1-1-抽取工具类" class="headerlink" title="3.1.1 抽取工具类"></a>3.1.1 抽取工具类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Channel <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//channel实现了自动关闭接口，不需要手动close()</span>
        <span class="token comment" spellcheck="true">//创建连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取信道并返回</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-2-启动两个工作线程"><a href="#3-1-2-启动两个工作线程" class="headerlink" title="3.1.2 启动两个工作线程"></a>3.1.2 启动两个工作线程</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//接收消息时的回调</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//只拿到消息体</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//取消消息时的回调</span>
        CancelCallback cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerTag<span class="token operator">+</span><span class="token string">"消费者取消消费接口回调逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2 消费者启动等待消费......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-3-启动一个发送线程"><a href="#3-1-3-启动一个发送线程" class="headerlink" title="3.1.3 启动一个发送线程"></a>3.1.3 启动一个发送线程</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送消息完成:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-4-结果展示"><a href="#3-1-4-结果展示" class="headerlink" title="3.1.4 结果展示"></a>3.1.4 结果展示</h4><p>通过程序执行发现生产者总共发送 4 个消息，消费者 1 和消费者 2 分别分得两个消息，并且是按照有序的一个接收一次消息</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026191613836.png" alt="image-20211026191613836"></p>
<h3 id="3-2-消息应答"><a href="#3-2-消息应答" class="headerlink" title="3.2 消息应答"></a>3.2 消息应答</h3><h4 id="3-2-1-概念"><a href="#3-2-1-概念" class="headerlink" title="3.2.1 概念"></a>3.2.1 概念</h4><p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成 了部分突然它挂掉了，会发生什么情况。RabbitMQ 一旦向消费者传递了一条消息，便立即将该消 息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续 发送给该消费这的消息，因为它无法接收到。</p>
<p>为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，消息应答就是:<strong>消费者在接 收到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。</strong></p>
<h4 id="3-2-2-自动应答"><a href="#3-2-2-自动应答" class="headerlink" title="3.2.2 自动应答"></a>3.2.2 自动应答</h4><p>消息发送后立即被认为已经传送成功，这种模式需要在**高吞吐量和数据传输安全性方面做权 衡,**因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失了</p>
<p>另一方面这种模式消费者那边可以传递过载的消息，<strong>没有对传递的消息数量进行限制</strong>， 当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，<strong>所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</strong></p>
<h4 id="3-2-3-消息应答方法"><a href="#3-2-3-消息应答方法" class="headerlink" title="3.2.3 消息应答方法"></a>3.2.3 消息应答方法</h4><ul>
<li><p>Channel.basicAck(用于确认)    </p>
<p>RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了</p>
</li>
<li><p>Channel.basicNack(用于否定确认)</p>
</li>
<li><p>Channel.basicReject(用于否定确认) 与 Channel.basicNack 相比少一个参数 </p>
<p>​    不处理该消息了直接拒绝，可以将其丢弃了</p>
</li>
</ul>
<h4 id="3-2-4-手动应答"><a href="#3-2-4-手动应答" class="headerlink" title="3.2.4 手动应答"></a>3.2.4 手动应答</h4><p><strong>手动应答的好处是可以批量应答并且减少网络拥堵</strong> </p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**
             *   1.消息标记 tag
             *   2.是否批量应答未应答消息
             * true:代表批量应答 ，false代表耽搁应答
             */</span>
         channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-2-5-消息自动重新入队"><a href="#3-2-5-消息自动重新入队" class="headerlink" title="3.2.5 消息自动重新入队"></a>3.2.5 消息自动重新入队</h4><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息 未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者 可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确 保不会丢失任何消息。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026211838134.png" alt="image-20211026211838134"></p>
<h4 id="3-2-6-消息手动应答代码"><a href="#3-2-6-消息手动应答代码" class="headerlink" title="3.2.6 消息手动应答代码"></a>3.2.6 消息手动应答代码</h4><p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改 为手动应答，消费者在上面代码的基础上增加下面画红色部分代码。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026212016355.png" alt="image-20211026212016355"></p>
<h3 id="3-3-RabbitMQ-持久化"><a href="#3-3-RabbitMQ-持久化" class="headerlink" title="3.3 RabbitMQ 持久化"></a>3.3 RabbitMQ 持久化</h3><h4 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1 概念"></a>3.3.1 概念</h4><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消 息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列 和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将<strong>队列和消息都标记</strong>为持久化。</p>
<h4 id="3-3-2-队列和消息持久化"><a href="#3-3-2-队列和消息持久化" class="headerlink" title="3.3.2 队列和消息持久化"></a>3.3.2 队列和消息持久化</h4><blockquote>
<p>队列持久化</p>
</blockquote>
<p>需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新 创建一个持久化的队列，不然就会出现错误</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>TASK_QUEUE_NAME<span class="token punctuation">,</span>durable<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>消息持久化 </p>
</blockquote>
<p>要想让消息实现持久化需要在消息生产者修改代码，<code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>添加这个属性。</p>
<pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>TASK_QUEUE_NAME<span class="token punctuation">,</span> MessageProperties<span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>将消息标记为持久化并不能完全保证不会丢失消息。尽管它告诉 RabbitMQ 将消息保存到磁盘，但是 这里依然存在当消息刚准备存储在磁盘的时候 但是还没有存储完，消息还在缓存的一个间隔点。此时并没 有真正写入磁盘。持久性保证并不强。</p>
<h4 id="3-3-4-不公平分发"><a href="#3-3-4-不公平分发" class="headerlink" title="3.3.4 不公平分发"></a>3.3.4 不公平分发</h4><p>在最开始的时候我们学习到 RabbitMQ 分发消息采用的轮训分发，但是在某种场景下这种策略并不是 很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2 处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间 处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是 RabbitMQ 并不知道这种情况它依然很公平的进行分发。</p>
<p>为了避免这种情况，我们可以在消费者中设置参数 channel.basicQos(1)</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//设置不公平分发</span>
   channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026213553116.png" alt="image-20211026213553116"></p>
<p>意思就是如果这个任务我还没有处理完或者我还没有应答你，你先别分配给我，我目前只能处理一个 任务，然后 rabbitmq 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完 成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加 新的 worker 或者改变其他存储任务的策略。</p>
<h4 id="3-3-5-预取值（指定分配数）"><a href="#3-3-5-预取值（指定分配数）" class="headerlink" title="3.3.5 预取值（指定分配数）"></a>3.3.5 预取值（指定分配数）</h4><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basciQos</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
</code></pre>
<p>预取值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量， RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认</p>
<p>消息应答和 QoS 预取值对用户吞吐量有重大影响。通常，<strong>增加预取将提高向消费者传递消息的速度</strong>。虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理 的消息的数量也会增加，从而增加了消费者的 RAM 消耗(随机存取存储器)应该小心使用具有无限预处理 的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的 内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同 100 到 300 范 围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。预取值为 1 是最保守的。当然这 将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境 中。对于大多数应用来说，稍微高一点的值将是最佳的。</p>
<h2 id="4-发布确认"><a href="#4-发布确认" class="headerlink" title="4. 发布确认"></a>4. 发布确认</h2><h3 id="4-1-发布确认原理（针对消费者应答）"><a href="#4-1-发布确认原理（针对消费者应答）" class="headerlink" title="4.1 发布确认原理（针对消费者应答）"></a>4.1 发布确认原理（针对消费者应答）</h3><p>生产者将信道设置成 confirm 模式，一旦信道进入 confirm 模式，<strong>所有在该信道上面发布的 消息都将会被指派一个唯一的 ID</strong>(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队 列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传 给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。</p>
<p>confirm 模式最大的好处在于他是<strong>异步</strong>的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调 方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消 息，生产者应用程序同样可以在回调方法中处理该 nack 消息。</p>
<h3 id="4-2-发布确认的策略"><a href="#4-2-发布确认的策略" class="headerlink" title="4.2 发布确认的策略"></a>4.2 发布确认的策略</h3><h4 id="4-2-1-开启发布确认的方法"><a href="#4-2-1-开启发布确认的方法" class="headerlink" title="4.2.1 开启发布确认的方法"></a>4.2.1 开启发布确认的方法</h4><p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布 确认，都需要在 channel 上调用该方法</p>
<pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-2-2-单个确认发布"><a href="#4-2-2-单个确认发布" class="headerlink" title="4.2.2 单个确认发布"></a>4.2.2 单个确认发布</h4><p>这是一种简单的确认方式，它是一种<strong>同步确认发布</strong>的方式，也就是发布一个消息之后只有它 被确认发布，后续的消息才能继续发布,waitForConfirmsOrDie(long)这个方法只有在消息被确认 的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。</p>
<p>这种确认方式有一个最大的缺点就是:<strong>发布速度特别的慢</strong>，因为如果没有确认发布的消息就会 阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。当然对于某 些应用程序来说这可能已经足够了。</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//单个确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageIndividually</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//确认消息</span>
            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//if (flag){System.out.println("消息发送成功");}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个单独确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-3-批量确认发布"><a href="#4-2-3-批量确认发布" class="headerlink" title="4.2.3 批量确认发布"></a>4.2.3 批量确认发布</h4><p>上面那种方式非常慢，与单个等待确认消息相比，先发布一批消息然后一起确认可以极大地 提高吞吐量，当然这种方式的缺点就是:<strong>当发生故障导致发布出现问题时，不知道是哪个消息出现问题了</strong>，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种 方案仍然是同步的，也一样阻塞消息的发布。</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//批量确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//批量确认消息大小</span>
        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//未确认的消息个数</span>
        <span class="token keyword">int</span> outstandingMessageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            outstandingMessageCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//确认消息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingMessageCount <span class="token operator">==</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                outstandingMessageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//为了确保还有剩余没有确认消息 再次确认</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingMessageCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个批量确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-4-异步确认发布"><a href="#4-2-4-异步确认发布" class="headerlink" title="4.2.4 异步确认发布"></a>4.2.4 异步确认发布</h4><p>异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都没得说， 他是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功， 下面就让我们来详细讲解异步确认是怎么实现的</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027221240852.png" alt="image-20211027221240852"></p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//异步确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 线程安全有序的一个跳跃表，适用于高并发的情况
         * 1.轻松的将序号与消息进行关联
         * 2.轻松批量删除条目 只要给到序列号
         * 3.支持并发访问
         */</span>
        ConcurrentSkipListMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> outstandingConfirms<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 确认收到消息的一个回调
         * 1.消息序列号
         * 2.true 可以确认小于等于当前序列号的消息
         */</span>
        ConfirmCallback ackCallback <span class="token operator">=</span> <span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//如果批量</span>
                ConcurrentNavigableMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> confirmed <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">.</span><span class="token function">headMap</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//清除该部分未确认消息</span>
                confirmed<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//只清除当前序列号的消息</span>
                outstandingConfirms<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         *  未确认收到消息的一个回调
         */</span>
        ConfirmCallback nackCallback <span class="token operator">=</span> <span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布的消息"</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"未被确认，序列号"</span><span class="token operator">+</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//添加一个异步确认的监听器</span>
        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span>ackCallback<span class="token punctuation">,</span> nackCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/**
             * channel.getNextPublishSeqNo()获取下一个消息的序列号
             * 通过序列号与消息体进行一个关联
             * 全部都是未确认的消息体
             */</span>
            outstandingConfirms<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">getNextPublishSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个异步确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-5-处理异步未确认消息"><a href="#4-2-5-处理异步未确认消息" class="headerlink" title="4.2.5 处理异步未确认消息"></a>4.2.5 处理异步未确认消息</h4><p>最好的解决的解决方案就是把未确认的消息放到一个基于内存的能被发布线程访问的队列， 比如说用 ConcurrentLinkedQueue 这个队列在 confirm callbacks 与发布线程之间进行消息的传递。</p>
<h4 id="4-2-6-三种发布确认速度对比"><a href="#4-2-6-三种发布确认速度对比" class="headerlink" title="4.2.6 三种发布确认速度对比"></a>4.2.6 三种发布确认速度对比</h4><ul>
<li><code>单独发布消息</code> 同步等待确认，简单，但吞吐量非常有限。 </li>
<li><code>批量发布消息</code> 批量同步等待确认，简单，合理的吞吐量，一旦出现问题但很难推断出是那条 消息出现了问题。 </li>
<li><code>异步处理</code>： 最佳性能和资源使用，在出现错误的情况下可以很好地控制，但是实现起来稍微难些</li>
</ul>
<h2 id="5-交换机"><a href="#5-交换机" class="headerlink" title="5.交换机"></a>5.交换机</h2><h3 id="5-1-Exchanges"><a href="#5-1-Exchanges" class="headerlink" title="5.1 Exchanges"></a>5.1 Exchanges</h3><h4 id="5-1-1-Exchanges-概念"><a href="#5-1-1-Exchanges-概念" class="headerlink" title="5.1.1  Exchanges 概念"></a>5.1.1  Exchanges 概念</h4><p>RabbitMQ 消息传递模型的核心思想是: <strong>生产者生产的消息从不会直接发送到队列</strong>。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。</p>
<p>相反，**生产者只能将消息发送到交换机(exchange)**，交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的消息。是应该把这些消 息放到特定队列还是说把他们到许多队列中还是说应该丢弃它们。这就的由交换机的类型来决定。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027221922038.png" alt="image-20211027221922038"></p>
<h4 id="5-1-2-Exchanges-的类型"><a href="#5-1-2-Exchanges-的类型" class="headerlink" title="5.1.2 Exchanges 的类型"></a>5.1.2 Exchanges 的类型</h4><p>直接(direct), 主题(topic) ,标题(headers) , 扇出(fanout)</p>
<h4 id="5-1-3-无名-exchange"><a href="#5-1-3-无名-exchange" class="headerlink" title="5.1.3 无名 exchange"></a>5.1.3 无名 exchange</h4><p>在不显式声明交换机的情况下，我们使用的都是RabbitMQ提供的默认交换机，我们通过空字符串””进行标识。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222250009.png" alt="image-20211027222250009"></p>
<p>第一个参数是交换机的名称。空字符串表示默认或无名称交换机：消息能路由发送到队列中其实 是由 routingKey(bindingkey)绑定 key 指定的，如果它存在的话</p>
<h3 id="5-2-临时队列"><a href="#5-2-临时队列" class="headerlink" title="5.2 临时队列"></a>5.2 临时队列</h3><p>每当我们连接到 Rabbit 时，我们都需要一个全新的空队列，为此我们可以创建一个具有随机名称 的队列，或者能让服务器为我们选择一个随机队列名称那就更好了。其次一旦我们断开了消费者的连接，队列将被自动删除。</p>
<p>创建临时队列方式：</p>
<pre class=" language-java"><code class="language-java">String queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如图所示：</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222511174.png" alt="image-20211027222511174"></p>
<h3 id="5-3-绑定-bindings"><a href="#5-3-绑定-bindings" class="headerlink" title="5.3 绑定(bindings)"></a>5.3 绑定(bindings)</h3><p>什么是 bingding 呢，binding 其实是 exchange 和 queue 之间的桥梁，它告诉我们 exchange 和那个队 列进行了绑定关系。比如说下面这张图告诉我们的就是 X 与 Q1 和 Q2 进行了绑定</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222535727.png" alt="image-20211027222535727"></p>
<h3 id="5-4-Fanout-Exchanges"><a href="#5-4-Fanout-Exchanges" class="headerlink" title="5.4 Fanout Exchanges"></a>5.4 Fanout Exchanges</h3><h4 id="5-4-1-Fanout-e介绍"><a href="#5-4-1-Fanout-e介绍" class="headerlink" title="5.4.1 Fanout e介绍"></a>5.4.1 Fanout e介绍</h4><p>Fanout 这种类型非常简单。正如从名称中猜到的那样，它是将接收到的所有消息广播到它知道的所有队列中。</p>
<h4 id="5-4-2-Fanout-实战"><a href="#5-4-2-Fanout-实战" class="headerlink" title="5.4.2 Fanout 实战"></a>5.4.2 Fanout 实战</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222647186.png" alt="image-20211027222647186"></p>
<p> 消费者1号：ReceiveLogsFanout01 </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsFanout01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>FANOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 生成一个临时的队列，名称是随机的
         * 当消费者断开和该队列的连接，队列即被删除
         */</span>
        String queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将该队列与交换机进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//s2参数是routingKey，为空字符</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsFanout02</p>
<pre class=" language-java"><code class="language-java">代码同上
</code></pre>
<p>生产者：EmitLog 发送消息给两个消费者接收</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 声明一个交换机
         * 1.exchange 的名称
         * 2.exchange 的类型
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>BuiltinExchangeType<span class="token punctuation">.</span>FANOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String message <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5-5-Direct-Exchanges"><a href="#5-5-Direct-Exchanges" class="headerlink" title="5.5 Direct Exchanges"></a>5.5 Direct Exchanges</h3><h4 id="5-5-1-Direct-介绍"><a href="#5-5-1-Direct-介绍" class="headerlink" title="5.5.1 Direct  介绍"></a>5.5.1 Direct  介绍</h4><p>Fanout 这种交换类型并不能给我们带来很大的灵活性-它只能进行无意识的 广播，在这里我们将使用 direct 这种类型来进行替换，这种类型的工作方式是，消息只去到它绑定的 routingKey 队列中去。</p>
<p>例如我们希望将日志消息写入磁盘的程序仅接收严重错误(errros)，而不存储哪些警告(warning)或信息(info)日志 消息避免浪费磁盘空间。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223632955.png" alt="image-20211027223632955"></p>
<p>在上面这张图中，我们可以看到 X 绑定了两个队列，绑定类型是 direct。队列 Q1 绑定键为 orange， 队列 Q2 绑定键有两个:一个绑定键为 black，另一个绑定键为 green。</p>
<p>在这种绑定情况下，生产者发布消息到 exchange 上，绑定键为 orange 的消息会被发布到队列 Q1。绑定键为 black和green 的消息会被发布到队列 Q2，其他消息类型的消息将被丢弃。</p>
<h4 id="5-5-3-多重绑定"><a href="#5-5-3-多重绑定" class="headerlink" title="5.5.3 多重绑定"></a>5.5.3 多重绑定</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223801999.png" alt="image-20211027223801999"></p>
<p>当然如果 exchange 的绑定类型是 direct，但是它绑定的多个队列的 key 如果都相同，在这种情 况下虽然绑定类型是 direct 但是它表现的就和 fanout 有点类似了，就跟广播差不多，如上图所示。</p>
<h4 id="5-5-4-代码实现"><a href="#5-5-4-代码实现" class="headerlink" title="5.5.4 代码实现"></a>5.5.4 代码实现</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223902620.png" alt="image-20211027223902620"></p>
<p>消费者1号：ReceiveLogsDirect01</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsDirect01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个交换机</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个队列</span>
        String queueName <span class="token operator">=</span> <span class="token string">"console"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsDirect02</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsDirect02</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个交换机</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//枚举</span>
        <span class="token comment" spellcheck="true">//声明一个队列</span>
        String queueName <span class="token operator">=</span> <span class="token string">"disk"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>生产者：EmitLogDirect</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLogDirect</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建多个bindingKey</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"普通info信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span><span class="token string">"警告warning信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"严重error信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//遍历发送消息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKryEntry <span class="token operator">:</span> bindingKeyMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String bindingKey <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String message <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>bindingKey<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5-6-Topics-Exchanges"><a href="#5-6-Topics-Exchanges" class="headerlink" title="5.6 Topics Exchanges"></a>5.6 Topics Exchanges</h3><h4 id="5-6-1-之前类型的问题"><a href="#5-6-1-之前类型的问题" class="headerlink" title="5.6.1  之前类型的问题"></a>5.6.1  之前类型的问题</h4><p>尽管使用 direct 交换机改进了我们的系统，但是它仍然存在局限性-比方说我们想接收的日志类型有 <code>info.base</code> 和 <code>info.advantage</code>，某个队列只想 <code>info.base</code> 的消息，那这个时候 direct 就办不到了。这个时候 就只能使用 topic 类型</p>
<h4 id="5-6-2-Topic-的要求"><a href="#5-6-2-Topic-的要求" class="headerlink" title="5.6.2 Topic 的要求"></a>5.6.2 Topic 的要求</h4><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须满足一定的要求，它必须是一个单 词列表，以点号分隔开。这些单词可以是任意单词，比如说：<code>stock.usd.nyse</code>, <code>nyse.vmw</code>,  <code>quick.orange.rabbit</code>.这种类型的。当然这个单词列表最多不能超过 255 个字节。</p>
<p>在这个规则列表中，其中有两个替换符是大家需要注意:</p>
<ul>
<li>***(星号)可以代替一个单词**</li>
<li><strong>#(井号)可以替代零个或多个单词</strong></li>
</ul>
<h4 id="5-6-3-Topic-匹配案例"><a href="#5-6-3-Topic-匹配案例" class="headerlink" title="5.6.3 Topic 匹配案例"></a>5.6.3 Topic 匹配案例</h4><p>下图绑定关系如下</p>
<ul>
<li> Q1–&gt;绑定的是 </li>
<li>​    中间带 orange 带 3 个单词的字符串(<em>.orange.</em>) </li>
<li>Q2–&gt;绑定的是 <ul>
<li>​    最后一个单词是 rabbit 的 3 个单词(<em>.</em>.rabbit) </li>
<li>​    第一个单词是 lazy 的多个单词(lazy.#)</li>
</ul>
</li>
</ul>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027224544772.png" alt="image-20211027224544772"></p>
<table>
<thead>
<tr>
<th>消息</th>
<th>接受者</th>
</tr>
</thead>
<tbody><tr>
<td>quick.orange.rabbit</td>
<td>被队列 Q1Q2 接收到</td>
</tr>
<tr>
<td>lazy.orange.elephant</td>
<td>被队列 Q1Q2 接收到</td>
</tr>
<tr>
<td>quick.orange.fox</td>
<td>被队列 Q1 接收到</td>
</tr>
<tr>
<td>lazy.pink.rabbit</td>
<td>虽然满足Q2两个绑定但只被队列 Q2 接收一次</td>
</tr>
<tr>
<td>quick.brown.fox</td>
<td>不匹配任何绑定不会被任何队列接收到会被丢弃</td>
</tr>
<tr>
<td>quick.orange.male.rabbit</td>
<td>是四个单词不匹配任何绑定会被丢弃</td>
</tr>
<tr>
<td>lazy.orange.male.rabbit</td>
<td>是四个单词但匹配 Q2</td>
</tr>
<tr>
<td>lazy.brown.fox</td>
<td>被队列 Q2 接收到</td>
</tr>
</tbody></table>
<p>当队列绑定关系是下列这种情况时需要引起注意:</p>
<ul>
<li>当一个队列绑定键是#,那么这个队列将接收所有数据，就有点像 fanout 了</li>
<li>如果队列绑定键当中没有#和*出现，那么该队列绑定类型就是 direct 了</li>
</ul>
<h4 id="5-6-4-代码实现"><a href="#5-6-4-代码实现" class="headerlink" title="5.6.4 代码实现"></a>5.6.4 代码实现</h4><p>消费者1号：ReceiveLogsTopic01</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsTopic01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明Q1队列绑定</span>
        String queueName <span class="token operator">=</span> <span class="token string">"Q1"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//绑定类型 </span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"*.orange.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Q1等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受队列"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumer <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsTopic02</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsTopic02</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明Q1队列绑定</span>
        String queueName <span class="token operator">=</span> <span class="token string">"Q2"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"*.*.rabbit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"lazy.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Q2等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收队列:"</span> <span class="token operator">+</span>queueName <span class="token operator">+</span> <span class="token string">"绑定建:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">"消息:"</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumer <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>生产者：EmitLogTopic</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLogTopic</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建多个bindingKey</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * Q1-->绑定的是
         *      中间带 orange 带 3 个单词的字符串(*.orange.*)
         * Q2-->绑定的是
         *      最后一个单词是 rabbit 的 3 个单词(*.*.rabbit)
         *      第一个单词是 lazy 的多个单词(lazy.#)
         */</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.rabbit"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.elephant"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.fox"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.brown.fox"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.pink.rabbit"</span><span class="token punctuation">,</span><span class="token string">"虽然满足两个绑定但只被队列 Q2 接收一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.brown.fox"</span><span class="token punctuation">,</span><span class="token string">"不匹配任何绑定不会被任何队列接收到会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.male.rabbit"</span><span class="token punctuation">,</span><span class="token string">"是四个单词不匹配任何绑定会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.male.rabbit"</span><span class="token punctuation">,</span><span class="token string">"是四个单词但匹配 Q2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//遍历发送消息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKryEntry <span class="token operator">:</span> bindingKeyMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String bindingKey <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String message <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>bindingKey<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="6-死信队列"><a href="#6-死信队列" class="headerlink" title="6.死信队列"></a>6.死信队列</h2><h3 id="6-1-死信的概念"><a href="#6-1-死信的概念" class="headerlink" title="6.1 死信的概念"></a>6.1 死信的概念</h3><p>死信，顾名思义就是无法被消费的消息，字面意思可以这样理 解，一般来说，producer 将消息投递到 broker 或者直接到 queue 里了，consumer 从 queue 取出消息 进行消费，但某些时候由于特定的原因导致 queue 中的某些消息无法被消费，这样的消息如果没有 后续的处理，就变成了死信，有死信自然就有了死信队列。</p>
<p>应用场景:为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息消费发生异常时，将消息投入死信队列中.还有比如说: <strong>用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</strong></p>
<h3 id="6-2-死信的来源"><a href="#6-2-死信的来源" class="headerlink" title="6.2 死信的来源"></a>6.2 死信的来源</h3><ul>
<li>消息 TTL(Time To Live) 过期</li>
<li>队列达到最大长度(队列满了，无法再添加数据到 mq 中）</li>
<li>消息被拒绝(basic.reject 或 basic.nack)并且 requeue=false.</li>
</ul>
<h3 id="6-3-死信代码实现"><a href="#6-3-死信代码实现" class="headerlink" title="6.3 死信代码实现"></a>6.3 死信代码实现</h3><h4 id="6-3-1-代码架构图"><a href="#6-3-1-代码架构图" class="headerlink" title="6.3.1 代码架构图"></a>6.3.1 代码架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027225406132.png" alt="image-20211027225406132"></p>
<h4 id="6-3-2-消息-TTL-过期"><a href="#6-3-2-消息-TTL-过期" class="headerlink" title="6.3.2 消息 TTL 过期"></a>6.3.2 消息 TTL 过期</h4><p>生产者代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"normal_exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置消息的TTL时间(time to live)即消息过期时间 ms</span>
        AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//模拟发送10条信息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>properties<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发送信息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者 C1 代码(启动之后关闭该消费者 模拟其接收不到消息)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer01</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//普通交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"normal_exchange"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//死信交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"dead_exchange"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明普通和死信交换机类型</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明死信队列</span>
        String deadQueue <span class="token operator">=</span> <span class="token string">"dead_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//死信队列绑定死信交换机和routingKey</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//正常队列绑定死信队列信息</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//正常队列设置死信交换机</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//正常队列设置死信routingKey参数</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明正常队列</span>
        String normalQueue <span class="token operator">=</span> <span class="token string">"normal_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span>NORMAL_EXCHANGE<span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常队列等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1接受到消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者 C2 代码(以上步骤完成后 启动 C2 消费者 它消费死信队列里面的消息)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer02</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//死信交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"dead_exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明死信交换机类型</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明死信队列</span>
        String deadQueue <span class="token operator">=</span> <span class="token string">"dead_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//死信队列绑定死信交换机和routingKey</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"死信队列等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2接受到消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>流程：</p>
<p>生产者发送消息给正常交换机，进入正常队列，由于TTL过期，消费者1无法消费于是成为死信，发送给死信交换机，进入死信队列，有消费者2消费。</p>
<h4 id="6-3-3-队列达到最大长度"><a href="#6-3-3-队列达到最大长度" class="headerlink" title="6.3.3 队列达到最大长度"></a>6.3.3 队列达到最大长度</h4><ol>
<li>消息生产者代码去掉 TTL 属性</li>
<li> C1 消费者的参数添加以下代码</li>
</ol>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置正常队列的长度限制为6</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-max-length"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>；
</code></pre>
<h4 id="6-3-4-消息被拒"><a href="#6-3-4-消息被拒" class="headerlink" title="6.3.4 消息被拒"></a>6.3.4 消息被拒</h4><p> C1 消费者的参数添加以下代码</p>
<pre class=" language-java"><code class="language-java">DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">////requeue 设置为 false 代表拒绝重新入队 该队列如果配置了死信交换机将发送到死信队列中</span>
    channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEmvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="7-延迟队列"><a href="#7-延迟队列" class="headerlink" title="7.延迟队列"></a>7.延迟队列</h2><h3 id="7-1-延迟队列概念"><a href="#7-1-延迟队列概念" class="headerlink" title="7.1 延迟队列概念"></a>7.1 延迟队列概念</h3><p>延时队列,队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望 在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p>
<h3 id="7-2-延迟队列使用场景"><a href="#7-2-延迟队列使用场景" class="headerlink" title="7.2 延迟队列使用场景"></a>7.2 延迟队列使用场景</h3><ul>
<li>1.订单在十分钟之内未支付则自动取消 </li>
<li>2.新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。 </li>
<li>3.用户注册成功后，如果三天内没有登陆则进行短信提醒。 </li>
<li>4.用户发起退款，如果三天内没有得到处理则通知相关运营人员。 </li>
<li>5.预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</li>
</ul>
<h3 id="7-3-RabbitMQ-中的-TTL"><a href="#7-3-RabbitMQ-中的-TTL" class="headerlink" title="7.3 RabbitMQ 中的 TTL"></a>7.3 RabbitMQ 中的 TTL</h3><p>TTL 是什么呢？TTL 是 RabbitMQ 中一个消息或者队列的属性，表明一条消息或者该队列中的所有 消息的最大存活时间，单位是毫秒。换句话说，如果一条消息设置了 TTL 属性或者进入了设置 TTL 属性的队列，那么这条消息如果在 TTL 设置的时间内没有被消费，则会成为”死信”。如果同时配置了队列的 TTL 和消息的 TTL，那么较小的那个值将会被使用，有两种方式设置 TTL。</p>
<h4 id="7-3-1-消息设置-TTL"><a href="#7-3-1-消息设置-TTL" class="headerlink" title="7.3.1 消息设置 TTL"></a>7.3.1 消息设置 TTL</h4><p>第一种方式便是针对每条消息设置 TTL</p>
<pre class=" language-java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span>correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
    correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serExpiration</span><span class="token punctuation">(</span>ttlTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="7-3-2-队列设置-TTL"><a href="#7-3-2-队列设置-TTL" class="headerlink" title="7.3.2 队列设置 TTL"></a>7.3.2 队列设置 TTL</h4><p>另一种是在创建队列的时候设置队列的“x-message-ttl”属性</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明队列的ttl</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="7-3-3-两者的区别"><a href="#7-3-3-两者的区别" class="headerlink" title="7.3.3 两者的区别"></a>7.3.3 两者的区别</h4><p>如果设置了队列的 TTL 属性，那么一旦<strong>消息过期，就会被队列丢弃</strong>(如果配置了死信队列被丢到死信队列中)，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为<strong>消息是否过期是在即将投递到消费者之前判定</strong>的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间；另外，还需要注意的一点是，如果不设置 TTL，表示消息永远不会过期，如果将 TTL 设置为 0，则表示除非此时可以 直接投递该消息到消费者，否则该消息将会被丢弃。</p>
<h3 id="7-4-整合springboot"><a href="#7-4-整合springboot" class="headerlink" title="7.4 整合springboot"></a>7.4 整合springboot</h3><h4 id="7-4-1-创建项目"><a href="#7-4-1-创建项目" class="headerlink" title="7.4.1 创建项目"></a>7.4.1 创建项目</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028230928247.png" alt="image-20211028230928247"></p>
<h4 id="7-4-2-导入依赖"><a href="#7-4-2-导入依赖" class="headerlink" title="7.4.2 导入依赖"></a>7.4.2 导入依赖</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--RabbitMQ 依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--swagger--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--RabbitMQ 测试依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="7-4-3-配置文件"><a href="#7-4-3-配置文件" class="headerlink" title="7.4.3 配置文件"></a>7.4.3 配置文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">183.92.434.99</span>
<span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span>
<span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">admin</span>
<span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">123</span>
</code></pre>
<h4 id="7-4-4-添加-Swagger-配置类"><a href="#7-4-4-添加-Swagger-配置类" class="headerlink" title="7.4.4 添加 Swagger 配置类"></a>7.4.4 添加 Swagger 配置类</h4><p>不用做任何修改</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Docket <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"webApi"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> ApiInfo <span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"rabbitmq 接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"本文档描述了 rabbitmq 微服务接口定义"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Jaqen"</span><span class="token punctuation">,</span> <span class="token string">"http://gravoes.github.io"</span><span class="token punctuation">,</span>
                        <span class="token string">"2321076768@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="7-5-队列-TTL"><a href="#7-5-队列-TTL" class="headerlink" title="7.5 队列 TTL"></a>7.5 队列 TTL</h3><h4 id="7-5-1-代码架构图"><a href="#7-5-1-代码架构图" class="headerlink" title="7.5.1 代码架构图"></a>7.5.1 代码架构图</h4><p>创建两个队列 QA 和 QB，两者队列 TTL 分别设置为 10S 和 40S，然后在创建一个交换机 X 和死信交 换机 Y，它们的类型都是 direct，创建一个死信队列 QD，它们的绑定关系如下：</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231129674.png" alt="image-20211028231129674"></p>
<h4 id="7-5-2-配置文件类代码"><a href="#7-5-2-配置文件类代码" class="headerlink" title="7.5.2 配置文件类代码"></a>7.5.2 配置文件类代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TtlQueueConfig</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//正常交换机和队列</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_A <span class="token operator">=</span> <span class="token string">"QA"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_B <span class="token operator">=</span> <span class="token string">"QB"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//public static final String QUEUE_C = "QC";</span>

    <span class="token comment" spellcheck="true">//死信交换机和队列</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_D <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//声明正常交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">normalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">deadExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A ttl为10s 并绑定到对应的死信交换机上</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列绑定的死信交换机</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列的死信路由key</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明队列的TTL</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A绑定正常X交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueABindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span> Queue queueA<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列B ttl为40s 并绑定到对应的死信交换机上</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列绑定的死信交换机</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列的死信路由key</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明队列的TTL</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_B<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A绑定正常X交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span> Queue queueB<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信队列QD</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信队列绑定死信交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueDBindingY</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span> Queue queueD<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadExchange"</span><span class="token punctuation">)</span> DirectExchange yExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>yExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="7-5-3-消息生产者代码"><a href="#7-5-3-消息生产者代码" class="headerlink" title="7.5.3 消息生产者代码"></a>7.5.3 消息生产者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ttl"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMsgController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsg/{message}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{}，发送一条消息给两个队列：{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XA"</span><span class="token punctuation">,</span><span class="token string">"消息来自ttl为10s的队列"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XB"</span><span class="token punctuation">,</span><span class="token string">"消息来自ttl为40s的队列"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-5-4-消息消费者代码"><a href="#7-5-4-消息消费者代码" class="headerlink" title="7.5.4 消息消费者代码"></a>7.5.4 消息消费者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{}，收到死信队列信息：{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>通过浏览器发送请求：<a href="http://localhost:8080/ttl/sendMsg/%E5%98%BB%E5%98%BB%E5%98%BB">http://localhost:8080/ttl/sendMsg/嘻嘻嘻</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231826012.png" alt="image-20211028231826012"></p>
<p>第一条消息在 10S 后变成了死信消息，然后被消费者消费掉，第二条消息在 40S 之后变成了死信消息， 然后被消费掉，这样一个延时队列就打造完成了。</p>
<p>不过，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有 10S 和 40S 两个时间选项，如果需要一个小时后处理，那么就需要增加 TTL 为一个小时的队列，如果是预定会议室然 后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？</p>
<h3 id="7-6-延时队列优化"><a href="#7-6-延时队列优化" class="headerlink" title="7.6 延时队列优化"></a>7.6 延时队列优化</h3><h4 id="7-6-1-代码架构图"><a href="#7-6-1-代码架构图" class="headerlink" title="7.6.1 代码架构图"></a>7.6.1 代码架构图</h4><p>在这里新增了一个队列 QC,绑定关系如下,该队列不设置 TTL 时间</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231916938.png" alt="image-20211028231916938"></p>
<h4 id="7-6-2-配置文件类代码"><a href="#7-6-2-配置文件类代码" class="headerlink" title="7.6.2 配置文件类代码"></a>7.6.2 配置文件类代码</h4><p>在上述配置中额外添加QC队列</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//额外添加一个QC</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Queue <span class="token function">queueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_C<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//绑定交换机</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> Binding <span class="token function">queueCBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span> Queue queueC<span class="token punctuation">,</span>
                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-6-3-消息生产者代码"><a href="#7-6-3-消息生产者代码" class="headerlink" title="7.6.3 消息生产者代码"></a>7.6.3 消息生产者代码</h4><p>在controller中添加</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendExpirationMsg/{message}/{ttlTime}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> String message<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"ttlTime"</span><span class="token punctuation">)</span> String ttlTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span> correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>ttlTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},发送一条时长{}毫秒 TTL 信息给队列 C:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ttlTime<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>发起请求:</p>
<p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E6%B6%88%E6%81%AFone/20000">http://localhost:8080/ttl/sendExpirationMsg/消息one/20000</a></p>
<p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E6%B6%88%E6%81%AFtwo/2000">http://localhost:8080/ttl/sendExpirationMsg/消息two/2000</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028232742500.png" alt="image-20211028232742500"></p>
<p>此时消息队列是先进先出，所以会造成阻塞，因为 RabbitMQ 只会检查第一个消息是否过期，如果过期则丢到死信队列， 如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行。</p>
<h3 id="7-7-Rabbitmq-插件实现延迟队列"><a href="#7-7-Rabbitmq-插件实现延迟队列" class="headerlink" title="7.7 Rabbitmq 插件实现延迟队列"></a>7.7 Rabbitmq 插件实现延迟队列</h3><p>如果不能实现在消息粒度上的 TTL，并使其在设置的 TTL 时间 及时死亡，就无法设计成一个通用的延时队列。</p>
<h4 id="7-7-1-安装延时队列插件"><a href="#7-7-1-安装延时队列插件" class="headerlink" title="7.7.1 安装延时队列插件"></a>7.7.1 安装延时队列插件</h4><ol>
<li><p>在官网<a href="https://www.rabbitmq.com/community-plugins.html%E4%B8%8B%E8%BD%BD">https://www.rabbitmq.com/community-plugins.html下载</a> rabbitmq_delayed_message_exchange 插件.</p>
</li>
<li><p>解压放到当前目录下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins
</code></pre>
</li>
<li><p>执行下面命令让该插件生效</p>
<pre class=" language-bnash"><code class="language-bnash">rabbitmq-plugins enable rabbitmq_delayed_message_exchange
</code></pre>
</li>
<li><p>重启rabbitmq</p>
<pre class=" language-bash"><code class="language-bash">systemctl restart rabbitmq-server
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028233541142.png" alt="image-20211028233541142"></p>
<h4 id="7-7-2-代码架构图"><a href="#7-7-2-代码架构图" class="headerlink" title="7.7.2 代码架构图"></a>7.7.2 代码架构图</h4></li>
</ol>
<p>在这里新增了一个队列 delayed.queue,一个自定义交换机 delayed.exchange，绑定关系如下:</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028233632315.png" alt="image-20211028233632315"></p>
<h4 id="7-7-3-配置文件类代码"><a href="#7-7-3-配置文件类代码" class="headerlink" title="7.7.3 配置文件类代码"></a>7.7.3 配置文件类代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedQueueConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delayed.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delayed.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delayed.routingKey"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//自定义延迟交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> CustomExchange <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//自定义交换机类型</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bindingDelayedQueue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                       <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedExchange"</span><span class="token punctuation">)</span> CustomExchange delayedExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>delayedExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAYED_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-7-4-消息生产者代码"><a href="#7-7-4-消息生产者代码" class="headerlink" title="7.7.4 消息生产者代码"></a>7.7.4 消息生产者代码</h4><p>加入到controller中</p>
<pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendDelayMsg/{message}/{delayTime}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String message<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@PathVariable</span> Integer delayTime<span class="token punctuation">)</span><span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"delayed.exchange"</span><span class="token punctuation">,</span><span class="token string">"delayed.routingKey"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span>correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" 当 前 时 间 ： {}, 发送一条延迟 {} 毫秒的信息给队列 delayed.queue:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>delayTime<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="7-7-5-消息消费者代码"><a href="#7-7-5-消息消费者代码" class="headerlink" title="7.7.5 消息消费者代码"></a>7.7.5 消息消费者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delayed.queue"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DELAYED_QUEUE_NAME<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveDelayedQueue</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间:{},收到延时队列的消息:{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>发起请求：</p>
<p><a href="http://localhost:8080/ttl/sendDelayMsg/%E6%B6%88%E6%81%AFone/20000">http://localhost:8080/ttl/sendDelayMsg/消息one/20000</a></p>
<p><a href="http://localhost:8080/ttl/sendDelayMsg/%E6%B6%88%E6%81%AFtwo/2000">http://localhost:8080/ttl/sendDelayMsg/消息two/2000</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028234149325.png" alt="image-20211028234149325"></p>
<p>第二个消息被先消费掉了，符合预期</p>
<h3 id="7-8-总结"><a href="#7-8-总结" class="headerlink" title="7.8 总结"></a>7.8 总结</h3><p>延时队列在需要延时处理的场景下非常有用，使用 RabbitMQ 来实现延时队列可以很好的利用 RabbitMQ 的特性，如：<strong>消息可靠发送</strong>、<strong>消息可靠投递</strong>、<strong>死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃</strong>。另外，通过 RabbitMQ 集群的特性，可以很好的<strong>解决单点故障</strong>问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</p>
<p>当然，延时队列还有很多其它选择，比如利用 Java 的 DelayQueue，利用 Redis 的 zset，利用 Quartz 或者利用 kafka 的时间轮，这些方式各有特点,看需要适用的场景</p>
<h2 id="8-发布确认高级"><a href="#8-发布确认高级" class="headerlink" title="8. 发布确认高级"></a>8. 发布确认高级</h2><p>在生产环境中由于一些不明原因，导致 rabbitmq 重启，在 RabbitMQ 重启期间生产者消息投递失败， 导致消息丢失，需要手动处理和恢复。于是，我们开始思考，如何才能进行 RabbitMQ 的消息可靠投递呢？ 特别是在这样比较极端的情况，RabbitMQ 集群不可用的时候，无法投递的消息该如何处理呢?</p>
<h3 id="8-1发布确认-针对交换机和队列"><a href="#8-1发布确认-针对交换机和队列" class="headerlink" title="8.1发布确认 (针对交换机和队列)"></a>8.1发布确认 (针对交换机和队列)</h3><h4 id="8-1-1-确认机制方案"><a href="#8-1-1-确认机制方案" class="headerlink" title="8.1.1 确认机制方案"></a>8.1.1 确认机制方案</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029150218088.png" alt="image-20211029150218088"></p>
<h4 id="8-1-2-配置文件"><a href="#8-1-2-配置文件" class="headerlink" title="8.1.2 配置文件"></a>8.1.2 配置文件</h4><p>在application.properties中添加</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">correlated</span>
</code></pre>
<p>启用发布确认模式；</p>
<p><code>correlated</code>：发布消息成功到交换器后会触发回调方法</p>
<h3 id="8-2-交换机和队列-路由-失联"><a href="#8-2-交换机和队列-路由-失联" class="headerlink" title="8.2 交换机和队列(路由)失联"></a>8.2 交换机和队列(路由)失联</h3><h4 id="8-2-1-添加配置类"><a href="#8-2-1-添加配置类" class="headerlink" title="8.2.1 添加配置类"></a>8.2.1 添加配置类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//注册交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">confirmExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//注册队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">confirmQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBindingEx</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>CONFIRM_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-2-消息生产者"><a href="#8-2-2-消息生产者" class="headerlink" title="8.2.2 消息生产者"></a>8.2.2 消息生产者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/confirm"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> MyCallBack myCallBack<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>myCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * true：交换机无法将消息进行路由时，会将该消息返回给生产者
         * false：如果发现消息无法进行路由，则直接丢弃
         */</span>
        <span class="token comment" spellcheck="true">//rabbitTemplate.setMandatory(true);//也可以在properties</span>
        <span class="token comment" spellcheck="true">//设置回退消息交给谁处理</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span>myCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsg/{message}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//指定消息id为1</span>
        CorrelationData correlationData1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String routingKey1 <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">,</span>routingKey1<span class="token punctuation">,</span>message<span class="token operator">+</span>routingKey1<span class="token punctuation">,</span>correlationData1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//指定消息id为2</span>
        CorrelationData correlationData2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String routingKey2 <span class="token operator">=</span> <span class="token string">"key2"</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">,</span>routingKey2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>message<span class="token operator">+</span>routingKey2<span class="token punctuation">,</span>correlationData2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息内容：{}"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-3-回调接口"><a href="#8-2-3-回调接口" class="headerlink" title="8.2.3 回调接口"></a>8.2.3 回调接口</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallBack</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span>RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 当交换机宕机的一个回调
     * @param correlationData 消息相关数据
     * @param ack   是否应答
     * @param cause 失败原因
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//判断correlationData是否为空</span>
        String id <span class="token operator">=</span> <span class="token punctuation">(</span>correlationData <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">?</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//确认收到</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"交换机已经收到id为：{}的消息"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"交换机未收到id为：{}的消息，原因是：{}"</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//当消息无法路由的时候的回调方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>ReturnedMessage returned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息:{}被服务器退回，退回原因:{}, 交换机是:{}, 路由 key:{}"</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>returned<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-4-消息消费者"><a href="#8-2-4-消息消费者" class="headerlink" title="8.2.4 消息消费者"></a>8.2.4 消息消费者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConsumer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
 <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">{</span>
 String msg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受到队列 confirm.queue 消息:{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-5-交换机宕机"><a href="#8-2-5-交换机宕机" class="headerlink" title="8.2.5 交换机宕机"></a>8.2.5 交换机宕机</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029152256140.png" alt="image-20211029152256140"></p>
<p>我们故意设置一个错误的交换机名称，模拟交换机宕机</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029152408787.png" alt="image-20211029152408787"></p>
<p>可见，id为1的信息已经收到，但id为2的却收不到，正是因为找不到交换机</p>
<h4 id="8-2-6-路由宕机"><a href="#8-2-6-路由宕机" class="headerlink" title="8.2.6 路由宕机"></a>8.2.6 路由宕机</h4><blockquote>
<p>​    Mandatory 参数</p>
</blockquote>
<p>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的。那么如何让无法被路由的消息帮我想办法处理一下？最起码通知我一声，我好自己处理啊。通过设置 mandatory 参数可以在当消息传递过程中不可达目的地时将消息返回给生产者。</p>
<p>我们故意设置id为2的发送信息是错误的<code>routinKey</code>来模拟无法路由</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029153201540.png" alt="image-20211029153201540"></p>
<p>我们可以看到交换机正常接受，但key2出现了错误,我们得到了回退消息。</p>
<h3 id="8-3-备份交换机"><a href="#8-3-备份交换机" class="headerlink" title="8.3 备份交换机"></a>8.3 备份交换机</h3><p>有了 mandatory 参数和回退消息，我们获得了对无法投递消息的感知能力，有机会在生产者的消息无法被投递时发现并处理。</p>
<p>在 RabbitMQ 中，有一种备份交换机的机制存在，备份交换机可以理解为 RabbitMQ 中交换机的“备胎”，当我们为某一个交换机声明一个对应的备份交换机时， 就是为它创建一个备胎，当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由 备份交换机来进行转发和处理，通常备份交换机的类型为 Fanout ，这样就能把所有消息都投递到与其绑 定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都 进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p>
<h4 id="8-3-1-代码架构图"><a href="#8-3-1-代码架构图" class="headerlink" title="8.3.1 代码架构图"></a>8.3.1 代码架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029153444902.png" alt="image-20211029153444902"></p>
<h4 id="8-3-2-修改配置类"><a href="#8-3-2-修改配置类" class="headerlink" title="8.3.2 修改配置类"></a>8.3.2 修改配置类</h4><p>添加一个备份交换机和备份队列还有一个警告队列，并修改原先交换机与备份交换机的绑定关系</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BACKUP_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"backup.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BACKUP_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"backup.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String WARNING_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"warning.queue"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//注册交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">confirmExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//声明主交换机和备份交换机的绑定关系</span>
        ExchangeBuilder exchangeBuilder <span class="token operator">=</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"alternate-exchange"</span><span class="token punctuation">,</span>BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>DirectExchange<span class="token punctuation">)</span>exchangeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//注册队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">confirmQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBindingEx</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>CONFIRM_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加备份交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> FanoutExchange <span class="token function">backupExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加备份队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">backupQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BACKUP_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//备份交换机绑定备份附列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">backupQueueBindingExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加警告队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">warningQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>WARNING_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明报警队列绑定关系</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">warningQueueBindingExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-3-3-报警消费者"><a href="#8-3-3-报警消费者" class="headerlink" title="8.3.3 报警消费者"></a>8.3.3 报警消费者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarningConsumer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String WARNING_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"warning.queue"</span><span class="token punctuation">;</span>
 <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> WARNING_QUEUE_NAME<span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveWarningMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"报警发现不可路由消息：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-3-4-测试注意事项"><a href="#8-3-4-测试注意事项" class="headerlink" title="8.3.4 测试注意事项"></a>8.3.4 测试注意事项</h4><p>重新启动项目的时候需要把原来的 <code>confirm.exchange</code> 删除因为我们修改了其绑定属性，不然会报错</p>
<h4 id="8-3-5-结果分析"><a href="#8-3-5-结果分析" class="headerlink" title="8.3.5 结果分析"></a>8.3.5 结果分析</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029162005499.png" alt="image-20211029162005499"></p>
<p>mandatory 参数与备份交换机可以一起使用的时候，如果两者同时开启，消息究竟何去何从？谁优先级高，经过上面结果显示答案是<strong>备份交换机优先级</strong>高。</p>
<h2 id="9-RabbitMQ-其他知识点"><a href="#9-RabbitMQ-其他知识点" class="headerlink" title="9.RabbitMQ 其他知识点"></a>9.RabbitMQ 其他知识点</h2><h3 id="9-1-幂等性"><a href="#9-1-幂等性" class="headerlink" title="9.1 幂等性"></a>9.1 幂等性</h3><h4 id="9-1-1-概念"><a href="#9-1-1-概念" class="headerlink" title="9.1.1 概念"></a>9.1.1 概念</h4><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。 举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常， 此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱 了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误 立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等</p>
<h4 id="9-1-2-消息重复消费"><a href="#9-1-2-消息重复消费" class="headerlink" title="9.1.2 消息重复消费"></a>9.1.2 消息重复消费</h4><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给 MQ 返回 ack 时网络中断， 故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但 实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p>
<h4 id="9-1-3-解决思路"><a href="#9-1-3-解决思路" class="headerlink" title="9.1.3 解决思路"></a>9.1.3 解决思路</h4><p>MQ 消费者的幂等性的解决一般使用全局 ID 或者写个唯一标识比如时间戳 或者 UUID 或者订单消费 者消费 MQ 中的消息也可利用 MQ 的该 id 来判断，或者可按自己的规则生成一个全局唯一 id，每次消费消 息时用该 id 先判断该消息是否已消费过。</p>
<h4 id="9-1-4-消费端的幂等性保障"><a href="#9-1-4-消费端的幂等性保障" class="headerlink" title="9.1.4  消费端的幂等性保障"></a>9.1.4  消费端的幂等性保障</h4><p>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现幂等性， 这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息。业界主流的幂等性有两种操作:a. 唯一 ID+指纹码机制,利用数据库主键去重, b.利用 <code>redis</code> 的原子性去实现。</p>
<h4 id="9-1-5-唯一-ID-指纹码机制"><a href="#9-1-5-唯一-ID-指纹码机制" class="headerlink" title="9.1.5  唯一 ID+指纹码机制"></a>9.1.5  唯一 ID+指纹码机制</h4><p>指纹码:我们的一些规则或者时间戳加别的服务给到的唯一信息码,它并不一定是我们系统生成的，基 本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个 id 是否存 在数据库中,优势就是实现简单就一个拼接，然后查询判断是否重复；劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能，但也不是我们最推荐的方式。</p>
<h4 id="9-1-6-Redis-原子性"><a href="#9-1-6-Redis-原子性" class="headerlink" title="9.1.6   Redis 原子性"></a>9.1.6   Redis 原子性</h4><p>利用 redis 执行 setnx 命令，天然具有幂等性。从而实现不重复消费</p>
<h3 id="9-2-优先级队列"><a href="#9-2-优先级队列" class="headerlink" title="9.2  优先级队列"></a>9.2  优先级队列</h3><h4 id="9-2-1-使用场景"><a href="#9-2-1-使用场景" class="headerlink" title="9.2.1  使用场景"></a>9.2.1  使用场景</h4><p>有一个订单催付的场景，如果在用户设定的时间内未付款那么就会给用户推送一条短信提醒。对于重要客户，他们的订单必须得到优先处理，而曾经我们的后端系统是使用 redis 来存 放的定时轮询，大家都知道 redis 只能用 List 做一个简简单单的消息队列，并不能实现一个优先级的场景， 所以订单量大了后采用 RabbitMQ 进行改造和优化,如果发现是大客户的订单给一个相对比较高的优先级， 否则就是默认优先级。</p>
<h4 id="9-2-2-如何添加"><a href="#9-2-2-如何添加" class="headerlink" title="9.2.2  如何添加"></a>9.2.2  如何添加</h4><blockquote>
<p>9.2.2. 如何添加  a.控制台页面添加</p>
</blockquote>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029203227744.png" alt="image-20211029203227744"></p>
<blockquote>
<p>b.队列中代码添加优先级</p>
</blockquote>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-max-priority"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>c.消息中代码添加优先级</p>
</blockquote>
<pre class=" language-java"><code class="language-java">AMQP<span class="token punctuation">.</span>basicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><font>注意事项</font></p>
<p>要让队列实现优先级需要做的事情有如下事情:队列需要设置为优先级队列，消息需要设置消息的优先 级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息进行排序</p>
<h3 id="9-3-惰性队列"><a href="#9-3-惰性队列" class="headerlink" title="9.3 惰性队列"></a>9.3 惰性队列</h3><h4 id="9-3-1-使用场景"><a href="#9-3-1-使用场景" class="headerlink" title="9.3.1. 使用场景"></a>9.3.1. 使用场景</h4><p>RabbitMQ 从 3.6.0 版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够<strong>支持更长的队列，即支持更多的消息存储</strong>。当消费者由于各种各样的原因(比如消费者下线、宕机亦或者是由于维护而关闭等)而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。</p>
<p>默认情况下，当生产者将消息发送到 RabbitMQ 的时候，队列中的消息会尽可能的存储在内存之中， 这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留 一份备份。当 RabbitMQ 需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的 时间，也会阻塞队列的操作，进而无法接收新的消息。虽然 RabbitMQ 的开发者们一直在升级相关的算法， 但是效果始终不太理想，尤其是在消息量特别大的时候.</p>
<h4 id="9-3-2-两种模式"><a href="#9-3-2-两种模式" class="headerlink" title="9.3.2  两种模式"></a>9.3.2  两种模式</h4><p>队列具备两种模式：<code>default</code> 和 <code>lazy</code>。默认的为 default 模式，在 3.6.0 之前的版本无需做任何变更。lazy 模式即为惰性队列的模式，可以通过调用 <code>channel.queueDeclare</code> 方法的时候在参数中设置，也可以通过 Policy 的方式设置，如果一个队列同时使用这两种方式设置的话，那么 Policy 的方式具备更高的优先级。 如果要通过声明的方式改变已有队列的模式的话，那么只能先删除队列，然后再重新声明一个新的。</p>
<p>在队列声明的时候可以通过<code>x-queue-mode</code>参数来设置队列的模式，取值为“default”和“lazy”。下面示例中演示了一个惰性队列的声明细节：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-queue-mode"</span><span class="token punctuation">,</span> <span class="token string">"lazy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"myqueue"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="9-3-3-内存开销对比"><a href="#9-3-3-内存开销对比" class="headerlink" title="9.3.3  内存开销对比"></a>9.3.3  内存开销对比</h4><p>在发送 1 百万条消息，每条消息大概占 1KB 的情况下，普通队列占用内存是 1.2GB，而惰性队列仅仅 占用 1.5MB</p>
<h2 id="10-RabbitMQ-集群"><a href="#10-RabbitMQ-集群" class="headerlink" title="10. RabbitMQ 集群"></a>10. RabbitMQ 集群</h2><h3 id="10-1-clustering"><a href="#10-1-clustering" class="headerlink" title="10.1  clustering"></a>10.1  clustering</h3><h4 id="10-1-1-使用集群的原因"><a href="#10-1-1-使用集群的原因" class="headerlink" title="10.1.1  使用集群的原因"></a>10.1.1  使用集群的原因</h4><p>如果 RabbitMQ 服务器遇到内存崩溃、机器掉电或者主板故障等情况，该怎么办？单台 RabbitMQ 服务器可以满足每秒 1000 条消息的吞吐量，那么如果应用需要 RabbitMQ 服务满足每秒 10 万条消息的吞 吐量呢？购买昂贵的服务器来增强单机 RabbitMQ 务的性能显得捉襟见肘，搭建一个 RabbitMQ 集群才是 解决实际问题的关键.</p>
<h4 id="10-1-2-虚拟机搭建"><a href="#10-1-2-虚拟机搭建" class="headerlink" title="10.1.2  虚拟机搭建"></a>10.1.2  虚拟机搭建</h4><ol>
<li><p>修改 3 台机器的主机名称</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/hostname
</code></pre>
</li>
<li><p>配置各个节点的 hosts 文件，让各个节点都能互相识别对方(三个都要写)</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/hosts

10.211.55.74 node1
10.211.55.75 node2
10.211.55.76 node3
</code></pre>
</li>
<li><p>以确保各个节点的 cookie 文件使用的是同一个值</p>
<p>在 node1 上执行远程操作命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie

<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmq/.erlang.cookie
</code></pre>
</li>
<li><p>启动 RabbitMQ 服务,顺带启动 Erlang 虚拟机和 RbbitMQ 应用服务(在三台节点上分别执行以 下命令)</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-server -detached
</code></pre>
</li>
<li><p>在节点 2 以此执行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@node1
rabbitmqctl start_app<span class="token punctuation">(</span>只启动应用服务<span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>在节点 3 执行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@node2
rabbitmqctl start_app
</code></pre>
</li>
<li><p>集群状态</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl cluster_status
</code></pre>
</li>
<li><p>需要重新设置用户</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建账号</span>
rabbitmqctl add_user admin 123

<span class="token comment" spellcheck="true">#设置用户角色</span>
rabbitmqctl set_user_tags admin administrator

<span class="token comment" spellcheck="true">#设置用户权限</span>
rabbitmqctl set_permissions -p <span class="token string">"/"</span> admin <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>
</code></pre>
</li>
<li><p>解除集群节点(node2 和 node3 机器分别执行)(可选)</p>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
rabbitmqctl cluster_status
rabbitmqctl forget_cluster_node rabbit@node2<span class="token punctuation">(</span>node1 机器上执行<span class="token punctuation">)</span>
</code></pre>
<h4 id="10-1-3-Docker搭建"><a href="#10-1-3-Docker搭建" class="headerlink" title="10.1.3 Docker搭建"></a>10.1.3 Docker搭建</h4><ol>
<li><p>拉去镜像</p>
<pre class=" language-bash"><code class="language-bash">docker pull rabbitmq:management
</code></pre>
</li>
<li><p><strong>运行容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker run -d --hostname node1 --name rabbitmq1 -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management

docker run -d --hostname node2 --name rabbitmq2 -p 5673:5672 --link rabbitmq1:rabbit_host1 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management

docker run -d --hostname node3 --name rabbitmq3 -p 5674:5672 --link rabbitmq1:rabbit_host1 --link rabbitmq2:rabbit_host2 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management
</code></pre>
</li>
<li><p><strong>加入节点到集群</strong></p>
<p>设置节点1：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit1 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
<p>设置节点2，加入到集群：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit2 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster --ram rabbit@node1
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
<p>设置节点3，加入到集群：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit3 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster --ram rabbit@bode1
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
</li>
<li><p>设置好之后，使用 <a href="http://ip:15672/">http://ip:15672</a> 进行访问</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029214949105.png" alt="image-20211029214949105"></p>
<h4 id="10-1-4-Springboot搭建"><a href="#10-1-4-Springboot搭建" class="headerlink" title="10.1.4 Springboot搭建"></a>10.1.4 Springboot搭建</h4></li>
<li><p><strong>配置RabbitMQ单机</strong></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
　　rabbitmq<span class="token punctuation">:</span>
　　　　host<span class="token punctuation">:</span> localhost
　　　　port<span class="token punctuation">:</span> <span class="token number">5672</span>
　　　　username<span class="token punctuation">:</span> username
　　　　password<span class="token punctuation">:</span> password
　　　　
<span class="token comment" spellcheck="true">#或者使用addresses</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
　　rabbitmq<span class="token punctuation">:</span>
　　　　addresses<span class="token punctuation">:</span> ip1<span class="token punctuation">:</span>port1
　　　　username<span class="token punctuation">:</span> username
　　　　password<span class="token punctuation">:</span> password
</code></pre>
</li>
<li><p><strong>配置RabbitMQ集群</strong></p>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">spring:
　　rabbitmq:
　　　　addresses: ip1:port1,ip2:port2,ip3:port3
　　　　username: username
　　　　password: password
</code></pre>
<h3 id="10-2-镜像队列"><a href="#10-2-镜像队列" class="headerlink" title="10.2 镜像队列"></a>10.2 镜像队列</h3><h4 id="10-2-1-使用镜像的原因"><a href="#10-2-1-使用镜像的原因" class="headerlink" title="10.2.1 使用镜像的原因"></a>10.2.1 使用镜像的原因</h4><p>如果 RabbitMQ 集群中只有一个 Broker 节点，那么该节点的失效将导致整体服务的临时性不可用，并 且也可能会导致消息的丢失。可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true， 但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在 一个短暂却会产生问题的时间窗。通过 <code>publisherconfirm</code> 机制能够确保客户端知道哪些消息己经存入磁盘， 尽管如此，一般不希望遇到因单点故障导致的服务不可用</p>
<p><strong>引入镜像队列(Mirror Queue)的机制，可以将队列镜像到集群中的其他 Broker 节点之上，如果集群中 的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</strong></p>
<h4 id="10-2-2-搭建步骤"><a href="#10-2-2-搭建步骤" class="headerlink" title="10.2.2 搭建步骤"></a>10.2.2 搭建步骤</h4><ol>
<li><p><strong>策略policy概念</strong></p>
<p>使用RabbitMQ镜像功能，需要基于RabbitMQ策略来实现，策略policy是用来控制和修改群集范围的某个vhost队列行为和Exchange行为。策略policy就是要设置哪些Exchange或者queue的数据需要复制、同步，以及如何复制同步。</p>
<p>为了使队列成为镜像队列，需要创建一个策略来匹配队列，设置策略有两个键“ha-mode和 ha-params（可选）”。ha-params根据ha-mode设置不同的值，下表说明这些key的选项。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029215439378.png" alt="image-20211029215439378"></p>
</li>
<li><p>登录rabbitmq管理页面 ——&gt; Admin ——&gt; Policies ——&gt; Add / update a policy</p>
<p><code>name</code>：随便取，策略名称<br><code>Pattern</code>：^ 匹配符，只有一个^代表匹配所有<br><code>Definition</code>：ha-mode=all 为匹配类型，分为3种模式：all（表示所有的queue）</p>
<p><strong>或者使用命令：</strong></p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl set_policy ha-all <span class="token string">"^"</span> <span class="token string">'{"ha-mode":"all"}'</span>
</code></pre>
</li>
<li><p><strong>查看效果</strong></p>
</li>
</ol>
<p>此策略会同步所在同一VHost中的交换器和队列数据。设置好policy之后，使用 <a href="http://ip:15672/">http://ip:15672</a> 再次进行访问，可以看到队列镜像同步。</p>
<p>停掉 node1 之后发现 node2 成为镜像队列,就算整个集群只剩下一台机器了 依然能消费队列里面的消息 说明队列里面的消息被镜像队列传递到相应机器里面了</p>
<h3 id="10-3-Haproxy-Keepalive-实现高可用负载均衡"><a href="#10-3-Haproxy-Keepalive-实现高可用负载均衡" class="headerlink" title="10.3 Haproxy+Keepalive 实现高可用负载均衡"></a>10.3 Haproxy+Keepalive 实现高可用负载均衡</h3><h4 id="10-3-1-整体架构图"><a href="#10-3-1-整体架构图" class="headerlink" title="10.3.1  整体架构图"></a>10.3.1  整体架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029220301875.png" alt="image-20211029220301875"></p>
<h4 id="10-3-2-Haproxy-实现负载均衡"><a href="#10-3-2-Haproxy-实现负载均衡" class="headerlink" title="10.3.2  Haproxy 实现负载均衡"></a>10.3.2  Haproxy 实现负载均衡</h4><p>HAProxy 提供高可用性、负载均衡及基于 TCP、HTTP 应用的代理，支持虚拟主机，它是免费、快速并 且可靠的一种解决方案，包括Twitter,Reddit,StackOverflow,GitHub 在内的多家知名互联网公司在使用。 HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。 扩展 nginx,lvs,haproxy 之间的区别: <a href="http://www.ha97.com/5646.html">http://www.ha97.com/5646.html</a></p>
<h4 id="10-3-3-Keepalived-实现双机-主备-热备"><a href="#10-3-3-Keepalived-实现双机-主备-热备" class="headerlink" title="10.3.3 Keepalived 实现双机(主备)热备"></a>10.3.3 Keepalived 实现双机(主备)热备</h4><p>试想如果前面配置的 HAProxy 主机突然宕机或者网卡失效，那么虽然 RbbitMQ 集群没有任何故障但是 对于外界的客户端来说所有的连接都会被断开结果将是灾难性的为了确保负载均衡服务的可靠性同样显得十分重要，这里就要引入 Keepalived 它能够通过自身健康检查、资源接管功能做高可用(双机热备)，实现故障转移.</p>
<h3 id="10-4-Federation-Exchange"><a href="#10-4-Federation-Exchange" class="headerlink" title="10.4  Federation Exchange"></a>10.4  Federation Exchange</h3><h4 id="10-4-1-使用它的原因"><a href="#10-4-1-使用它的原因" class="headerlink" title="10.4.1  使用它的原因"></a>10.4.1  使用它的原因</h4><p>(broker 北京)，(broker 深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京 的业务(Client 北京) 需要连接(broker 北京)，向其中的交换器 exchangeA 发送消息，此时的网络延迟很小， (Client 北京)可以迅速将消息发送至 exchangeA 中，就算在开启了 publisherconfirm 机制或者事务机制的 情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client 深圳)需要向 exchangeA 发送消息， 那么(Client 深圳) (broker 北京)之间有很大的网络延迟，(Client 深圳) 将发送消息至 exchangeA 会经历一 定的延迟，尤其是在开启了 publisherconfirm 机制或者事务机制的情况下，(Client 深圳) 会等待很长的延 迟时间来接收(broker 北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的 阻塞。</p>
<p>将业务(Client 深圳)部署到北京的机房可以解决这个问题，但是如果(Client 深圳)调用的另些服务都部 署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？ 这里使用 Federation 插件就可以很好地解决这个问题</p>
<h3 id="10-5-Federation-Queue"><a href="#10-5-Federation-Queue" class="headerlink" title="10.5 Federation Queue"></a>10.5 Federation Queue</h3><h4 id="10-5-1-使用它的原因"><a href="#10-5-1-使用它的原因" class="headerlink" title="10.5.1  使用它的原因"></a>10.5.1  使用它的原因</h4><p>联邦队列可以在多个 Broker 节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以 连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取消息以满足本地消费者消费消息 的需求。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029220826127.png" alt="image-20211029220826127"></p>
<h3 id="10-6-Shovel"><a href="#10-6-Shovel" class="headerlink" title="10.6. Shovel"></a>10.6. Shovel</h3><h4 id="10-6-1-使用它的原因"><a href="#10-6-1-使用它的原因" class="headerlink" title="10.6.1 使用它的原因"></a>10.6.1 使用它的原因</h4><p>与Federation 具备的数据转发功能类似，Shovel 够可靠、持续地从一个 Broker 中的队列(作为源端，即 source)拉取数据并转发至另一个 Broker 中的交换器(作为目的端，即 destination)。作为源端的队列和作 为目的端的交换器可以同时位于同一个 Broker，也可以位于不同的 Broker 上。Shovel 可以翻译为”铲子”， 是一种比较形象的比喻，这个”铲子”可以将消息从一方”铲到”另一方。S<strong>hovel 行为就像优秀的客户端应用 程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理</strong></p>
</body></html>]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础</title>
    <url>/2021/10/26/Mysql%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1></body></html>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx知识点</title>
    <url>/2021/10/30/nginx%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="1-Nginx-简介"><a href="#1-Nginx-简介" class="headerlink" title="1. Nginx 简介"></a>1. Nginx 简介</h2><h3 id="1-1-Nginx-概述"><a href="#1-1-Nginx-概述" class="headerlink" title="1.1 Nginx 概述"></a>1.1 Nginx 概述</h3><p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能 力强,事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</p>
<h3 id="1-2-Nginx-作为-web-服务器"><a href="#1-2-Nginx-作为-web-服务器" class="headerlink" title="1.2 Nginx 作为 web 服务器"></a>1.2 Nginx 作为 web 服务器</h3><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php 等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发， 性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高 达 50,000 个并发连接数。</p>
<h3 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h3><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。 </p>
<p>正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p>
<ul>
<li>简单来说：通过代理服务器来访问服务器的过程 就叫正向代理。</li>
<li>需要在客户端配置代理服务器进行指定网站访问</li>
</ul>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030220214346.png" alt="image-20211030220214346"></p>
<h3 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h3><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返 回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030220410539.png" alt="image-20211030220410539"></p>
<h3 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h3><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服 务器处理完毕后，再将结果返回给客户端。</p>
<p>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成 本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂 度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易 造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p>
<p>我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机 器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能 满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量 是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能 够满足需求的。那么怎么办呢？ 上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题 的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，<strong>我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们 所说的负载均衡。</strong></p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030221457994.png" alt="image-20211030221457994"></p>
<h3 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速 度。降低原来单个服务器的压力。</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030221949437.png" alt="image-20211030221949437"></p>
<h2 id="2-Nginx-安装"><a href="#2-Nginx-安装" class="headerlink" title="2. Nginx 安装"></a>2. Nginx 安装</h2><h3 id="2-1-进入-nginx-官网，下载"><a href="#2-1-进入-nginx-官网，下载" class="headerlink" title="2.1 进入 nginx 官网，下载"></a>2.1 进入 nginx 官网，下载</h3><p>下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<p>选择Linux版本</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030225809892.png" alt="image-20211030225809892"></p>
<h3 id="2-2-开始安装"><a href="#2-2-开始安装" class="headerlink" title="2.2 开始安装"></a>2.2 开始安装</h3><p>将文件传输到 <code>/usr/lcoal/software/</code>下</p>
<p>依次执行以下命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#进入安装路径</span>
<span class="token function">cd</span> /usr/local/software/
<span class="token comment" spellcheck="true">#解压</span>
<span class="token function">tar</span> nginx-1.20.1.tar.gz
<span class="token comment" spellcheck="true">#进入nginx</span>
<span class="token function">cd</span> nginx-1.20.1/
<span class="token comment" spellcheck="true">#安装</span>
./configure
<span class="token comment" spellcheck="true">#执行命令</span>
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre>
<h3 id="2-3-运行nginx"><a href="#2-3-运行nginx" class="headerlink" title="2.3 运行nginx"></a>2.3 运行nginx</h3><ul>
<li><p>安装完nginx后，会在 路径 /usr/local 下自动生成 nginx 文件夹。这是自动生成的。</p>
</li>
<li><p>进入这个目录：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/nginx
</code></pre>
</li>
</ul>
<p>目录内容：</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030230835036.png" alt="image-20211030230835036"></p>
<ul>
<li>进入sbin文件夹</li>
</ul>
<p>nginx命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动nginx</span>
./nginx
<span class="token comment" spellcheck="true">#查询nginx</span>
<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> nginx
<span class="token comment" spellcheck="true">#关闭nginx</span>
./nginx -s stop
<span class="token comment" spellcheck="true">#重启nginx</span>
./nginx -s reload
</code></pre>
<p>查看配置文件：</p>
<pre class=" language-bahs"><code class="language-bahs">cd conf/

#编辑nginx.conf
vim nginx.conf
</code></pre>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030231524985.png" alt="image-20211030231524985"></p>
<p>最后我们可以在浏览器输入：<code>47.113.221.56:80</code>查看是否成功</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030231809594.png" alt="image-20211030231809594"></p>
<h2 id="3-Nginx配置文件"><a href="#3-Nginx配置文件" class="headerlink" title="3.Nginx配置文件"></a>3.Nginx配置文件</h2><h3 id="3-1-nginx-的组成部分"><a href="#3-1-nginx-的组成部分" class="headerlink" title="3.1 nginx 的组成部分"></a>3.1 nginx 的组成部分</h3><p>配置文件中有很多#， 开头的表示注释内容，我们去掉所有以 # 开头的段落，精简之后的 内容如下：</p>
<pre class=" language-conf"><code class="language-conf">worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
</code></pre>
<ul>
<li>nginx 配置文件有三部分组成</li>
</ul>
<h3 id="3-2-第一部分：全局块"><a href="#3-2-第一部分：全局块" class="headerlink" title="3.2 第一部分：全局块"></a>3.2 第一部分：全局块</h3><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。<br>比如上面第一行配置的：</p>
<pre class=" language-conf"><code class="language-conf">worker_processes  1;
</code></pre>
<p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p>
<h3 id="3-3-第二部分：events块"><a href="#3-3-第二部分：events块" class="headerlink" title="3.3 第二部分：events块"></a>3.3 第二部分：events块</h3><pre class=" language-conf"><code class="language-conf">events {
    worker_connections  1024;
}
</code></pre>
<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p>
<ul>
<li>上述例子就表示每个 work process 支持的最大连接数为 1024.</li>
<li>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</li>
</ul>
<h3 id="3-4-第三部分：http-块"><a href="#3-4-第三部分：http-块" class="headerlink" title="3.4 第三部分：http 块"></a>3.4 第三部分：http 块</h3><pre class=" language-conf"><code class="language-conf">http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
</code></pre>
<p> 这是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>
<p>需要注意的是：http 块也可以包括 http 全局块、server 块。</p>
<h4 id="3-4-1-http-全局块"><a href="#3-4-1-http-全局块" class="headerlink" title="3.4.1 http 全局块"></a>3.4.1 http 全局块</h4><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p>
<h4 id="3-4-2-server-块"><a href="#3-4-2-server-块" class="headerlink" title="3.4.2 server 块"></a>3.4.2 server 块</h4><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。</p>
<ul>
<li>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</li>
<li>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</li>
</ul>
<blockquote>
<p>1、全局 server 块</p>
</blockquote>
<p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p>
<blockquote>
<p>2、location 块</p>
</blockquote>
<p>一个 server 块可以配置多个 location 块。</p>
<p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称 （也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p>
</body></html>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM配置文件</title>
    <url>/2021/10/25/index/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SSM框架配置文件"><a href="#SSM框架配置文件" class="headerlink" title="SSM框架配置文件"></a>SSM框架配置文件</h1><blockquote>
<p>​    当我们学习到SSM整合时。令程序员最大的烦恼就是要写一大堆配置文件，纵然记忆力再好，怕也是记不住，相信每个人都会把这些配置文件写下来，创建项目的时候直接CV就完事了。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-applicationContext-xml-spring"><a href="#1-applicationContext-xml-spring" class="headerlink" title="1.applicationContext.xml (spring)"></a>1.applicationContext.xml (spring)</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--spring 配置--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 组件扫描，主要扫描service和dao --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 排除对controller包的扫描--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 加载properties文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置SqlSessionFactory--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 加载mybatis核心文件 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--扫描mapper所在的包 为mapper创建实现类--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--声明式事务控制--></span>
    <span class="token comment" spellcheck="true">&lt;!--平台事务管理器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--配置事务增强--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--事务的aop织入--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.star.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="2-spring-mybatis-xml"><a href="#2-spring-mybatis-xml" class="headerlink" title="2.spring-mybatis.xml"></a>2.spring-mybatis.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 定义别名 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.star.domain.Account" alias="Account"/>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>
    

    <span class="token comment" spellcheck="true">&lt;!-- 加载映射 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>
       <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper resource="com/star/dao/AccountDao.xml"/>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="3-spring-mvc-xml"><a href="#3-spring-mvc-xml" class="headerlink" title="3.spring-mvc.xml"></a>3.spring-mvc.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--开启组件扫描，主要扫描controller--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 开启注解驱动 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 内部资源视图解析器 --></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;bean id="resourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        &lt;property name="prefix" value="/WEB-INF/pages/"/>
        &lt;property name="suffix" value=".jsp"/>
    &lt;/bean>--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置Thymeleaf视图解析器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

                        <span class="token comment" spellcheck="true">&lt;!-- 视图前缀 --></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

                        <span class="token comment" spellcheck="true">&lt;!-- 视图后缀 --></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--视图控制器view-controller--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/toAdd<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student_add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 开启静态资源访问 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="4-web-xml"><a href="#4-web-xml" class="headerlink" title="4.web.xml"></a>4.web.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--配置springMVC的编码过滤器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 处理请求方式的过滤器(PUT,DELETE) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--  加载全局初始化参数,让服务器启动就加载spring配置文件--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置监听器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 配置springMVC文件的配置和路径 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>
                classpath:spring-mvc.xml
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 将前段控制器DispatcherServlet的初始化放到服务器启动时 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="5-StudentMapper-xml"><a href="#5-StudentMapper-xml" class="headerlink" title="5.StudentMapper.xml"></a>5.StudentMapper.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAccount<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        insert into account(name, money) VALUES (#{name},#{money})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from account
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAccountById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from account where id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="6-jdbc-properties"><a href="#6-jdbc-properties" class="headerlink" title="6.jdbc.properties"></a>6.jdbc.properties</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssm?useSSL=false&amp;serverTimezone=UTC</span>
<span class="token attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">jaqen</span>
</code></pre>
<h2 id="7-log4j-properties"><a href="#7-log4j-properties" class="headerlink" title="7.log4j.properties"></a>7.log4j.properties</h2><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Hibernate, Relational Persistence for Idiomatic Java</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span>
<span class="token comment" spellcheck="true"># See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html>.</span>
<span class="token comment" spellcheck="true">#</span>

<span class="token comment" spellcheck="true">### direct log messages to stdout ###</span>
<span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span>
<span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span>

<span class="token comment" spellcheck="true">### direct messages to file hibernate.log ###</span>
<span class="token comment" spellcheck="true">#log4j.appender.file=org.apache.log4j.FileAppender</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.File=hibernate.log</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.layout=org.apache.log4j.PatternLayout</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span>

<span class="token comment" spellcheck="true">### set log levels - for more verbose logging change 'info' to 'debug' ###</span>

<span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">all, stdout</span>
</code></pre>
<h2 id="8-pom-xml"><a href="#8-pom-xml" class="headerlink" title="8.pom.xml"></a>8.pom.xml</h2><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 日志 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!--servlet和jsp--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!--mybatis相关--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

      <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Spring5和Thymeleaf整合包 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- Resources注入 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<p><img src="https://qiniu.sukoshi.xyz/src/images/68686407_p0.jpg"></p>
</body></html>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/24/index/</url>
    <content><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>Typora使用指南</title>
    <url>/2021/10/24/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Typora使用指南"><a href="#Typora使用指南" class="headerlink" title="Typora使用指南"></a>Typora使用指南</h1><p>Markdown是一种轻量级标记语言，创始人是约翰·格鲁伯(John Gruber)。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。</p>
<span id="more"></span>

<h2 id="1-快捷键和语法"><a href="#1-快捷键和语法" class="headerlink" title="1.快捷键和语法"></a>1.快捷键和语法</h2><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键/语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td>Ctrl+B 或者 <code>**加粗**</code> 或者 <code>__加粗__</code></td>
<td align="left"><strong>加粗</strong></td>
</tr>
<tr>
<td>斜体</td>
<td>Ctrl+i 或者 <code>*斜体*</code> 或者 <code>_斜体_</code></td>
<td align="left"><em>斜体</em></td>
</tr>
<tr>
<td>加粗切斜体</td>
<td><code>***加粗且斜体***</code> 或者 <code>___加粗且斜体___</code></td>
<td align="left"><em><strong>加粗切斜体</strong></em></td>
</tr>
<tr>
<td>下划线</td>
<td>Ctrl+U 或者 <code>下划线</code></td>
<td align="left"><u>下划线</u></td>
</tr>
<tr>
<td>删除线</td>
<td>Alt+Shift+5 或者 <code>~~删除线~~</code></td>
<td align="left"><del>删除线</del></td>
</tr>
<tr>
<td>水平分割线</td>
<td>***<code>或者</code>- - -<code>或者</code>_ _ _</td>
<td align="left">—-</td>
</tr>
<tr>
<td>高亮</td>
<td><code>==高亮==</code></td>
<td align="left">==高亮==</td>
</tr>
<tr>
<td>下标</td>
<td><code>~下标~</code></td>
<td align="left">下标<del>2</del></td>
</tr>
<tr>
<td>上标</td>
<td><code>^上标^</code></td>
<td align="left">上标^2^</td>
</tr>
<tr>
<td>注释</td>
<td>[^注释1]</td>
<td align="left">[^注释]</td>
</tr>
<tr>
<td>代码块</td>
<td>Ctrl+Shift+` 或者 ```</td>
<td align="left">```java</td>
</tr>
<tr>
<td>选中一行</td>
<td>Ctrl+L</td>
<td align="left">/</td>
</tr>
<tr>
<td>选中一个单词</td>
<td>Ctrl+D</td>
<td align="left">/</td>
</tr>
<tr>
<td>选中相同格式的文字</td>
<td>Ctrl+E</td>
<td align="left">/</td>
</tr>
<tr>
<td>生成目录</td>
<td>[TOC]</td>
<td align="left">/</td>
</tr>
<tr>
<td>一级标题</td>
<td>Ctrl+1 或者 #+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>二级标题</td>
<td>Ctrl+2 或者 ##+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>三级标题</td>
<td>Ctrl+3 或者 ###+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>四级标题</td>
<td>Ctrl+4 或者 ####+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>五级标题</td>
<td>Ctrl+5 或者 #####+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>六级标题</td>
<td>Ctrl+6 或者 ######+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>返回顶部</td>
<td>Ctrl+Home</td>
<td align="left">/</td>
</tr>
<tr>
<td>创建表格</td>
<td>Ctrl+T</td>
<td align="left">/</td>
</tr>
<tr>
<td>创建超链接</td>
<td>Ctrl+K 或者 <code>[链接名称](链接地址)</code></td>
<td align="left">百度</td>
</tr>
<tr>
<td>搜索并替换</td>
<td>Ctrl+H</td>
<td align="left">/</td>
</tr>
<tr>
<td>插入图片</td>
<td>Ctrl+Shift+I 或者 复制粘贴 或者 直接拖动 或者<code>![图片的替代文字](图片地址)</code></td>
<td align="left">/</td>
</tr>
<tr>
<td>表情</td>
<td><code>:happy:</code> 或者 <code>:smiley:</code> 或者 <code>:cry:</code></td>
<td align="left">:happy::smiley:</td>
</tr>
<tr>
<td>向右缩进</td>
<td>Tab</td>
<td align="left">/</td>
</tr>
<tr>
<td>向左缩进</td>
<td>Shift+Tab</td>
<td align="left">/</td>
</tr>
<tr>
<td>引用</td>
<td>Ctrl+Shift+Q 或者 &gt;+空格</td>
<td align="left">/</td>
</tr>
<tr>
<td>有序列表</td>
<td>Ctrl+Shift+[ 或者 *+空格</td>
<td align="left">/</td>
</tr>
<tr>
<td>无序列表</td>
<td>Ctrl+Shift+] 或者 *+空格</td>
<td align="left">/</td>
</tr>
</tbody></table>
<h2 id="2-Typora主题推荐"><a href="#2-Typora主题推荐" class="headerlink" title="2.Typora主题推荐"></a>2.Typora主题推荐</h2><blockquote>
<p><a href="https://github.com/Theigrams/My-Typora-Themes">My-Typora-Themes</a> 点击链接即可下载</p>
</blockquote>
<blockquote>
<p>样式预览</p>
</blockquote>
<p><img src="/../images/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image-20211026104218400.png" alt="image-20211026104218400"></p>
<h2 id="3-hexo常见错误"><a href="#3-hexo常见错误" class="headerlink" title="3.hexo常见错误"></a>3.hexo常见错误</h2><blockquote>
<p>超出文件限制</p>
</blockquote>
<p>错误:OpenSSL SSL_read: Connection was aborted, errno 10053</p>
<pre class=" language-linux"><code class="language-linux">git config --global http.postBuffer 524288000
</code></pre>
</body></html>]]></content>
      <tags>
        <tag>指南</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud学习笔记</title>
    <url>/2021/10/31/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="1-初识springcloud"><a href="#1-初识springcloud" class="headerlink" title="1.初识springcloud"></a>1.初识springcloud</h2><h3 id="1-1-springcloud介绍"><a href="#1-1-springcloud介绍" class="headerlink" title="1.1 springcloud介绍"></a>1.1 springcloud介绍</h3><p>spring cloud 是一系列框架的集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控</strong>等，都可以用 spring boot 的开发风格做到一键启动和部署。spring cloud 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 spring boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
<h3 id="1-2-springcloud技术组成"><a href="#1-2-springcloud技术组成" class="headerlink" title="1.2 springcloud技术组成"></a>1.2 springcloud技术组成</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211031224906577.png" alt="image-20211031224906577"></p>
<h3 id="springcloud组件更替"><a href="#springcloud组件更替" class="headerlink" title="springcloud组件更替"></a>springcloud组件更替</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211031225232573.png" alt="image-20211031225232573"></p>
<h2 id="2-springcloud环境搭建"><a href="#2-springcloud环境搭建" class="headerlink" title="2.springcloud环境搭建"></a>2.springcloud环境搭建</h2><h3 id="2-1-组件版本"><a href="#2-1-组件版本" class="headerlink" title="2.1 组件版本"></a>2.1 组件版本</h3><table>
<thead>
<tr>
<th>工具</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>springcloud</td>
<td>Hoxton.SR12</td>
</tr>
<tr>
<td>springboot</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>java</td>
<td>jdk1.8</td>
</tr>
<tr>
<td>Maven</td>
<td>3.5以上</td>
</tr>
<tr>
<td>Mysql</td>
<td>5.7以上</td>
</tr>
<tr>
<td>springcloud alibaba</td>
<td>2.1.0.RELEASE</td>
</tr>
</tbody></table>
<h3 id="2-2-搭建父工程"><a href="#2-2-搭建父工程" class="headerlink" title="2.2 搭建父工程"></a>2.2 搭建父工程</h3><ol>
<li>创建一个maven工程,删除掉其他文件，只保留<code>pom.xml</code>作为<parent></parent></li>
<li>字符编码统一设置为UTF-8</li>
<li>父工程创建完成后跳过MVN：test，并clean，install将父工程发布到仓库</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-consumer-order81<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment" spellcheck="true">&lt;!--统一管理jar包版本--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.spring.boot.starter.version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.spring.boot.starter.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.alibaba.version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.alibaba.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-spring-boot-starter.version</span><span class="token punctuation">&gt;</span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-spring-boot-starter.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hutool-all.version</span><span class="token punctuation">&gt;</span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hutool-all.version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment" spellcheck="true">&lt;!--子模块继承后,提供作用:锁定版本+子module不用groupId和version--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment" spellcheck="true">&lt;!--springboot 2.3.12--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment" spellcheck="true">&lt;!--Spring cloud Hoxton.SR12--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment" spellcheck="true">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.cloud.alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.spring.boot.starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis-spring-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<h2 id="3-编码构建"><a href="#3-编码构建" class="headerlink" title="3.编码构建"></a>3.编码构建</h2><h3 id="3-1-cloud-provider-payment8001"><a href="#3-1-cloud-provider-payment8001" class="headerlink" title="3.1 cloud-provider-payment8001"></a>3.1 cloud-provider-payment8001</h3><p><strong>微服务提供者</strong></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101001354865.png" alt="image-20211101001354865"></p>
<h4 id="3-1-1-pom、yml、启动类"><a href="#3-1-1-pom、yml、启动类" class="headerlink" title="3.1.1  pom、yml、启动类"></a>3.1.1  pom、yml、启动类</h4><ul>
<li><p>创建子模块<code>moudle</code>的maven工程</p>
</li>
<li><p>pom文件</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--mysql-connector-java--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--jdbc--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>配置springboot启动类</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li><p>配置application.yml</p>
</li>
<li><pre class=" language-yml"><code class="language-yml">server:
  port: 8001
spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包 org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false
    username: root
    password: jaqen
mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包
</code></pre>
</li>
</ul>
<h4 id="3-1-2-业务类"><a href="#3-1-2-业务类" class="headerlink" title="3.1.2 业务类"></a>3.1.2 业务类</h4><ol>
<li><p>建表SQL</p>
</li>
<li><p>entity</p>
<ul>
<li>主实体:<code>class:Payment</code></li>
<li>Json封装体:<code>class:CommonResult</code></li>
</ul>
</li>
<li><p>dao</p>
<ul>
<li><code>Interface:PaymentDao</code></li>
<li>在resources下创建mapper文件夹,<code>PaymentMapper.xml</code></li>
</ul>
</li>
<li><p>service</p>
<ul>
<li><code>Interface:PaymentService</code></li>
<li>实现类:<code>class:PaymentServiceImpl</code></li>
</ul>
</li>
<li><p>controller</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> PaymentService paymentService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/insert"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****返回结果为：{}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"插入数据库成功"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"插入数据库失败"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">&gt;</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Payment payment <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****查询结果为：{}"</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payment <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"查询成功"</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"无记录，查询id"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
<h4 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3 测试"></a>3.1.3 测试</h4><ul>
<li><p>Get测试</p>
<p><a href="http://localhost:8001/payment/get/31">http://localhost:8001/payment/get/31</a></p>
</li>
<li><p>Post测试</p>
<p>通过postman测试insert请求，或者通过idea自带的httpClient插件测试Post请求</p>
<p><a href="http://localhost:8001/payment/insert?serial=Jaqen">http://localhost:8001/payment/insert?serial=Jaqen</a></p>
</li>
</ul>
<h3 id="3-2-cloud-consumer-order81"><a href="#3-2-cloud-consumer-order81" class="headerlink" title="3.2 cloud-consumer-order81"></a>3.2 cloud-consumer-order81</h3><p><strong>微服务消费者</strong></p>
<h4 id="3-2-1-pom、yml、启动类"><a href="#3-2-1-pom、yml、启动类" class="headerlink" title="3.2.1 pom、yml、启动类"></a>3.2.1 pom、yml、启动类</h4><ul>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-client--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 81
spring:
  application:
    name: cloud-order-service
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
</li>
<li><p>启动类</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain81</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderMain81<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<h4 id="3-2-2-业务类"><a href="#3-2-2-业务类" class="headerlink" title="3.2.2 业务类"></a>3.2.2 业务类</h4><ol>
<li><p>entity</p>
<ul>
<li>主实体:<code>class:Payment</code></li>
<li>Json封装体:<code>class:CommonResult</code></li>
</ul>
</li>
<li><p>config</p>
<ul>
<li>配置类:<code>class:applicationContextConfig</code></li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>什么是<code>Restemplate</code>?</li>
</ul>
<p>RestTemplate提供了多种便捷访问远程Http服务的方法，<br>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集.</p>
<ul>
<li>使用</li>
</ul>
<p>使用restTemplate访问restful接口非常的简单粗暴无脑。<br>(url, requestMap, ResponseBean.class)这三个参数分别代表<br>REST请求地址、请求参数、HTTP响应转换被转换成的对象类型</p>
</li>
<li><p>controller</p>
</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//public static final String PAYMENT_URL = "http://localhost:8001";</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/insert"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//客户端用浏览器是get请求，但是底层实质发送post调用服务端8001</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/insert"</span><span class="token punctuation">,</span> payment<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//http://localhost:81/consumer/payment/get/30</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3 测试"></a>3.2.3 测试</h4><ul>
<li><p>Get测试</p>
<p><a href="http://localhost:81/consumer/payment/get/31">http://localhost:81/consumer/payment/get/31</a></p>
</li>
<li><p>Post测试</p>
<p><a href="http://localhost:801/consumer/payment/insert?serial=Jaqen">http://localhost:801/consumer/payment/insert?serial=Jaqen</a></p>
</li>
</ul>
<h3 id="3-3-代码重构"><a href="#3-3-代码重构" class="headerlink" title="3.3 代码重构"></a>3.3 代码重构</h3><p>在各个模块中有重复使用的部分，可以抽取出来单独成为一个moudle，例如<code>entity</code></p>
<ol>
<li><p>新建<code>cloud-api-commons</code>模块</p>
</li>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>抽取<code>entity</code></p>
</li>
<li><p>maven命令clean &amp; install</p>
</li>
<li><p>其他模块添加自定义的依赖</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
</ol>
<h2 id="4-Eureka服务注册与发现"><a href="#4-Eureka服务注册与发现" class="headerlink" title="4.Eureka服务注册与发现"></a>4.Eureka服务注册与发现</h2><h3 id="4-1-Eureka基础知识"><a href="#4-1-Eureka基础知识" class="headerlink" title="4.1 Eureka基础知识"></a>4.1 Eureka基础知识</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101213000074.png" alt="image-20211101213000074"></p>
<h4 id="4-1-1-什么是服务治理"><a href="#4-1-1-什么是服务治理" class="headerlink" title="4.1.1 什么是服务治理"></a>4.1.1 什么是服务治理</h4><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理</p>
<p> 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>
<h4 id="4-1-2-什么是服务注册"><a href="#4-1-2-什么是服务注册" class="headerlink" title="4.1.2 什么是服务注册"></a>4.1.2 什么是服务注册</h4><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</p>
<p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p>
<h4 id="4-1-3-Eureka两组件"><a href="#4-1-3-Eureka两组件" class="headerlink" title="4.1.3 Eureka两组件"></a>4.1.3 Eureka两组件</h4><p>Eureka包含两个组件：<code>Eureka Server</code>和<code>Eureka Client</code></p>
<ul>
<li><p><strong>Eureka Server提供服务注册服务</strong><br>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p>
</li>
<li><p><strong>EurekaClient通过注册中心进行访问</strong><br>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p>
</li>
</ul>
<h3 id="4-2-单机Eureka构建"><a href="#4-2-单机Eureka构建" class="headerlink" title="4.2 单机Eureka构建"></a>4.2 单机Eureka构建</h3><h4 id="4-2-1-cloud-eureka-server7001"><a href="#4-2-1-cloud-eureka-server7001" class="headerlink" title="4.2.1 cloud-eureka-server7001"></a>4.2.1 cloud-eureka-server7001</h4><p>注册中心</p>
<ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-server--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--boot web actuator--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--一般通用配置--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7001

eureka:
  instance:
    hostname: localhost #eureka服务端的实例名称
  client:
    #false表示不向注册中心注册自己。
    register-with-eureka: false
    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    fetch-registry: false
    service-url:
    #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
</code></pre>
</li>
<li><p>主启动</p>
<p>额外添加<code>@EnableEurekaServer</code></p>
</li>
<li><p>测试</p>
<p><a href="http://localhost:7001/">http://localhost:7001/</a></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101213819483.png" alt="image-20211101213819483"></p>
</li>
</ol>
<h4 id="4-2-2-cloud-provider-payment8001"><a href="#4-2-2-cloud-provider-payment8001" class="headerlink" title="4.2.2 cloud-provider-payment8001"></a>4.2.2 cloud-provider-payment8001</h4><ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-client--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--mysql-connector-java--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment" spellcheck="true">&lt;!--jdbc--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 8001
spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包 org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC
    username: root
    password: jaqen
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版

mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包
</code></pre>
</li>
<li><p>主启动类 <code>@EnableEurekaCient</code></p>
</li>
<li><p>测试</p>
<p>1.启动EurekaServer–&gt;2.<a href="http://localhost7001/">http://localhost7001/</a></p>
</li>
<li><p>自我保护机制</p>
</li>
</ol>
<h4 id="4-2-3-cloud-consumer-order81"><a href="#4-2-3-cloud-consumer-order81" class="headerlink" title="4.2.3 cloud-consumer-order81"></a>4.2.3 cloud-consumer-order81</h4><p><strong>消费者</strong></p>
<ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 80

spring:
    application:
        name: cloud-order-service

eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka
</code></pre>
</li>
<li><p>主启动 <code>@EnableEurekaClient</code></p>
</li>
<li><p>测试</p>
<p>Server7001 -&gt; provider8001 -&gt; <a href="http://localhost:81/consumer/payment/get/31">http://localhost:81/consumer/payment/get/31</a></p>
</li>
</ol>
<h3 id="4-3-集群Eureka构建"><a href="#4-3-集群Eureka构建" class="headerlink" title="4.3 集群Eureka构建"></a>4.3 集群Eureka构建</h3><h4 id="4-3-1-原理"><a href="#4-3-1-原理" class="headerlink" title="4.3.1 原理"></a>4.3.1 原理</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101215114958.png" alt="image-20211101215114958"></p>
<p>问题：微服务RPC远程服务调用最核心的是什么 ?</p>
<p>高可用，试想你的注册中心只有一个only one， 它出故障了那就呵呵(￣▽￣)”了，会导致整个为服务环境不可用.</p>
<p>　　解决办法：搭建Eureka注册中心集群 ，实现负载均衡+故障容错</p>
<h4 id="4-3-2-搭建步骤7001-7002"><a href="#4-3-2-搭建步骤7001-7002" class="headerlink" title="4.3.2 搭建步骤7001/7002"></a>4.3.2 搭建步骤7001/7002</h4><ol>
<li><p>参考cloud-eureka-server7001 新建 cloud-eureka-server7002</p>
</li>
<li><p>修改映射配置，找到C:\Windows\System32\drivers\etc路径下的hosts文件</p>
<p>添加127.0.0.1 eureka7001.com</p>
<p>​          127.0.0.1 eureka7002.com</p>
</li>
<li><p>修改yml (互相引用)</p>
<p>7001</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7001

eureka:
  instance:
    hostname: eureka7001.com #eureka服务端的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://eureka7002.com:7002/eureka/
</code></pre>
<p>7002</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7002
  
eureka:
  instance:
    hostname: eureka7002.com #eureka服务端的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/
</code></pre>
</li>
<li><p>主启动<code>@EnableEurekaServer</code></p>
</li>
</ol>
<h4 id="4-3-3-将8001注册"><a href="#4-3-3-将8001注册" class="headerlink" title="4.3.3 将8001注册"></a>4.3.3 将8001注册</h4><p>修改pom</p>
<pre class=" language-yml"><code class="language-yml">#替换掉原来的单机版
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
<h4 id="4-3-4-将80注册"><a href="#4-3-4-将80注册" class="headerlink" title="4.3.4 将80注册"></a>4.3.4 将80注册</h4><p>修改pom</p>
<pre class=" language-yml"><code class="language-yml">#替换掉原来的单机版
        defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
<h4 id="4-3-5-测试"><a href="#4-3-5-测试" class="headerlink" title="4.3.5 测试"></a>4.3.5 测试</h4><ol>
<li>先要启动EurekaServer，7001/7002服务</li>
<li>再要启动服务提供者provider，8001</li>
<li>再要启动消费者，80</li>
<li><a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></li>
</ol>
<h4 id="4-3-6-支付提供者集群8002"><a href="#4-3-6-支付提供者集群8002" class="headerlink" title="4.3.6 支付提供者集群8002"></a>4.3.6 支付提供者集群8002</h4><p>修改8001/8002的Controller</p>
<pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//获取application中端口数据</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-3-7-负载均衡"><a href="#4-3-7-负载均衡" class="headerlink" title="4.3.7 负载均衡"></a>4.3.7 负载均衡</h4><ul>
<li>订单访问地址不能写死</li>
</ul>
<pre class=" language-java"><code class="language-java"> 
<span class="token comment" spellcheck="true">//public static final String PAYMENT_SRV = "http://localhost:8001";</span>
 
<span class="token comment" spellcheck="true">// 通过在eureka上注册过的微服务名称调用</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_SRV <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>负载均衡效果达到,8001/8002端口交替出现</p>
<h4 id="4-3-8-Eureka自我保护"><a href="#4-3-8-Eureka自我保护" class="headerlink" title="4.3.8 Eureka自我保护"></a>4.3.8 Eureka自我保护</h4><blockquote>
<p>故障</p>
</blockquote>
<p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，<br>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101221037399.png" alt="image-20211101221037399"></p>
<blockquote>
<p>原因</p>
</blockquote>
<p>一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存</p>
<blockquote>
<p>怎么禁止自我保护</p>
</blockquote>
<ul>
<li>注册中心eureakeServer端7001</li>
</ul>
<p>使用<code>eureka.server.enable-self-preservation = false</code> 可以禁用自我保护模式</p>
<ul>
<li>生产者客户端eurekaClient端8001</li>
</ul>
<pre class=" language-yml"><code class="language-yml">#心跳检测与续约时间
#开发时设置小些，保证服务关闭后注册中心能即使剔除服务
  instance:
  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)
    lease-renewal-interval-in-seconds: 1
  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务
    lease-expiration-duration-in-seconds: 2
 
</code></pre>
<h2 id="5-Zookeeper服务注册与发现"><a href="#5-Zookeeper服务注册与发现" class="headerlink" title="5.Zookeeper服务注册与发现"></a>5.Zookeeper服务注册与发现</h2><h3 id="5-1-Zookeeper概念"><a href="#5-1-Zookeeper概念" class="headerlink" title="5.1 Zookeeper概念"></a>5.1 Zookeeper概念</h3><p>它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
<h3 id="5-2-zk安装"><a href="#5-2-zk安装" class="headerlink" title="5.2 zk安装"></a>5.2 zk安装</h3><p>下载zk到linux的<code>/usr/local/software/</code></p>
<p>解压<code>tar -zxvf zookeeper-3.6.3.tar.gz</code>后进入到<code>conf</code>目录</p>
<p>拷贝<code>cp zoo_simple.cfg zoo.cfg</code>,进入到<code>cd bin/</code>目录下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>
./zkServer.sh start
<span class="token comment" spellcheck="true">#停止</span>
./zkServer.sh stop
<span class="token comment" spellcheck="true">#重启</span>
./zkServer.sh reload
<span class="token comment" spellcheck="true">#查看</span>
./zkServer.sh status

<span class="token comment" spellcheck="true">#联通</span>
./zkCli.sh -server 127.0.0.1:2181
<span class="token comment" spellcheck="true">#查看实例</span>
<span class="token function">ls</span> /services
</code></pre>
<h3 id="5-3-流程图"><a href="#5-3-流程图" class="headerlink" title="5.3 流程图"></a>5.3 流程图</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101222233077.png" alt="image-20211101222233077"></p>
<h2 id="6-Consul服务注册与发现"><a href="#6-Consul服务注册与发现" class="headerlink" title="6.Consul服务注册与发现"></a>6.Consul服务注册与发现</h2><h3 id="6-1-Consul概念"><a href="#6-1-Consul概念" class="headerlink" title="6.1 Consul概念"></a>6.1 Consul概念</h3><blockquote>
<p>是什么</p>
</blockquote>
<p>Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。</p>
<p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p>
<p>它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows</p>
<blockquote>
<p>能干嘛</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223225099.png" alt="image-20211101223225099"></p>
<h3 id="6-2-下载和安装"><a href="#6-2-下载和安装" class="headerlink" title="6.2 下载和安装"></a>6.2 下载和安装</h3><blockquote>
<p>WindowsX64</p>
</blockquote>
<p>在下载目录通过cmd启动</p>
<p>查看版本</p>
<pre class=" language-bash"><code class="language-bash">consul --version
</code></pre>
<p>执行</p>
<pre class=" language-bash"><code class="language-bash">consul agent -dev
</code></pre>
<p>通过以下地址可以访问Consul的首页：<a href="http://localhost:8500/">http://localhost:8500</a></p>
<blockquote>
<p>结果</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223518905.png" alt="image-20211101223518905"></p>
<h3 id="6-3流程图"><a href="#6-3流程图" class="headerlink" title="6.3流程图"></a>6.3流程图</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223551145.png" alt="image-20211101223551145"></p>
<h2 id="7-三个注册中心异同点"><a href="#7-三个注册中心异同点" class="headerlink" title="7.三个注册中心异同点"></a>7.三个注册中心异同点</h2><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223646833.png" alt="image-20211101223646833"></p>
<h3 id="7-1-CAP"><a href="#7-1-CAP" class="headerlink" title="7.1 CAP"></a>7.1 CAP</h3><ul>
<li>C:Consistency（强一致性）</li>
<li>A:Availability（可用性）</li>
<li>P:Partition tolerance（分区容错性）</li>
</ul>
<p>CAP理论关注粒度是数据，而不是整体系统设计的策略</p>
<h3 id="7-2-经典CAP图"><a href="#7-2-经典CAP图" class="headerlink" title="7.2 经典CAP图"></a>7.2 经典CAP图</h3><p><strong>最多只能同时较好的满足两个。</strong><br> CAP理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，</strong><br>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：<br>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。<br>CP - 满足一致性，分区容错性的系统，通常性能不是特别高。<br>AP - 满足可用性，分区容错性的系统，通常可能对一致性要求低一些。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101224204456.png" alt="image-20211101224204456"></p>
<h3 id="7-3-AP-Eureka"><a href="#7-3-AP-Eureka" class="headerlink" title="7.3 AP(Eureka)"></a>7.3 AP(Eureka)</h3><p><strong>AP架构</strong><br>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。<br>结论：违背了一致性C的要求，只满足可用性和分区容错，即AP</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211101224302664.png" alt="image-20211101224302664" style="zoom: 80%;">

<h3 id="7-4-CP-Zookeeper-Consul"><a href="#7-4-CP-Zookeeper-Consul" class="headerlink" title="7.4 CP(Zookeeper/Consul)"></a>7.4 CP(Zookeeper/Consul)</h3><p><strong>CP架构</strong><br>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性<br>结论：违背了可用性A的要求，只满足一致性和分区容错，即CP</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211101224406506.png" alt="image-20211101224406506" style="zoom:80%;">

<h2 id="8-Ribbon负载均衡服务调用"><a href="#8-Ribbon负载均衡服务调用" class="headerlink" title="8.Ribbon负载均衡服务调用"></a>8.Ribbon负载均衡服务调用</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><h4 id="8-1-1-ribbon是什么"><a href="#8-1-1-ribbon是什么" class="headerlink" title="8.1.1 ribbon是什么"></a>8.1.1 ribbon是什么</h4><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡</strong>的工具。</p>
<p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p>
<h4 id="8-1-2-LB负载均衡"><a href="#8-1-2-LB负载均衡" class="headerlink" title="8.1.2 LB负载均衡"></a>8.1.2 LB负载均衡</h4><blockquote>
<p>LB负载均衡(Load Balance)是什么?</p>
</blockquote>
<p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。<br>常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p>
<blockquote>
<p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</p>
</blockquote>
<ul>
<li>Ribbon<strong>本地负载均衡</strong>，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</li>
<li>Nginx<strong>服务器负载均衡</strong>，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</li>
</ul>
<h4 id="8-1-3-集中式LB"><a href="#8-1-3-集中式LB" class="headerlink" title="8.1.3 集中式LB"></a>8.1.3 集中式LB</h4><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</p>
<h4 id="8-1-4-进程内LB"><a href="#8-1-4-进程内LB" class="headerlink" title="8.1.4 进程内LB"></a>8.1.4 进程内LB</h4><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p>
<p>Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>
<h3 id="8-2-Ribbon负载均衡演示"><a href="#8-2-Ribbon负载均衡演示" class="headerlink" title="8.2 Ribbon负载均衡演示"></a>8.2 Ribbon负载均衡演示</h3><h4 id="8-2-1-架构说明"><a href="#8-2-1-架构说明" class="headerlink" title="8.2.1 架构说明"></a>8.2.1 架构说明</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103205530988.png" alt="image-20211103205530988"></p>
<p><strong>总结：</strong></p>
<p>Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p>
<h4 id="8-2-2-使用"><a href="#8-2-2-使用" class="headerlink" title="8.2.2 使用"></a>8.2.2 使用</h4><p>引入pom依赖，<code>spring-cloud-starter-netflix-eureka-client</code>自带了<code>spring-cloud-starter-ribbon</code>引用</p>
<p>通过RestTemplate调用</p>
<ul>
<li>getForObject方法/getForEntity方法</li>
<li>postForObject/postForEntity</li>
</ul>
<p>消费者81：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//public static final String PAYMENT_URL = "http://localhost:8001";</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/insert"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//客户端用浏览器是get请求，但是底层实质发送post调用服务端8001</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/insert"</span><span class="token punctuation">,</span> payment<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//http://localhost:81/consumer/payment/get/30</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="8-3-Ribbon核心组件IRule"><a href="#8-3-Ribbon核心组件IRule" class="headerlink" title="8.3 Ribbon核心组件IRule"></a>8.3 Ribbon核心组件IRule</h3><h4 id="8-3-1-IRule"><a href="#8-3-1-IRule" class="headerlink" title="8.3.1 IRule"></a>8.3.1 IRule</h4><p>IRule：根据特定算法中从服务列表中选取一个要访问的服务</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103210228260.png" alt="image-20211103210228260"></p>
<h4 id="8-3-2-分类"><a href="#8-3-2-分类" class="headerlink" title="8.3.2 分类"></a>8.3.2 分类</h4><ul>
<li><code>com.netflix.loadbalancer.RoundRobinRule</code>轮询</li>
<li><code>com.netflix.loadbalancer.RandomRule</code> 随机</li>
<li><code>com.netflix.loadbalancer.RetryRule</code> 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li>
<li><code>WeightedResponseTimeRule</code> 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li>
<li><code>BestAvailableRule</code> 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li>
<li><code>AvailabilityFilteringRule</code> 先过滤掉故障实例，再选择并发较小的实例</li>
<li><code>ZoneAvoidanceRule</code> 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li>
</ul>
<h4 id="8-3-3-如何选择"><a href="#8-3-3-如何选择" class="headerlink" title="8.3.3 如何选择"></a>8.3.3 如何选择</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103210637847.png" alt="image-20211103210637847"></p>
<h3 id="8-4-Ribbon负载均衡算法"><a href="#8-4-Ribbon负载均衡算法" class="headerlink" title="8.4 Ribbon负载均衡算法"></a>8.4 Ribbon负载均衡算法</h3><h4 id="8-4-1-原理"><a href="#8-4-1-原理" class="headerlink" title="8.4.1 原理"></a>8.4.1 原理</h4><p>负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。</p>
<p>List<serviceinstance> instances = discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”);</serviceinstance></p>
<p>如：   List [0] instances = 127.0.0.1:8002<br>　　　List [1] instances = 127.0.0.1:8001</p>
<p>8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理：</p>
<p>当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001<br>当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002<br>当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001<br>当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002<br>如此类推……</p>
<h4 id="8-4-2-手写算法"><a href="#8-4-2-手写算法" class="headerlink" title="8.4.2 手写算法"></a>8.4.2 手写算法</h4><p><strong>LoadBalancer接口</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span>
<span class="token punctuation">{</span>
    ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">&gt;</span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>MyLB</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Componet</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLB</span> <span class="token keyword">implements</span> <span class="token class-name">loadBalancer</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> current<span class="token punctuation">;</span>
        <span class="token keyword">int</span> next<span class="token punctuation">;</span>
        <span class="token keyword">do</span><span class="token punctuation">{</span>
            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">&gt;=</span> <span class="token number">2147483647</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span> <span class="token operator">:</span> current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"next:"</span> <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Ovrride</span>
    <span class="token keyword">public</span> ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServicesInstance<span class="token operator">&gt;</span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> serviceInstance<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idnex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>OderController:</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> LoadBalancer loadBalancer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/lb"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">&gt;</span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> null <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">instances</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="9-OpenFeign服务接口调用"><a href="#9-OpenFeign服务接口调用" class="headerlink" title="9.OpenFeign服务接口调用"></a>9.OpenFeign服务接口调用</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><h4 id="9-1-1-OpenFeign是什么"><a href="#9-1-1-OpenFeign是什么" class="headerlink" title="9.1.1 OpenFeign是什么"></a>9.1.1 OpenFeign是什么</h4><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。</p>
<p>它的使用方法是<strong>定义一个服务接口然后在上面添加注解</strong>。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p>
<h4 id="9-1-2-能干嘛"><a href="#9-1-2-能干嘛" class="headerlink" title="9.1.2 能干嘛"></a>9.1.2 能干嘛</h4><blockquote>
<p>Feign能干什么</p>
</blockquote>
<p>Feign旨在使编写Java Http客户端变得更容易。<br>前面在使用<code>Ribbon+RestTemplate</code>时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们<strong>只需创建一个接口并使用注解的方式来配置它</strong>(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可<strong>完成对服务提供方的接口绑定</strong>，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p>
<blockquote>
<p>Feign集成了Ribbon</p>
</blockquote>
<p>利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p>
<h4 id="9-1-3-Feign和OpenFeign的区别"><a href="#9-1-3-Feign和OpenFeign的区别" class="headerlink" title="9.1.3 Feign和OpenFeign的区别"></a>9.1.3 Feign和OpenFeign的区别</h4><table>
<thead>
<tr>
<th align="center">Feign</th>
<th align="center">OpenFeign</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端<br>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td>
<td align="center">OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
<tr>
<td align="center">spring-cloud-starter-feign</td>
<td align="center">spring-cloud-starter-openfeign</td>
</tr>
</tbody></table>
<h3 id="9-2-OpenFeign使用步骤"><a href="#9-2-OpenFeign使用步骤" class="headerlink" title="9.2 OpenFeign使用步骤"></a>9.2 OpenFeign使用步骤</h3><ol>
<li><p>新建cloud-consumer-feign-order80</p>
</li>
<li><p>pom</p>
</li>
<li><p>yml</p>
</li>
<li><p>主启动 <code>@EnableFeignClients</code> //开启</p>
</li>
<li><p>业务类</p>
<p>业务逻辑接口+@FeignClient配置调用provider服务</p>
<p>service：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>
    CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">&gt;</span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>controller：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFeignController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> PaymentFeignService paymentFeignService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">&gt;</span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> paymentFeignService<span class="token punctuation">.</span><span class="token function">getPaymentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
<h3 id="9-3-OpenFeign超时控制"><a href="#9-3-OpenFeign超时控制" class="headerlink" title="9.3 OpenFeign超时控制"></a>9.3 OpenFeign超时控制</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103212921380.png" alt="image-20211103212921380"></p>
<pre class=" language-java"><code class="language-java">TimeUtil<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p> 默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。</p>
<p>为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制,在yml配置文件中进行设置</p>
<pre class=" language-yml"><code class="language-yml">#设置feign客户端超时时间(OpenFeign默认支持ribbon)
ribbon:
  #指的是建立连接后从服务器读取到可用资源所用的时间
  ReadTimeout: 5000
  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
  ConnectTimeout: 5000
</code></pre>
<h3 id="9-4-OpenFeign日志打印功能"><a href="#9-4-OpenFeign日志打印功能" class="headerlink" title="9.4 OpenFeign日志打印功能"></a>9.4 OpenFeign日志打印功能</h3><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。<br>就是对Feign接口的调用情况进行监控和输出.</p>
<blockquote>
<p>日志级别</p>
</blockquote>
<ul>
<li><code>NONE</code>：默认的，不显示任何日志；</li>
<li><code>BASIC</code>：仅记录请求方法、URL、响应状态码及执行时间；</li>
<li><code>HEADERS</code>：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</li>
<li><code>FULL</code>：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。</li>
</ul>
<p>配置日志类:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    Logger<span class="token punctuation">.</span>Level <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>开启Feign客户端：</p>
<pre class=" language-yml"><code class="language-yml">logging:
  level:
    # feign日志以什么级别监控哪个接口
    com.atguigu.springcloud.service.PaymentFeignService: debug
</code></pre>
<h2 id="10-Hystrix断路器"><a href="#10-Hystrix断路器" class="headerlink" title="10.Hystrix断路器"></a>10.Hystrix断路器</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><h4 id="10-1-1-分布式系统面临的问题"><a href="#10-1-1-分布式系统面临的问题" class="headerlink" title="10.1.1 分布式系统面临的问题"></a>10.1.1 分布式系统面临的问题</h4><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p>
<p><strong>服务雪崩</strong></p>
<p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.</p>
<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。<br>所以<br>通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生<strong>级联故障</strong>，或者叫雪崩。</p>
<h4 id="10-1-2-Hystrix是什么"><a href="#10-1-2-Hystrix是什么" class="headerlink" title="10.1.2 Hystrix是什么"></a>10.1.2 Hystrix是什么</h4><p>Hystrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</strong></p>
<p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h4 id="10-1-3-Hystrix作用"><a href="#10-1-3-Hystrix作用" class="headerlink" title="10.1.3 Hystrix作用"></a>10.1.3 Hystrix作用</h4><ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>接近实时的监控</li>
</ul>
<h3 id="10-2-Hystrix重要概念"><a href="#10-2-Hystrix重要概念" class="headerlink" title="10.2 Hystrix重要概念"></a>10.2 Hystrix重要概念</h3><h4 id="10-2-1-服务降级"><a href="#10-2-1-服务降级" class="headerlink" title="10.2.1 服务降级"></a>10.2.1 服务降级</h4><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，<code>fallback</code></p>
<blockquote>
<p>1.哪些情况会出发降级？</p>
</blockquote>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满也会导致</li>
</ul>
<p><font>解决办法:增加异常处理方法</font></p>
<blockquote>
<ol start="2">
<li>单个业务：</li>
</ol>
</blockquote>
<p>一旦调用服务方法失败并抛出了错误信息后，<br>会自动调用<code>@HystrixCommand</code>标注好的fallbackMethod调用类中的指定方法</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103220508176.png" alt="image-20211103220508176"></p>
<blockquote>
<p>3.全局业务：</p>
</blockquote>
<p><code>@DefaultProperties(defaultFallback = "")</code></p>
<p>除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaultFallback = “”)  统一跳转到统一处理结果页面</p>
<p>  通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量</p>
<blockquote>
<p>4.与业务逻辑分离</p>
</blockquote>
<p>根据cloud-consumer-feign-hystrix-order80已经有的<code>PaymentHystrixService</code>接口，<br>重新新建一个类<code>PaymentFallbackService</code>实现该接口，统一为接口里面的方法进行异常处理.</p>
<p>PaymentHystrixService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> PaymentFallbackService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClientService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>PaymentFallbackService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentFeignClientService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"服务调用失败，提示来自：cloud-consumer-feign-order80"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="10-2-2-服务熔断"><a href="#10-2-2-服务熔断" class="headerlink" title="10.2.2 服务熔断"></a>10.2.2 服务熔断</h4><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。</p>
<blockquote>
<p>1.解决方案</p>
</blockquote>
<p>PaymentService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启熔断器</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多少次请求</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//10s内</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//达到60%错误熔断</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"******id 不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    String serialNumber <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"调用成功，流水号: "</span> <span class="token operator">+</span> serialNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: "</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>服务的降级-&gt;进而熔断-&gt;恢复调用链路</strong></p>
<p><font>熔断状态</font></p>
<ul>
<li>熔断打开</li>
<li>熔断关闭</li>
<li>熔断半开 ： 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>
</ul>
<blockquote>
<p>3.断路器条件</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103221255475.png" alt="image-20211103221255475"></p>
<blockquote>
<p>4.断路器打开后</p>
</blockquote>
<p>1：再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p>
<p>2：原来的主逻辑要如何恢复呢？<br>对于这一问题，hystrix也为我们实现了自动恢复功能。<br>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，<br>当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，<br>主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p>
<h4 id="10-2-3-服务限流"><a href="#10-2-3-服务限流" class="headerlink" title="10.2.3 服务限流"></a>10.2.3 服务限流</h4><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p>
<p>详见<code>springcloud alibaba setninel</code></p>
<h3 id="10-3-hystrix工作流程"><a href="#10-3-hystrix工作流程" class="headerlink" title="10.3 hystrix工作流程"></a>10.3 hystrix工作流程</h3><ul>
<li>图例：</li>
</ul>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103222641143.png" alt="image-20211103222641143"></p>
<ul>
<li>步骤说明</li>
</ul>
<ol>
<li><p>创建 <code>HystrixCommand</code>（用在依赖的服务返回单个操作结果的时候） 或 <code>HystrixObserableCommand</code>（用在依赖的服务返回多个操作结果的时候） 对象。</p>
</li>
<li><p>命令执行。其中 HystrixComand 实现了下面前两种执行方式:</p>
<ul>
<li><code>execute()</code>：同步执行，从依赖的服务返回一个单一的结果对象， 或是在发生错误的时候抛出异常。</li>
<li><code>queue()</code>：异步执行， 直接返回 一个Future对象， 其中包含了服务执行结束时要返回的单一结果对象。</li>
</ul>
<p>HystrixObservableCommand 实现了后两种执行方式：</p>
<ul>
<li><code>observe()</code>：返回 Observable 对象，它代表了操作的多个结果，它是一个 Hot Obserable（不论 “事件源” 是否有 “订阅者”，都会在创建后对事件进行发布，所以对于 Hot Observable 的每一个 “订阅者” 都有可能是从 “事件源” 的中途开始的，并可能只是看到了整个操作的局部过程）。</li>
<li><code>toObservable()</code>： 同样会返回 Observable 对象，也代表了操作的多个结果，但它返回的是一个Cold Observable（没有 “订阅者” 的时候并不会发布事件，而是进行等待，直到有 “订阅者” 之后才发布事件，所以对于 Cold Observable 的订阅者，它可以保证从一开始看到整个操作的全部过程）。</li>
</ul>
</li>
<li><p>若当前命令的请求缓存功能是被启用的， 并且该命令缓存命中， 那么缓存的结果会立即以 Observable 对象的形式 返回。</p>
</li>
<li><p>检查断路器是否为打开状态。如果断路器是打开的，那么Hystrix不会执行命令，而是转接到 fallback 处理逻辑（第 8 步）；如果断路器是关闭的，检查是否有可用资源来执行命令（第 5 步）。</p>
</li>
<li><p>线程池/请求队列/信号量是否占满。如果命令依赖服务的专有线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满， 那么 Hystrix 也不会执行命令， 而是转接到 fallback 处理逻辑（第8步）。</p>
</li>
<li><p>Hystrix 会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。HystrixCommand.run() ：返回一个单一的结果，或者抛出异常。HystrixObservableCommand.construct()： 返回一个Observable 对象来发射多个结果，或通过 onError 发送错误通知。</p>
</li>
<li><p>Hystrix会将 “成功”、”失败”、”拒绝”、”超时” 等信息报告给断路器， 而断路器会维护一组计数器来统计这些数据。断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行 “熔断/短路”。</p>
</li>
<li><p>当命令执行失败的时候， Hystrix 会进入 fallback 尝试回退处理， 我们通常也称该操作为 “服务降级”。而能够引起服务降级处理的情况有下面几种：第4步： 当前命令处于”熔断/短路”状态，断路器是打开的时候。第5步： 当前命令的线程池、 请求队列或 者信号量被占满的时候。第6步：HystrixObservableCommand.construct() 或 HystrixCommand.run() 抛出异常的时候。</p>
</li>
<li><p>当Hystrix命令执行成功之后， 它会将处理结果直接返回或是以Observable 的形式返回。</p>
</li>
</ol>
<p><strong>tips：</strong>如果我们没有为命令实现降级逻辑或者在降级处理逻辑中抛出了异常， Hystrix 依然会返回一个 Observable 对象， 但是它不会发射任何结果数据， 而是通过 onError 方法通知命令立即中断请求，并通过onError()方法将引起命令失败的异常发送给调用者。</p>
<h3 id="10-4-服务监控hystrixDashboard"><a href="#10-4-服务监控hystrixDashboard" class="headerlink" title="10.4 服务监控hystrixDashboard"></a>10.4 服务监控hystrixDashboard</h3><h4 id="10-4-1-概述"><a href="#10-4-1-概述" class="headerlink" title="10.4.1 概述"></a>10.4.1 概述</h4><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p>
<h4 id="10-4-2-仪表盘步骤"><a href="#10-4-2-仪表盘步骤" class="headerlink" title="10.4.2 仪表盘步骤"></a>10.4.2 仪表盘步骤</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223247617.png" alt="image-20211103223247617"></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223258680.png" alt="image-20211103223258680"></p>
<h4 id="10-4-3-监控窗口"><a href="#10-4-3-监控窗口" class="headerlink" title="10.4.3 监控窗口"></a>10.4.3 监控窗口</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223425924.png" alt="image-20211103223425924"></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223459404.png" alt="image-20211103223459404"></p>
<h2 id="11-zuul路由网关"><a href="#11-zuul路由网关" class="headerlink" title="11.zuul路由网关"></a>11.zuul路由网关</h2><h3 id="11-1-概述简介"><a href="#11-1-概述简介" class="headerlink" title="11.1 概述简介"></a>11.1 概述简介</h3><ul>
<li>Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。</li>
<li>Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。</li>
</ul>
<p>API网关为微服务架构中的服务提供了统一的访问入口，客户端通过API网关访问相关服务。API网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223706350.png" alt="image-20211103223706350"></p>
<p>Zuul包含了如下最主要的功能：</p>
<p><font>代理+路由+过滤三大功能</font></p>
<h3 id="11-2-作用"><a href="#11-2-作用" class="headerlink" title="11.2 作用"></a>11.2 作用</h3><ul>
<li><p>路由</p>
</li>
<li><p>过滤</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>灰度发布（or 金丝雀发布）</p>
<p>起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。</p>
</li>
</ul>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223913156.png" alt="image-20211103223913156"></p>
<p>在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。新版本没什么问题，那么逐步扩大范围、流量，把所有用户都迁移到新版本上面来。</p>
<h2 id="12-Gateway新一代网关"><a href="#12-Gateway新一代网关" class="headerlink" title="12.Gateway新一代网关"></a>12.Gateway新一代网关</h2><h3 id="12-1-概述简介"><a href="#12-1-概述简介" class="headerlink" title="12.1 概述简介"></a>12.1 概述简介</h3><h4 id="12-1-1-是什么？"><a href="#12-1-1-是什么？" class="headerlink" title="12.1.1 是什么？"></a>12.1.1 是什么？</h4><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。<br>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p>
<h4 id="12-1-2-能干嘛？"><a href="#12-1-2-能干嘛？" class="headerlink" title="12.1.2 能干嘛？"></a>12.1.2 能干嘛？</h4><ul>
<li>反向代理</li>
<li>鉴权 ：是指验证用户是否拥有访问系统的权利</li>
<li>流量控制</li>
<li>熔断</li>
<li>日志监控</li>
</ul>
<h4 id="10-1-3-网关所处位置"><a href="#10-1-3-网关所处位置" class="headerlink" title="10.1.3 网关所处位置"></a>10.1.3 网关所处位置</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103224324410.png" alt="image-20211103224324410"></p>
<h4 id="10-1-4-为什么选择Gateway"><a href="#10-1-4-为什么选择Gateway" class="headerlink" title="10.1.4 为什么选择Gateway"></a>10.1.4 为什么选择Gateway</h4><blockquote>
<p>1.neflix不太靠谱，zuul2.0一直跳票，迟迟不发布</p>
</blockquote>
<blockquote>
<p>SpringCloud Gateway具有如下特性</p>
</blockquote>
<ul>
<li>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建；</li>
<li>动态路由：能够匹配任何请求属性；</li>
<li>可以对路由指定 Predicate（断言）和 Filter（过滤器）；</li>
<li>集成Hystrix的断路器功能；</li>
<li>集成 Spring Cloud 服务发现功能；</li>
<li>易于编写的 Predicate（断言）和 Filter（过滤器）；</li>
<li>请求限流功能；</li>
<li>支持路径重写。</li>
</ul>
<blockquote>
<p>SpringCloud Gateway 与 Zuul的区别</p>
</blockquote>
<ul>
<li>1、Zuul 1.x，是一个基于<strong>阻塞 I/ O</strong> 的 API Gateway</li>
<li>2、Zuul 1.x 基于<strong>Servlet 2. 5使用阻塞架构它不支持任何长连接</strong>(如 WebSocket) Zuul 的设计模式和Nginx较像，每次 I/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++ 实现，Zuul 用 Java 实现，而 JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</li>
<li>3、Zuul 2.x理念更先进，想<strong>基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合</strong>。 Zuul 2.x的性能较 Zuul 1.x 有较大提升。在性能方面，根据官方提供的基准测试， Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。</li>
<li>4、Spring Cloud Gateway 建立 在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上， 使用<strong>非阻塞 API</strong>。</li>
<li>5、Spring Cloud Gateway 还 支持 WebSocket， 并且与<strong>Spring紧密集成</strong>拥有更好的开发体验</li>
</ul>
<h3 id="12-2-三大核心概念"><a href="#12-2-三大核心概念" class="headerlink" title="12.2 三大核心概念"></a>12.2 三大核心概念</h3><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。<br><code>predicate</code>就是我们的匹配条件；<br>而<code>filter</code>，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的<code>route</code>路由了</p>
<h4 id="12-2-1-Route-路由"><a href="#12-2-1-Route-路由" class="headerlink" title="12.2.1 Route(路由)"></a>12.2.1 Route(路由)</h4><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p>
<h4 id="12-2-2-Predicate-断言"><a href="#12-2-2-Predicate-断言" class="headerlink" title="12.2.2 Predicate(断言"></a>12.2.2 Predicate(断言</h4><p>开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由</p>
<h4 id="12-2-3-Filter-过滤"><a href="#12-2-3-Filter-过滤" class="headerlink" title="12.2.3 Filter(过滤)"></a>12.2.3 Filter(过滤)</h4><p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p>
<h3 id="12-3-入门配置"><a href="#12-3-入门配置" class="headerlink" title="12.3 入门配置"></a>12.3 入门配置</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103225335954.png" alt="image-20211103225335954"></p>
<p><font>yml网关配置</font></p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 9527

spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      routes:
        - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由

eureka:
  instance:
    hostname: cloud-gateway-service
  client: #服务提供者provider注册进eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://eureka7001.com:7001/eureka
</code></pre>
<h3 id="12-4-通过微服务名实现动态路由"><a href="#12-4-通过微服务名实现动态路由" class="headerlink" title="12.4 通过微服务名实现动态路由"></a>12.4 通过微服务名实现动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p>
<p>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p>
<p>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</p>
<p>修改yml</p>
<pre class=" language-yml"><code class="language-yml">spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: payment_routh               #路由的ID，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:8001    #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAYMENT-SERVICE #动态匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2             
          # uri: http://localhost:8001         
          uri: lb://cloud-payment-service 
          predicates:
            - Path=/payment/lb/**        
</code></pre>
<h3 id="12-5-Predicate断言的使用"><a href="#12-5-Predicate断言的使用" class="headerlink" title="12.5 Predicate断言的使用"></a>12.5 Predicate断言的使用</h3><p>Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p>
<pre class=" language-yml"><code class="language-yml">
- Path=/payment/get/**  

- After=2020-02-05T15:10:03.685+08:00[Asia/Shanghai]  # 在此时间之后才可以

- Before=2020-02-05T15:10:03.685+08:00[Asia/Shanghai] # 之前

- Between=2020-02-02T17:45:06.206+08:00[Asia/Shanghai],2020-03-25T18:59:06.206+08:00[Asia/Shanghai]                     # 之间

- Cookie=username,zzyy            #必须携带cookie

- Header=X-Request-Id, \d+      # 请求头要有X-Request-Id属性并且值为整数的正则表达式

- Host=**.atguigu.com

- Method=GET                    #请求方式为Get

- Query=username, \d+              # 要有参数名username并且值还要是整数才能路由

</code></pre>
<h3 id="12-6-Filter的使用"><a href="#12-6-Filter的使用" class="headerlink" title="12.6 Filter的使用"></a>12.6 Filter的使用</h3><h4 id="12-6-1-基础过滤器"><a href="#12-6-1-基础过滤器" class="headerlink" title="12.6.1 基础过滤器"></a>12.6.1 基础过滤器</h4><blockquote>
<p>Filter是什么</p>
</blockquote>
<p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p>
<blockquote>
<p>常用的GatewayFilter</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103230937100.png" alt="image-20211103230937100"></p>
<pre class=" language-yml"><code class="language-yml">  routes:
        - id: payment_routh 
          uri: lb://cloud-provider-payment 
          filters:
            - AddRequestParameter=X-Request-Id,1024 
            #过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024
</code></pre>
<h4 id="12-6-2-自定义过滤器"><a href="#12-6-2-自定义过滤器" class="headerlink" title="12.6.2 自定义过滤器*"></a>12.6.2 自定义过滤器*</h4><p>自定义全局<code>GlobalFilter</code></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span>Ordered<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">&gt;</span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 执行了自定义的全局过滤器: "</span><span class="token operator">+</span><span class="token string">"MyLogGateWayFilter"</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****用户名为null，无法登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>访问的时候必须加上<code>uname</code>参数，如：</p>
<p><a href="http://localhost:9527/payment/lb?uname=XXX">http://localhost:9527/payment/lb?uname=XXX</a>    </p>
<h2 id="13-SpringCloud-Config分布式配置中心"><a href="#13-SpringCloud-Config分布式配置中心" class="headerlink" title="13.SpringCloud Config分布式配置中心"></a>13.SpringCloud Config分布式配置中心</h2><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><h4 id="13-1-1-分布式系统面临的—配置问题"><a href="#13-1-1-分布式系统面临的—配置问题" class="headerlink" title="13.1.1  分布式系统面临的—配置问题"></a>13.1.1  分布式系统面临的—配置问题</h4><p> 微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p>
<p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理……</p>
<h4 id="13-1-2-是什么"><a href="#13-1-2-是什么" class="headerlink" title="13.1.2 是什么"></a>13.1.2 是什么</h4><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214421743.png" alt="image-20211105214421743"></p>
<p>SpringCloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p>
<p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p>
<p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p>
<h4 id="13-1-3-能干嘛"><a href="#13-1-3-能干嘛" class="headerlink" title="13.1.3 能干嘛"></a>13.1.3 能干嘛</h4><ul>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ul>
<h4 id="13-1-4-与github整合"><a href="#13-1-4-与github整合" class="headerlink" title="13.1.4 与github整合"></a>13.1.4 与github整合</h4><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，<br>但最推荐的还是Git，而且使用的是http/https访问的形式</p>
<h3 id="13-2-Config服务端配置与测试"><a href="#13-2-Config服务端配置与测试" class="headerlink" title="13.2 Config服务端配置与测试"></a>13.2 Config服务端配置与测试</h3><h4 id="13-2-1-配置github"><a href="#13-2-1-配置github" class="headerlink" title="13.2.1 配置github"></a>13.2.1 配置github</h4><ol>
<li><p>用你自己的账号在GitHub上新建一个名为springcloud-config的新Repository</p>
</li>
<li><p>获得配置的仓库地址</p>
</li>
<li><p>在D盘下建立本地仓库，并clone</p>
</li>
<li><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>

<span class="token function">git</span> commit -m <span class="token string">"xxxx"</span>

<span class="token function">git</span> push origin master
</code></pre>
</li>
</ol>
<h4 id="13-2-2-新建cloud-config-center-3344"><a href="#13-2-2-新建cloud-config-center-3344" class="headerlink" title="13.2.2 新建cloud-config-center-3344"></a>13.2.2 新建cloud-config-center-3344</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214827916.png" alt="image-20211105214827916"></p>
<h4 id="13-2-3-配置读取规则"><a href="#13-2-3-配置读取规则" class="headerlink" title="13.2.3 配置读取规则"></a>13.2.3 配置读取规则</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214943979.png" alt="image-20211105214943979"></p>
<h3 id="13-3-Config客户端配置与测试"><a href="#13-3-Config客户端配置与测试" class="headerlink" title="13.3 Config客户端配置与测试"></a>13.3 Config客户端配置与测试</h3><blockquote>
<p>新建cloud-config-client-3355</p>
</blockquote>
<p>建立<code>bootstrap.yml</code></p>
<p><strong>bootstrap.yml是什么?</strong></p>
<p>applicaiton.yml是用户级的资源配置项<br>bootstrap.yml是系统级的，优先级更加高</p>
<p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p>
<p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p>
<p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，<br>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p>
<blockquote>
<p>测试</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105215902239.png" alt="image-20211105215902239"></p>
<h3 id="13-4-Config客户端之动态刷新"><a href="#13-4-Config客户端之动态刷新" class="headerlink" title="13.4 Config客户端之动态刷新"></a>13.4 Config客户端之动态刷新</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220056339.png" alt="image-20211105220056339"></p>
<h2 id="14-SpringCloud-Bus动态刷新全局广播"><a href="#14-SpringCloud-Bus动态刷新全局广播" class="headerlink" title="14.SpringCloud Bus动态刷新全局广播"></a>14.SpringCloud Bus动态刷新全局广播</h2><h3 id="14-1-概述"><a href="#14-1-概述" class="headerlink" title="14.1 概述"></a>14.1 概述</h3><h4 id="14-1-1-是什么"><a href="#14-1-1-是什么" class="headerlink" title="14.1.1 是什么"></a>14.1.1 是什么</h4><p>Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220332912.png" alt="image-20211105220332912"></p>
<p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，<br>它整合了Java的事件处理机制和消息中间件的功能。<br>Spring Clud Bus目前支持RabbitMQ和Kafka。</p>
<h4 id="14-1-2-能干嘛"><a href="#14-1-2-能干嘛" class="headerlink" title="14.1.2 能干嘛"></a>14.1.2 能干嘛</h4><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220451461.png" alt="image-20211105220451461"></p>
<h4 id="14-1-3-总线是什么"><a href="#14-1-3-总线是什么" class="headerlink" title="14.1.3 总线是什么"></a>14.1.3 总线是什么</h4><p><strong>什么是总线</strong><br>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p>
<p><strong>基本原理</strong><br>ConfigClient实例都监听MQ中同一个topic(默认是springCloudBus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p>
<h3 id="14-2-RabbitMQ环境配置"><a href="#14-2-RabbitMQ环境配置" class="headerlink" title="14.2 RabbitMQ环境配置"></a>14.2 RabbitMQ环境配置</h3><p>见本博客Rabbitmq文章</p>
<h3 id="14-3-Bus动态刷新全局广播"><a href="#14-3-Bus动态刷新全局广播" class="headerlink" title="14.3 Bus动态刷新全局广播"></a>14.3 Bus动态刷新全局广播</h3><h4 id="14-3-1-cloud-config-client-3366"><a href="#14-3-1-cloud-config-client-3366" class="headerlink" title="14.3.1 cloud-config-client-3366"></a>14.3.1 cloud-config-client-3366</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220739955.png" alt="image-20211105220739955"></p>
<h4 id="14-3-2-设计思想"><a href="#14-3-2-设计思想" class="headerlink" title="14.3.2 设计思想"></a>14.3.2 设计思想</h4><blockquote>
<p>1）利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置(不推荐)</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220807264.png" alt="image-20211105220807264"></p>
<blockquote>
<p>2）利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，而刷新所有客户端的配置(推荐)</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220905238.png" alt="image-20211105220905238"></p>
<p>图二的架构显然更加适合，图一不适合的原因如下:</p>
<ol>
<li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li>
<li>破坏了微服务各节点的对等性。</li>
<li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li>
</ol>
<h4 id="14-3-3-修改配置"><a href="#14-3-3-修改配置" class="headerlink" title="14.3.3 修改配置"></a>14.3.3 修改配置</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221103350.png" alt="image-20211105221103350"></p>
<h4 id="14-3-4-测试"><a href="#14-3-4-测试" class="headerlink" title="14.3.4 测试"></a>14.3.4 测试</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221131398.png" alt="image-20211105221131398"></p>
<h3 id="14-4-Bus动态刷新定点通知"><a href="#14-4-Bus动态刷新定点通知" class="headerlink" title="14.4 Bus动态刷新定点通知"></a>14.4 Bus动态刷新定点通知</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221221929.png" alt="image-20211105221221929"></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#只通知3355，不通知3366</span>
curl -X POST <span class="token string">"http://localhost:3344/actuator/bus-refresh/config-client:3355"</span>
</code></pre>
<h2 id="15-SpringCloud-Stream消息驱动"><a href="#15-SpringCloud-Stream消息驱动" class="headerlink" title="15.SpringCloud Stream消息驱动"></a>15.SpringCloud Stream消息驱动</h2><p>中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/</a></p>
<h3 id="15-1-消息驱动概述"><a href="#15-1-消息驱动概述" class="headerlink" title="15.1 消息驱动概述"></a>15.1 消息驱动概述</h3><blockquote>
<p>SpringCloudStream是什么</p>
</blockquote>
<p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p>
<p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream中binder对象交互。<br>通过我们配置来binding(绑定) ，而 Spring Cloud Stream 的 binder对象负责与消息中间件交互。<br>所以，我们只需要搞清楚如何与 Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p>
<p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。<br>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p>
<p>目前仅支持RabbitMQ、Kafka。</p>
<p>总结：<font>屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型</font></p>
<h3 id="15-2-设计思想"><a href="#15-2-设计思想" class="headerlink" title="15.2 设计思想"></a>15.2 设计思想</h3><h4 id="15-2-1-标准MQ"><a href="#15-2-1-标准MQ" class="headerlink" title="15.2.1 标准MQ"></a>15.2.1 标准MQ</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221822546.png" alt="image-20211105221822546"></p>
<h4 id="15-2-2-为什么用Cloud-Stream"><a href="#15-2-2-为什么用Cloud-Stream" class="headerlink" title="15.2.2 为什么用Cloud Stream"></a>15.2.2 为什么用Cloud Stream</h4><p>比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，<br>像RabbitMQ有exchange，kafka有Topic和Partitions分区。</p>
<p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了<strong>一种解耦合</strong>的方式。</p>
<blockquote>
<p>stream凭什么可以统一底层差异？</p>
</blockquote>
<p>在没有<strong>绑定器</strong>这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性<br>通过定义绑定器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。<br>通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</p>
<p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222117356.png" alt="image-20211105222117356"></p>
<p>Binder可以生成Binding，Binding用来绑定消息容器的生产者和消费者，它有两种类型，<code>INPUT</code>和<code>OUTPUT</code>，INPUT对应于消费者，OUTPUT对应于生产者。</p>
<blockquote>
<p>发布-订阅模式</p>
</blockquote>
<p>Stream中的消息通信方式遵循了发布-订阅模式</p>
<p>Topic主题进行广播:</p>
<ul>
<li>在RabbitMQ就是Exchange</li>
<li>在Kakfa中就是Topic</li>
</ul>
<h3 id="15-3-Stream标准流程套路"><a href="#15-3-Stream标准流程套路" class="headerlink" title="15.3 Stream标准流程套路"></a>15.3 Stream标准流程套路</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222324954.png" alt="image-20211105222324954"></p>
<p><code>binder</code>:很方便的连接中间件，屏蔽差异</p>
<p><code>Channel</code>:通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p>
<p><code>Source和Sink</code>:简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222453582.png" alt="image-20211105222453582"></p>
<h3 id="15-4-模块构建"><a href="#15-4-模块构建" class="headerlink" title="15.4 模块构建"></a>15.4 模块构建</h3><ol>
<li>cloud-stream-rabbitmq-provider8801， 作为生产者进行发消息模块</li>
<li>cloud-stream-rabbitmq-consumer8802，作为消息接收模块1</li>
<li>cloud-stream-rabbitmq-consumer8803  作为消息接收模块2</li>
</ol>
<p>启动7001-&gt;8801-&gt;8802-&gt;8803</p>
<p>运行后有两个问题:</p>
<ul>
<li>有重复消费问题</li>
<li>消息持久化问题</li>
</ul>
<h3 id="15-5-分组消费与持久化"><a href="#15-5-分组消费与持久化" class="headerlink" title="15.5 分组消费与持久化"></a>15.5 分组消费与持久化</h3><blockquote>
<p> 重复消费问题</p>
</blockquote>
<p>目前是8802/8803同时都收到了，存在重复消费问题<img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223034102.png" alt="image-20211105223034102"></p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>分组和持久化属性group</p>
<p>如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息，<br>那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。<br>这时我们就可以使用Stream中的消息分组来解决</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211105223226628.png" alt="image-20211105223226628" style="zoom:67%;">

<p>注意在Stream中处于<strong>同一个group中的多个消费者是竞争关系</strong>，就能够保证消息只会被其中一个应用消费一次。<br>不同组是可以全面消费的(重复消费)，<br>同一组内会发生竞争关系，只有其中一个可以消费。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223316082.png" alt="image-20211105223316082"></p>
<blockquote>
<p>持久化</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223350659.png" alt="image-20211105223350659"></p>
</body></html>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
</search>
