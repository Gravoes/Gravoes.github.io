<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mysql基础</title>
    <url>/2021/10/26/Mysql%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1></body></html>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq知识点</title>
    <url>/2021/10/26/Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h2 id="1-Rabbitmq知识点"><a href="#1-Rabbitmq知识点" class="headerlink" title="1.Rabbitmq知识点"></a>1.Rabbitmq知识点</h2><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包 裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是 一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收， 存储和转发消息数据。</p>
<span id="more"></span>

<h3 id="1-1-MQ的相关概念"><a href="#1-1-MQ的相关概念" class="headerlink" title="1.1 MQ的相关概念"></a>1.1 MQ的相关概念</h3><h4 id="1-1-1-什么是MQ"><a href="#1-1-1-什么是MQ" class="headerlink" title="1.1.1 什么是MQ?"></a>1.1.1 什么是MQ?</h4><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“<strong>逻辑解耦+物理解耦</strong>”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p>
<h4 id="1-1-2-为什么要用MQ？"><a href="#1-1-2-为什么要用MQ？" class="headerlink" title="1.1.2 为什么要用MQ？"></a>1.1.2 为什么要用MQ？</h4><blockquote>
<p>1.流量消峰</p>
</blockquote>
<p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用<u>消息队列做缓冲</u>，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p>
<blockquote>
<p>2.应用解耦</p>
</blockquote>
<p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合 调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于 消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在 这几分钟的时间里，<u>物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成</u>。当物流 系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026110950724.png" alt="image-20211026110950724"></p>
<blockquote>
<p>3.异步处理</p>
</blockquote>
<p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可 以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题， <u>A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此 消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api</u>。同样 B 服务也不 用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026111104991.png" alt="image-20211026111104991"></p>
<h4 id="1-1-3-MQ的分类"><a href="#1-1-3-MQ的分类" class="headerlink" title="1.1.3 MQ的分类"></a>1.1.3 MQ的分类</h4><blockquote>
<p>1.ActiveMQ</p>
</blockquote>
<ul>
<li><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现</p>
<p>高可用性，消息可靠性较 低的概率丢失数据 </p>
</li>
<li><p>缺点:官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用。</p>
</li>
</ul>
<blockquote>
<p>2.Kafka</p>
</blockquote>
<p>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为大数据而生的消息中间件， 以其<strong>百万级 TPS 的吞吐量</strong>名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥 着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。</p>
<ul>
<li>优点: 性能卓越，单机写入 TPS 约在百万条/秒，最大的优点，就是吞吐量高。时效性 ms 级可用性非 常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采 用 Pull 方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方 Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持： 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</li>
<li>缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消 息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序， 但是一台代理宕机后，就会产生消息乱序，社区更新较慢；</li>
</ul>
<blockquote>
<p>3.RocketMQ</p>
</blockquote>
<p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一 些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场 景。</p>
<ul>
<li>优点:单机吞吐量十万级,可用性非常高，分布式架构,消息可以做到 0 丢失,MQ 功能较为完善，还是分 布式的，扩展性好,支持 10 亿级别的消息堆积，不会因为堆积导致性能下降,源码是 java 我们可以自己阅 读源码，定制自己公司的 MQ</li>
<li>缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口,有些系统要迁移需要修改大量代码</li>
</ul>
<blockquote>
<p>4.RabbitMQ</p>
</blockquote>
<p>2007 年发布，是一个在 AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p>
<ul>
<li>优点:由于 erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备,健壮、稳定、易 用、跨平台、支持多种语言 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用,社区活跃度高；更新频率相当高</li>
<li>缺点：商业版需要收费,学习成本较高</li>
</ul>
<h4 id="1-1-4-MQ-的选择"><a href="#1-1-4-MQ-的选择" class="headerlink" title="1.1.4 MQ 的选择"></a>1.1.4 MQ 的选择</h4><blockquote>
<p>1.Kafka</p>
</blockquote>
<p>Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集 和传输，适合<strong>产生大量数据</strong>的互联网服务的数据收集业务。<strong>大型公司</strong>建议可以选用，如果有日志采集功能， 肯定是首选 kafka 了。</p>
<blockquote>
<p>2.RocketMQ</p>
</blockquote>
<p><strong>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款</strong>，以及业务削 峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选RocketMQ。</p>
<blockquote>
<p>3.RabbitMQ</p>
</blockquote>
<p>结合 erlang 语言本身的并发优势，性能好<strong>时效性微秒级</strong>，社<strong>区活跃度也比较高</strong>，管理界面用起来十分 方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。</p>
<h3 id="1-2-RabbitMQ"><a href="#1-2-RabbitMQ" class="headerlink" title="1.2 RabbitMQ"></a>1.2 RabbitMQ</h3><h4 id="1-2-1-RabbitMQ-的概念"><a href="#1-2-1-RabbitMQ-的概念" class="headerlink" title="1.2.1 RabbitMQ 的概念"></a>1.2.1 RabbitMQ 的概念</h4><p>RabbitMQ 是一个消息中间件：它<strong>接受并转发消息</strong>。你可以把它当做一个快递站点，当你要发送一个包 裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是 一个<strong>快递站</strong>，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收， 存储和转发消息数据。</p>
<h4 id="1-2-2-四大核心概念"><a href="#1-2-2-四大核心概念" class="headerlink" title="1.2.2 四大核心概念"></a>1.2.2 四大核心概念</h4><p><code>生产者</code>: 产生数据发送消息的程序是生产者</p>
<p><code>交换机</code>: 交换机是 RabbitMQ 非常重要的一个部件，<u>一方面它接收来自生产者的消息，另一方面它将消息 推送到队列中</u>。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推 送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p>
<p><code>队列</code>: 队列是 RabbitMQ 内部使用的一种<u>数据结构</u>，尽管消息流经 RabbitMQ 和应用程序，但它们只能存 储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的<u>消息缓冲区</u>。许多生产者可 以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p>
<p><code>消费者</code>:消费与接收具有相似的含义。消费者大多时候是一个<u>等待接收消息的程序</u>。请注意生产者，消费 者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p>
<h4 id="1-2-3-RabbitMQ-核心部分"><a href="#1-2-3-RabbitMQ-核心部分" class="headerlink" title="1.2.3 RabbitMQ 核心部分"></a>1.2.3 RabbitMQ 核心部分</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026112550047.png" alt="image-20211026112550047"></p>
<h4 id="1-2-4-各个名词介绍"><a href="#1-2-4-各个名词介绍" class="headerlink" title="1.2.4 各个名词介绍"></a>1.2.4 各个名词介绍</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026112621011.png" alt="image-20211026112621011"></p>
<p><code>Broker</code>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker</p>
<p><strong>Virtual host</strong>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似 于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出 多个 vhost，每个用户在自己的 vhost 创建 exchange／queue </p>
<p><code>Connection</code>：publisher／consumer 和 broker 之间的 TCP 连接</p>
<p><code>Channel</code>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP  Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程 序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客 户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。<u>Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</u></p>
<p><code>Exchange</code>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发 消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout  (multicast)</p>
<p><code>Queue</code>：消息最终被送到这里等待 consumer 取走</p>
<p><code>Binding</code>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保 存到 exchange 中的查询表中，用于 message 的分发依</p>
<h4 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5 安装"></a>1.2.5 安装</h4><blockquote>
<p>1.官网地址</p>
</blockquote>
<p><a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p>
<blockquote>
<p>2.文件上传</p>
</blockquote>
<p>上传到/usr/local/software 目录下(如果没有 software 需要自己创建)</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026113007870.png" alt="image-20211026113007870"></p>
<blockquote>
<p>3.安装文件(分别按照以下顺序安装)</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash">rpm -ivh erlang-21.3-1.el7.x86_64.rpm
yum <span class="token function">install</span> socat -y
rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm
</code></pre>
<blockquote>
<p>4.常用命令(按照以下顺序执行)</p>
</blockquote>
<p>1.添加开机启动 RabbitMQ 服务</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">chkconfig</span> rabbitmq-server on
</code></pre>
<p>2.启动服务</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server start
</code></pre>
<p>此处可能会启动失败，首先要确保端口号15762和5672是打开状态，可以选择直接关闭防火墙或者放行端口。如果是阿里云用户需要先在安全组里放行这两个端口号。</p>
<p>1)查看防火墙状态（running表示正常运行）</p>
<pre class=" language-bash"><code class="language-bash">systemctl status firewalld
</code></pre>
<p>2)放行端口（返回success表示成功）–permanent:永久生效</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#开启15672端口</span>
firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>15672/tcp --permanent
firewall-cmd --reload <span class="token comment" spellcheck="true">#重启防火墙</span>
firewall-cmd --zone<span class="token operator">=</span>public --query-port<span class="token operator">=</span>15672/tcp <span class="token comment" spellcheck="true">#查看状态</span>

<span class="token comment" spellcheck="true">#关闭15672端口</span>
firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span>15672/tcp --permanent
</code></pre>
<p>防火墙开闭：</p>
<pre class=" language-bash"><code class="language-bash">1、启动服务：systemctl start firewalld.service
2、关闭服务：systemctl stop firewalld.service
3、重启服务：systemctl restart firewalld.service
4、显示服务的状态：systemctl status firewalld.service
5、开机自动启动：systemctl <span class="token function">enable</span> firewalld.service
6、禁用开机自动启动：systemctl disable firewalld.service
</code></pre>
<p>3.查看服务状态</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server status
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026114842550.png" alt="image-20211026114842550"></p>
<p>4.停止服务(选择执行)</p>
<pre class=" language-bash"><code class="language-bash">/sbin/service rabbitmq-server stop
</code></pre>
<p>5.开启 web 管理插件</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-plugins <span class="token function">enable</span> rabbitmq_management
</code></pre>
<p>6.添加一个新的用户</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建账号</span>
rabbitmqctl add_user admin 123
<span class="token comment" spellcheck="true">#设置用户角色</span>
rabbitmqctl set_user_tags admin administrator
<span class="token comment" spellcheck="true">#设置用户权限</span>
rabbitmqctl set_permissions -p <span class="token string">"/"</span> admin <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>
<span class="token comment" spellcheck="true">#查看用户和角色</span>
rabbitmqctl list_users
</code></pre>
<p>7.浏览器登录到47.113.221.239：15672（此处输入自己的ip地址或者阿里云）</p>
<p>输入账号：admin和密码：123</p>
<p>8.重置命令（可选）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#关闭应用的命令为</span>
rabbitmqctl stop_app
<span class="token comment" spellcheck="true">#清除的命令为</span>
rabbitmqctl reset
<span class="token comment" spellcheck="true">#重新启动命令为</span>
rabbitmqctl start_app
</code></pre>
<h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2.Hello World"></a>2.Hello World</h2><p>在本教程的这一部分中，我们将用 Java 编写两个程序。发送单个消息的生产者和接收消息并打印 出来的消费者。我们将介绍 Java API 中的一些细节。</p>
<p> 在下图中，“ P”是我们的生产者，“ C”是我们的消费者。中间的框是一个队列-RabbitMQ 代 表使用者保留的消息缓冲区</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026115448031.png" alt="image-20211026115448031"></p>
<h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h3><p>创建空工程，并新建一个maven项目</p>
<blockquote>
<p>pom依赖</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--指定 jdk 编译版本--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--rabbitmq 依赖客户端--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--操作文件流的一个依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- logback --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0-alpha5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- slf4j --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0-alpha1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="2-2-消息生产者"><a href="#2-2-消息生产者" class="headerlink" title="2.2 消息生产者"></a>2.2 消息生产者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//定义消息队列名称</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建一个连接工厂</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//channel实现了自动关闭接口，不需要手动close()</span>
        <span class="token comment" spellcheck="true">//创建连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取信道</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 生成一个队列
         * 参数：
         *  1.队列名称
         *  2.队列里面的消息是否持久化 默认消息存储在内存
         *  3.该队列是否只供一个消费者进行消费 
         *  4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除
         *  5.其他参数
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String message <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         *发送一个消息
         *  1.发送到那个交换机
         *  2.路由的 key 是哪个
         *  3.其他的参数信息
         *  4.发送消息的消息体
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-3-消息消费者"><a href="#2-3-消息消费者" class="headerlink" title="2.3 消息消费者"></a>2.3 消息消费者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//接收消息时的回调</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span>message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//只拿到消息体</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//取消消息时的回调</span>
        CancelCallback cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息消费被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 消费者消费消息
         *  1.消费哪个队列
         *  2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答
         *  3.消费者成功消费的回调
         *  4.消费者取消消费的回调
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="3-Work-Queues"><a href="#3-Work-Queues" class="headerlink" title="3.Work Queues"></a>3.Work Queues</h2><p>工作队列(又称任务队列)的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。 相反我们安排任务在之后执行。我们把任务封装为消息并将其发送到队列。在后台运行的工作进 程将弹出任务并最终执行作业。当有多个工作线程时，这些工作线程将一起处理这些任务。</p>
<h3 id="3-1-轮训分发消息"><a href="#3-1-轮训分发消息" class="headerlink" title="3.1 轮训分发消息"></a>3.1 轮训分发消息</h3><p>在这个案例中我们会启动两个工作线程，一个消息发送线程，我们来看看他们两个工作线程 是如何工作的。</p>
<h4 id="3-1-1-抽取工具类"><a href="#3-1-1-抽取工具类" class="headerlink" title="3.1.1 抽取工具类"></a>3.1.1 抽取工具类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Channel <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"47.113.221.239"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//channel实现了自动关闭接口，不需要手动close()</span>
        <span class="token comment" spellcheck="true">//创建连接</span>
        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//获取信道并返回</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-2-启动两个工作线程"><a href="#3-1-2-启动两个工作线程" class="headerlink" title="3.1.2 启动两个工作线程"></a>3.1.2 启动两个工作线程</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//接收消息时的回调</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//只拿到消息体</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//取消消息时的回调</span>
        CancelCallback cancelCallback <span class="token operator">=</span> consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerTag<span class="token operator">+</span><span class="token string">"消费者取消消费接口回调逻辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2 消费者启动等待消费......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-3-启动一个发送线程"><a href="#3-1-3-启动一个发送线程" class="headerlink" title="3.1.3 启动一个发送线程"></a>3.1.3 启动一个发送线程</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送消息完成:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-1-4-结果展示"><a href="#3-1-4-结果展示" class="headerlink" title="3.1.4 结果展示"></a>3.1.4 结果展示</h4><p>通过程序执行发现生产者总共发送 4 个消息，消费者 1 和消费者 2 分别分得两个消息，并且是按照有序的一个接收一次消息</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026191613836.png" alt="image-20211026191613836"></p>
<h3 id="3-2-消息应答"><a href="#3-2-消息应答" class="headerlink" title="3.2 消息应答"></a>3.2 消息应答</h3><h4 id="3-2-1-概念"><a href="#3-2-1-概念" class="headerlink" title="3.2.1 概念"></a>3.2.1 概念</h4><p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成 了部分突然它挂掉了，会发生什么情况。RabbitMQ 一旦向消费者传递了一条消息，便立即将该消 息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续 发送给该消费这的消息，因为它无法接收到。</p>
<p>为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，消息应答就是:<strong>消费者在接 收到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。</strong></p>
<h4 id="3-2-2-自动应答"><a href="#3-2-2-自动应答" class="headerlink" title="3.2.2 自动应答"></a>3.2.2 自动应答</h4><p>消息发送后立即被认为已经传送成功，这种模式需要在**高吞吐量和数据传输安全性方面做权 衡,**因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失了</p>
<p>另一方面这种模式消费者那边可以传递过载的消息，<strong>没有对传递的消息数量进行限制</strong>， 当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，<strong>所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</strong></p>
<h4 id="3-2-3-消息应答方法"><a href="#3-2-3-消息应答方法" class="headerlink" title="3.2.3 消息应答方法"></a>3.2.3 消息应答方法</h4><ul>
<li><p>Channel.basicAck(用于确认)    </p>
<p>RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了</p>
</li>
<li><p>Channel.basicNack(用于否定确认)</p>
</li>
<li><p>Channel.basicReject(用于否定确认) 与 Channel.basicNack 相比少一个参数 </p>
<p>​    不处理该消息了直接拒绝，可以将其丢弃了</p>
</li>
</ul>
<h4 id="3-2-4-手动应答"><a href="#3-2-4-手动应答" class="headerlink" title="3.2.4 手动应答"></a>3.2.4 手动应答</h4><p><strong>手动应答的好处是可以批量应答并且减少网络拥堵</strong> </p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**
             *   1.消息标记 tag
             *   2.是否批量应答未应答消息
             * true:代表批量应答 ，false代表耽搁应答
             */</span>
         channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-2-5-消息自动重新入队"><a href="#3-2-5-消息自动重新入队" class="headerlink" title="3.2.5 消息自动重新入队"></a>3.2.5 消息自动重新入队</h4><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息 未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者 可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确 保不会丢失任何消息。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026211838134.png" alt="image-20211026211838134"></p>
<h4 id="3-2-6-消息手动应答代码"><a href="#3-2-6-消息手动应答代码" class="headerlink" title="3.2.6 消息手动应答代码"></a>3.2.6 消息手动应答代码</h4><p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改 为手动应答，消费者在上面代码的基础上增加下面画红色部分代码。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026212016355.png" alt="image-20211026212016355"></p>
<h3 id="3-3-RabbitMQ-持久化"><a href="#3-3-RabbitMQ-持久化" class="headerlink" title="3.3 RabbitMQ 持久化"></a>3.3 RabbitMQ 持久化</h3><h4 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1 概念"></a>3.3.1 概念</h4><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消 息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列 和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将<strong>队列和消息都标记</strong>为持久化。</p>
<h4 id="3-3-2-队列和消息持久化"><a href="#3-3-2-队列和消息持久化" class="headerlink" title="3.3.2 队列和消息持久化"></a>3.3.2 队列和消息持久化</h4><blockquote>
<p>队列持久化</p>
</blockquote>
<p>需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新 创建一个持久化的队列，不然就会出现错误</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>TASK_QUEUE_NAME<span class="token punctuation">,</span>durable<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>消息持久化 </p>
</blockquote>
<p>要想让消息实现持久化需要在消息生产者修改代码，<code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>添加这个属性。</p>
<pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>TASK_QUEUE_NAME<span class="token punctuation">,</span> MessageProperties<span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>将消息标记为持久化并不能完全保证不会丢失消息。尽管它告诉 RabbitMQ 将消息保存到磁盘，但是 这里依然存在当消息刚准备存储在磁盘的时候 但是还没有存储完，消息还在缓存的一个间隔点。此时并没 有真正写入磁盘。持久性保证并不强。</p>
<h4 id="3-3-4-不公平分发"><a href="#3-3-4-不公平分发" class="headerlink" title="3.3.4 不公平分发"></a>3.3.4 不公平分发</h4><p>在最开始的时候我们学习到 RabbitMQ 分发消息采用的轮训分发，但是在某种场景下这种策略并不是 很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2 处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间 处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是 RabbitMQ 并不知道这种情况它依然很公平的进行分发。</p>
<p>为了避免这种情况，我们可以在消费者中设置参数 channel.basicQos(1)</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//设置不公平分发</span>
   channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211026213553116.png" alt="image-20211026213553116"></p>
<p>意思就是如果这个任务我还没有处理完或者我还没有应答你，你先别分配给我，我目前只能处理一个 任务，然后 rabbitmq 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完 成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加 新的 worker 或者改变其他存储任务的策略。</p>
<h4 id="3-3-5-预取值（指定分配数）"><a href="#3-3-5-预取值（指定分配数）" class="headerlink" title="3.3.5 预取值（指定分配数）"></a>3.3.5 预取值（指定分配数）</h4><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basciQos</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
</code></pre>
<p>预取值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量， RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认</p>
<p>消息应答和 QoS 预取值对用户吞吐量有重大影响。通常，<strong>增加预取将提高向消费者传递消息的速度</strong>。虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理 的消息的数量也会增加，从而增加了消费者的 RAM 消耗(随机存取存储器)应该小心使用具有无限预处理 的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的 内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同 100 到 300 范 围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。预取值为 1 是最保守的。当然这 将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境 中。对于大多数应用来说，稍微高一点的值将是最佳的。</p>
<h2 id="4-发布确认"><a href="#4-发布确认" class="headerlink" title="4. 发布确认"></a>4. 发布确认</h2><h3 id="4-1-发布确认原理（针对消费者应答）"><a href="#4-1-发布确认原理（针对消费者应答）" class="headerlink" title="4.1 发布确认原理（针对消费者应答）"></a>4.1 发布确认原理（针对消费者应答）</h3><p>生产者将信道设置成 confirm 模式，一旦信道进入 confirm 模式，<strong>所有在该信道上面发布的 消息都将会被指派一个唯一的 ID</strong>(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队 列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传 给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。</p>
<p>confirm 模式最大的好处在于他是<strong>异步</strong>的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调 方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消 息，生产者应用程序同样可以在回调方法中处理该 nack 消息。</p>
<h3 id="4-2-发布确认的策略"><a href="#4-2-发布确认的策略" class="headerlink" title="4.2 发布确认的策略"></a>4.2 发布确认的策略</h3><h4 id="4-2-1-开启发布确认的方法"><a href="#4-2-1-开启发布确认的方法" class="headerlink" title="4.2.1 开启发布确认的方法"></a>4.2.1 开启发布确认的方法</h4><p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布 确认，都需要在 channel 上调用该方法</p>
<pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-2-2-单个确认发布"><a href="#4-2-2-单个确认发布" class="headerlink" title="4.2.2 单个确认发布"></a>4.2.2 单个确认发布</h4><p>这是一种简单的确认方式，它是一种<strong>同步确认发布</strong>的方式，也就是发布一个消息之后只有它 被确认发布，后续的消息才能继续发布,waitForConfirmsOrDie(long)这个方法只有在消息被确认 的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。</p>
<p>这种确认方式有一个最大的缺点就是:<strong>发布速度特别的慢</strong>，因为如果没有确认发布的消息就会 阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。当然对于某 些应用程序来说这可能已经足够了。</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//单个确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageIndividually</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//确认消息</span>
            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//if (flag){System.out.println("消息发送成功");}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个单独确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-3-批量确认发布"><a href="#4-2-3-批量确认发布" class="headerlink" title="4.2.3 批量确认发布"></a>4.2.3 批量确认发布</h4><p>上面那种方式非常慢，与单个等待确认消息相比，先发布一批消息然后一起确认可以极大地 提高吞吐量，当然这种方式的缺点就是:<strong>当发生故障导致发布出现问题时，不知道是哪个消息出现问题了</strong>，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种 方案仍然是同步的，也一样阻塞消息的发布。</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//批量确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//批量确认消息大小</span>
        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//未确认的消息个数</span>
        <span class="token keyword">int</span> outstandingMessageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            outstandingMessageCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//确认消息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingMessageCount <span class="token operator">==</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                outstandingMessageCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">//为了确保还有剩余没有确认消息 再次确认</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingMessageCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个批量确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-4-异步确认发布"><a href="#4-2-4-异步确认发布" class="headerlink" title="4.2.4 异步确认发布"></a>4.2.4 异步确认发布</h4><p>异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都没得说， 他是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功， 下面就让我们来详细讲解异步确认是怎么实现的</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027221240852.png" alt="image-20211027221240852"></p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//异步确认</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publishMessageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过UUID生成队列名</span>
        String queueName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//开启发布确认</span>
        channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 线程安全有序的一个跳跃表，适用于高并发的情况
         * 1.轻松的将序号与消息进行关联
         * 2.轻松批量删除条目 只要给到序列号
         * 3.支持并发访问
         */</span>
        ConcurrentSkipListMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> outstandingConfirms<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 确认收到消息的一个回调
         * 1.消息序列号
         * 2.true 可以确认小于等于当前序列号的消息
         */</span>
        ConfirmCallback ackCallback <span class="token operator">=</span> <span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//如果批量</span>
                ConcurrentNavigableMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span> confirmed <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">.</span><span class="token function">headMap</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//清除该部分未确认消息</span>
                confirmed<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//只清除当前序列号的消息</span>
                outstandingConfirms<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         *  未确认收到消息的一个回调
         */</span>
        ConfirmCallback nackCallback <span class="token operator">=</span> <span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> outstandingConfirms<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布的消息"</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">"未被确认，序列号"</span><span class="token operator">+</span>sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//添加一个异步确认的监听器</span>
        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span>ackCallback<span class="token punctuation">,</span> nackCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//统计时间</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MESSAGE_COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/**
             * channel.getNextPublishSeqNo()获取下一个消息的序列号
             * 通过序列号与消息体进行一个关联
             * 全部都是未确认的消息体
             */</span>
            outstandingConfirms<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">getNextPublishSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>queueName<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发布"</span> <span class="token operator">+</span> MESSAGE_COUNT <span class="token operator">+</span> <span class="token string">"个异步确认消息,耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-5-处理异步未确认消息"><a href="#4-2-5-处理异步未确认消息" class="headerlink" title="4.2.5 处理异步未确认消息"></a>4.2.5 处理异步未确认消息</h4><p>最好的解决的解决方案就是把未确认的消息放到一个基于内存的能被发布线程访问的队列， 比如说用 ConcurrentLinkedQueue 这个队列在 confirm callbacks 与发布线程之间进行消息的传递。</p>
<h4 id="4-2-6-三种发布确认速度对比"><a href="#4-2-6-三种发布确认速度对比" class="headerlink" title="4.2.6 三种发布确认速度对比"></a>4.2.6 三种发布确认速度对比</h4><ul>
<li><code>单独发布消息</code> 同步等待确认，简单，但吞吐量非常有限。 </li>
<li><code>批量发布消息</code> 批量同步等待确认，简单，合理的吞吐量，一旦出现问题但很难推断出是那条 消息出现了问题。 </li>
<li><code>异步处理</code>： 最佳性能和资源使用，在出现错误的情况下可以很好地控制，但是实现起来稍微难些</li>
</ul>
<h2 id="5-交换机"><a href="#5-交换机" class="headerlink" title="5.交换机"></a>5.交换机</h2><h3 id="5-1-Exchanges"><a href="#5-1-Exchanges" class="headerlink" title="5.1 Exchanges"></a>5.1 Exchanges</h3><h4 id="5-1-1-Exchanges-概念"><a href="#5-1-1-Exchanges-概念" class="headerlink" title="5.1.1  Exchanges 概念"></a>5.1.1  Exchanges 概念</h4><p>RabbitMQ 消息传递模型的核心思想是: <strong>生产者生产的消息从不会直接发送到队列</strong>。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。</p>
<p>相反，**生产者只能将消息发送到交换机(exchange)**，交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的消息。是应该把这些消 息放到特定队列还是说把他们到许多队列中还是说应该丢弃它们。这就的由交换机的类型来决定。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027221922038.png" alt="image-20211027221922038"></p>
<h4 id="5-1-2-Exchanges-的类型"><a href="#5-1-2-Exchanges-的类型" class="headerlink" title="5.1.2 Exchanges 的类型"></a>5.1.2 Exchanges 的类型</h4><p>直接(direct), 主题(topic) ,标题(headers) , 扇出(fanout)</p>
<h4 id="5-1-3-无名-exchange"><a href="#5-1-3-无名-exchange" class="headerlink" title="5.1.3 无名 exchange"></a>5.1.3 无名 exchange</h4><p>在不显式声明交换机的情况下，我们使用的都是RabbitMQ提供的默认交换机，我们通过空字符串””进行标识。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222250009.png" alt="image-20211027222250009"></p>
<p>第一个参数是交换机的名称。空字符串表示默认或无名称交换机：消息能路由发送到队列中其实 是由 routingKey(bindingkey)绑定 key 指定的，如果它存在的话</p>
<h3 id="5-2-临时队列"><a href="#5-2-临时队列" class="headerlink" title="5.2 临时队列"></a>5.2 临时队列</h3><p>每当我们连接到 Rabbit 时，我们都需要一个全新的空队列，为此我们可以创建一个具有随机名称 的队列，或者能让服务器为我们选择一个随机队列名称那就更好了。其次一旦我们断开了消费者的连接，队列将被自动删除。</p>
<p>创建临时队列方式：</p>
<pre class=" language-java"><code class="language-java">String queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如图所示：</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222511174.png" alt="image-20211027222511174"></p>
<h3 id="5-3-绑定-bindings"><a href="#5-3-绑定-bindings" class="headerlink" title="5.3 绑定(bindings)"></a>5.3 绑定(bindings)</h3><p>什么是 bingding 呢，binding 其实是 exchange 和 queue 之间的桥梁，它告诉我们 exchange 和那个队 列进行了绑定关系。比如说下面这张图告诉我们的就是 X 与 Q1 和 Q2 进行了绑定</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222535727.png" alt="image-20211027222535727"></p>
<h3 id="5-4-Fanout-Exchanges"><a href="#5-4-Fanout-Exchanges" class="headerlink" title="5.4 Fanout Exchanges"></a>5.4 Fanout Exchanges</h3><h4 id="5-4-1-Fanout-e介绍"><a href="#5-4-1-Fanout-e介绍" class="headerlink" title="5.4.1 Fanout e介绍"></a>5.4.1 Fanout e介绍</h4><p>Fanout 这种类型非常简单。正如从名称中猜到的那样，它是将接收到的所有消息广播到它知道的所有队列中。</p>
<h4 id="5-4-2-Fanout-实战"><a href="#5-4-2-Fanout-实战" class="headerlink" title="5.4.2 Fanout 实战"></a>5.4.2 Fanout 实战</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027222647186.png" alt="image-20211027222647186"></p>
<p> 消费者1号：ReceiveLogsFanout01 </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsFanout01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>FANOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 生成一个临时的队列，名称是随机的
         * 当消费者断开和该队列的连接，队列即被删除
         */</span>
        String queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将该队列与交换机进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//s2参数是routingKey，为空字符</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsFanout02</p>
<pre class=" language-java"><code class="language-java">代码同上
</code></pre>
<p>生产者：EmitLog 发送消息给两个消费者接收</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 声明一个交换机
         * 1.exchange 的名称
         * 2.exchange 的类型
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>BuiltinExchangeType<span class="token punctuation">.</span>FANOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            String message <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5-5-Direct-Exchanges"><a href="#5-5-Direct-Exchanges" class="headerlink" title="5.5 Direct Exchanges"></a>5.5 Direct Exchanges</h3><h4 id="5-5-1-Direct-介绍"><a href="#5-5-1-Direct-介绍" class="headerlink" title="5.5.1 Direct  介绍"></a>5.5.1 Direct  介绍</h4><p>Fanout 这种交换类型并不能给我们带来很大的灵活性-它只能进行无意识的 广播，在这里我们将使用 direct 这种类型来进行替换，这种类型的工作方式是，消息只去到它绑定的 routingKey 队列中去。</p>
<p>例如我们希望将日志消息写入磁盘的程序仅接收严重错误(errros)，而不存储哪些警告(warning)或信息(info)日志 消息避免浪费磁盘空间。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223632955.png" alt="image-20211027223632955"></p>
<p>在上面这张图中，我们可以看到 X 绑定了两个队列，绑定类型是 direct。队列 Q1 绑定键为 orange， 队列 Q2 绑定键有两个:一个绑定键为 black，另一个绑定键为 green。</p>
<p>在这种绑定情况下，生产者发布消息到 exchange 上，绑定键为 orange 的消息会被发布到队列 Q1。绑定键为 black和green 的消息会被发布到队列 Q2，其他消息类型的消息将被丢弃。</p>
<h4 id="5-5-3-多重绑定"><a href="#5-5-3-多重绑定" class="headerlink" title="5.5.3 多重绑定"></a>5.5.3 多重绑定</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223801999.png" alt="image-20211027223801999"></p>
<p>当然如果 exchange 的绑定类型是 direct，但是它绑定的多个队列的 key 如果都相同，在这种情 况下虽然绑定类型是 direct 但是它表现的就和 fanout 有点类似了，就跟广播差不多，如上图所示。</p>
<h4 id="5-5-4-代码实现"><a href="#5-5-4-代码实现" class="headerlink" title="5.5.4 代码实现"></a>5.5.4 代码实现</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027223902620.png" alt="image-20211027223902620"></p>
<p>消费者1号：ReceiveLogsDirect01</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsDirect01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个交换机</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个队列</span>
        String queueName <span class="token operator">=</span> <span class="token string">"console"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsDirect02</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsDirect02</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明一个交换机</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//枚举</span>
        <span class="token comment" spellcheck="true">//声明一个队列</span>
        String queueName <span class="token operator">=</span> <span class="token string">"disk"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//进行绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2等待接收消息，把接收到的打印在屏幕上。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//成功的回调函数</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>生产者：EmitLogDirect</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLogDirect</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建多个bindingKey</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"普通info信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span><span class="token string">"警告warning信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"严重error信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//遍历发送消息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKryEntry <span class="token operator">:</span> bindingKeyMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String bindingKey <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String message <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>bindingKey<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5-6-Topics-Exchanges"><a href="#5-6-Topics-Exchanges" class="headerlink" title="5.6 Topics Exchanges"></a>5.6 Topics Exchanges</h3><h4 id="5-6-1-之前类型的问题"><a href="#5-6-1-之前类型的问题" class="headerlink" title="5.6.1  之前类型的问题"></a>5.6.1  之前类型的问题</h4><p>尽管使用 direct 交换机改进了我们的系统，但是它仍然存在局限性-比方说我们想接收的日志类型有 <code>info.base</code> 和 <code>info.advantage</code>，某个队列只想 <code>info.base</code> 的消息，那这个时候 direct 就办不到了。这个时候 就只能使用 topic 类型</p>
<h4 id="5-6-2-Topic-的要求"><a href="#5-6-2-Topic-的要求" class="headerlink" title="5.6.2 Topic 的要求"></a>5.6.2 Topic 的要求</h4><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须满足一定的要求，它必须是一个单 词列表，以点号分隔开。这些单词可以是任意单词，比如说：<code>stock.usd.nyse</code>, <code>nyse.vmw</code>,  <code>quick.orange.rabbit</code>.这种类型的。当然这个单词列表最多不能超过 255 个字节。</p>
<p>在这个规则列表中，其中有两个替换符是大家需要注意:</p>
<ul>
<li>***(星号)可以代替一个单词**</li>
<li><strong>#(井号)可以替代零个或多个单词</strong></li>
</ul>
<h4 id="5-6-3-Topic-匹配案例"><a href="#5-6-3-Topic-匹配案例" class="headerlink" title="5.6.3 Topic 匹配案例"></a>5.6.3 Topic 匹配案例</h4><p>下图绑定关系如下</p>
<ul>
<li> Q1–&gt;绑定的是 </li>
<li>​    中间带 orange 带 3 个单词的字符串(<em>.orange.</em>) </li>
<li>Q2–&gt;绑定的是 <ul>
<li>​    最后一个单词是 rabbit 的 3 个单词(<em>.</em>.rabbit) </li>
<li>​    第一个单词是 lazy 的多个单词(lazy.#)</li>
</ul>
</li>
</ul>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027224544772.png" alt="image-20211027224544772"></p>
<table>
<thead>
<tr>
<th>消息</th>
<th>接受者</th>
</tr>
</thead>
<tbody><tr>
<td>quick.orange.rabbit</td>
<td>被队列 Q1Q2 接收到</td>
</tr>
<tr>
<td>lazy.orange.elephant</td>
<td>被队列 Q1Q2 接收到</td>
</tr>
<tr>
<td>quick.orange.fox</td>
<td>被队列 Q1 接收到</td>
</tr>
<tr>
<td>lazy.pink.rabbit</td>
<td>虽然满足Q2两个绑定但只被队列 Q2 接收一次</td>
</tr>
<tr>
<td>quick.brown.fox</td>
<td>不匹配任何绑定不会被任何队列接收到会被丢弃</td>
</tr>
<tr>
<td>quick.orange.male.rabbit</td>
<td>是四个单词不匹配任何绑定会被丢弃</td>
</tr>
<tr>
<td>lazy.orange.male.rabbit</td>
<td>是四个单词但匹配 Q2</td>
</tr>
<tr>
<td>lazy.brown.fox</td>
<td>被队列 Q2 接收到</td>
</tr>
</tbody></table>
<p>当队列绑定关系是下列这种情况时需要引起注意:</p>
<ul>
<li>当一个队列绑定键是#,那么这个队列将接收所有数据，就有点像 fanout 了</li>
<li>如果队列绑定键当中没有#和*出现，那么该队列绑定类型就是 direct 了</li>
</ul>
<h4 id="5-6-4-代码实现"><a href="#5-6-4-代码实现" class="headerlink" title="5.6.4 代码实现"></a>5.6.4 代码实现</h4><p>消费者1号：ReceiveLogsTopic01</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsTopic01</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明Q1队列绑定</span>
        String queueName <span class="token operator">=</span> <span class="token string">"Q1"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//绑定类型 </span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span>EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"*.orange.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Q1等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受队列"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumer <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者2号：ReceiveLogsTopic02</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveLogsTopic02</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明Q1队列绑定</span>
        String queueName <span class="token operator">=</span> <span class="token string">"Q2"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"*.*.rabbit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"lazy.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Q2等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收队列:"</span> <span class="token operator">+</span>queueName <span class="token operator">+</span> <span class="token string">"绑定建:"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">"消息:"</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumer <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>生产者：EmitLogTopic</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmitLogTopic</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"topic_logs"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建多个bindingKey</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKeyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * Q1-->绑定的是
         *      中间带 orange 带 3 个单词的字符串(*.orange.*)
         * Q2-->绑定的是
         *      最后一个单词是 rabbit 的 3 个单词(*.*.rabbit)
         *      第一个单词是 lazy 的多个单词(lazy.#)
         */</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.rabbit"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.elephant"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.fox"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q1 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.brown.fox"</span><span class="token punctuation">,</span><span class="token string">"被队列 Q2 接收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.pink.rabbit"</span><span class="token punctuation">,</span><span class="token string">"虽然满足两个绑定但只被队列 Q2 接收一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.brown.fox"</span><span class="token punctuation">,</span><span class="token string">"不匹配任何绑定不会被任何队列接收到会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"quick.orange.male.rabbit"</span><span class="token punctuation">,</span><span class="token string">"是四个单词不匹配任何绑定会被丢弃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bindingKeyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lazy.orange.male.rabbit"</span><span class="token punctuation">,</span><span class="token string">"是四个单词但匹配 Q2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//遍历发送消息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> bindingKryEntry <span class="token operator">:</span> bindingKeyMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String bindingKey <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String message <span class="token operator">=</span> bindingKryEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>EXCHANGE_NAME<span class="token punctuation">,</span>bindingKey<span class="token punctuation">,</span>null<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发出消息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="6-死信队列"><a href="#6-死信队列" class="headerlink" title="6.死信队列"></a>6.死信队列</h2><h3 id="6-1-死信的概念"><a href="#6-1-死信的概念" class="headerlink" title="6.1 死信的概念"></a>6.1 死信的概念</h3><p>死信，顾名思义就是无法被消费的消息，字面意思可以这样理 解，一般来说，producer 将消息投递到 broker 或者直接到 queue 里了，consumer 从 queue 取出消息 进行消费，但某些时候由于特定的原因导致 queue 中的某些消息无法被消费，这样的消息如果没有 后续的处理，就变成了死信，有死信自然就有了死信队列。</p>
<p>应用场景:为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息消费发生异常时，将消息投入死信队列中.还有比如说: <strong>用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</strong></p>
<h3 id="6-2-死信的来源"><a href="#6-2-死信的来源" class="headerlink" title="6.2 死信的来源"></a>6.2 死信的来源</h3><ul>
<li>消息 TTL(Time To Live) 过期</li>
<li>队列达到最大长度(队列满了，无法再添加数据到 mq 中）</li>
<li>消息被拒绝(basic.reject 或 basic.nack)并且 requeue=false.</li>
</ul>
<h3 id="6-3-死信代码实现"><a href="#6-3-死信代码实现" class="headerlink" title="6.3 死信代码实现"></a>6.3 死信代码实现</h3><h4 id="6-3-1-代码架构图"><a href="#6-3-1-代码架构图" class="headerlink" title="6.3.1 代码架构图"></a>6.3.1 代码架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211027225406132.png" alt="image-20211027225406132"></p>
<h4 id="6-3-2-消息-TTL-过期"><a href="#6-3-2-消息-TTL-过期" class="headerlink" title="6.3.2 消息 TTL 过期"></a>6.3.2 消息 TTL 过期</h4><p>生产者代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"normal_exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置消息的TTL时间(time to live)即消息过期时间 ms</span>
        AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//模拟发送10条信息</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String message <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>properties<span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者发送信息"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者 C1 代码(启动之后关闭该消费者 模拟其接收不到消息)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer01</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//普通交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"normal_exchange"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//死信交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"dead_exchange"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明普通和死信交换机类型</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明死信队列</span>
        String deadQueue <span class="token operator">=</span> <span class="token string">"dead_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//死信队列绑定死信交换机和routingKey</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//正常队列绑定死信队列信息</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//正常队列设置死信交换机</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//正常队列设置死信routingKey参数</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明正常队列</span>
        String normalQueue <span class="token operator">=</span> <span class="token string">"normal_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span>NORMAL_EXCHANGE<span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常队列等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C1接受到消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>normalQueue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费者 C2 代码(以上步骤完成后 启动 C2 消费者 它消费死信队列里面的消息)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer02</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//死信交换机名称</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"dead_exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Channel channel <span class="token operator">=</span> RabbitmqUtils<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明死信交换机类型</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">,</span> BuiltinExchangeType<span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//声明死信队列</span>
        String deadQueue <span class="token operator">=</span> <span class="token string">"dead_queue"</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//死信队列绑定死信交换机和routingKey</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"死信队列等待接收消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C2接受到消息"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>deadQueue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>consumerTag <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>流程：</p>
<p>生产者发送消息给正常交换机，进入正常队列，由于TTL过期，消费者1无法消费于是成为死信，发送给死信交换机，进入死信队列，有消费者2消费。</p>
<h4 id="6-3-3-队列达到最大长度"><a href="#6-3-3-队列达到最大长度" class="headerlink" title="6.3.3 队列达到最大长度"></a>6.3.3 队列达到最大长度</h4><ol>
<li>消息生产者代码去掉 TTL 属性</li>
<li> C1 消费者的参数添加以下代码</li>
</ol>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置正常队列的长度限制为6</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-max-length"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>；
</code></pre>
<h4 id="6-3-4-消息被拒"><a href="#6-3-4-消息被拒" class="headerlink" title="6.3.4 消息被拒"></a>6.3.4 消息被拒</h4><p> C1 消费者的参数添加以下代码</p>
<pre class=" language-java"><code class="language-java">DeliverCallback deliverCallback <span class="token operator">=</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">////requeue 设置为 false 代表拒绝重新入队 该队列如果配置了死信交换机将发送到死信队列中</span>
    channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEmvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="7-延迟队列"><a href="#7-延迟队列" class="headerlink" title="7.延迟队列"></a>7.延迟队列</h2><h3 id="7-1-延迟队列概念"><a href="#7-1-延迟队列概念" class="headerlink" title="7.1 延迟队列概念"></a>7.1 延迟队列概念</h3><p>延时队列,队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望 在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p>
<h3 id="7-2-延迟队列使用场景"><a href="#7-2-延迟队列使用场景" class="headerlink" title="7.2 延迟队列使用场景"></a>7.2 延迟队列使用场景</h3><ul>
<li>1.订单在十分钟之内未支付则自动取消 </li>
<li>2.新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。 </li>
<li>3.用户注册成功后，如果三天内没有登陆则进行短信提醒。 </li>
<li>4.用户发起退款，如果三天内没有得到处理则通知相关运营人员。 </li>
<li>5.预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议</li>
</ul>
<h3 id="7-3-RabbitMQ-中的-TTL"><a href="#7-3-RabbitMQ-中的-TTL" class="headerlink" title="7.3 RabbitMQ 中的 TTL"></a>7.3 RabbitMQ 中的 TTL</h3><p>TTL 是什么呢？TTL 是 RabbitMQ 中一个消息或者队列的属性，表明一条消息或者该队列中的所有 消息的最大存活时间，单位是毫秒。换句话说，如果一条消息设置了 TTL 属性或者进入了设置 TTL 属性的队列，那么这条消息如果在 TTL 设置的时间内没有被消费，则会成为”死信”。如果同时配置了队列的 TTL 和消息的 TTL，那么较小的那个值将会被使用，有两种方式设置 TTL。</p>
<h4 id="7-3-1-消息设置-TTL"><a href="#7-3-1-消息设置-TTL" class="headerlink" title="7.3.1 消息设置 TTL"></a>7.3.1 消息设置 TTL</h4><p>第一种方式便是针对每条消息设置 TTL</p>
<pre class=" language-java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span>correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
    correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serExpiration</span><span class="token punctuation">(</span>ttlTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="7-3-2-队列设置-TTL"><a href="#7-3-2-队列设置-TTL" class="headerlink" title="7.3.2 队列设置 TTL"></a>7.3.2 队列设置 TTL</h4><p>另一种是在创建队列的时候设置队列的“x-message-ttl”属性</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明队列的ttl</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="7-3-3-两者的区别"><a href="#7-3-3-两者的区别" class="headerlink" title="7.3.3 两者的区别"></a>7.3.3 两者的区别</h4><p>如果设置了队列的 TTL 属性，那么一旦<strong>消息过期，就会被队列丢弃</strong>(如果配置了死信队列被丢到死信队列中)，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为<strong>消息是否过期是在即将投递到消费者之前判定</strong>的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间；另外，还需要注意的一点是，如果不设置 TTL，表示消息永远不会过期，如果将 TTL 设置为 0，则表示除非此时可以 直接投递该消息到消费者，否则该消息将会被丢弃。</p>
<h3 id="7-4-整合springboot"><a href="#7-4-整合springboot" class="headerlink" title="7.4 整合springboot"></a>7.4 整合springboot</h3><h4 id="7-4-1-创建项目"><a href="#7-4-1-创建项目" class="headerlink" title="7.4.1 创建项目"></a>7.4.1 创建项目</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028230928247.png" alt="image-20211028230928247"></p>
<h4 id="7-4-2-导入依赖"><a href="#7-4-2-导入依赖" class="headerlink" title="7.4.2 导入依赖"></a>7.4.2 导入依赖</h4><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--RabbitMQ 依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--swagger--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--RabbitMQ 测试依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="7-4-3-配置文件"><a href="#7-4-3-配置文件" class="headerlink" title="7.4.3 配置文件"></a>7.4.3 配置文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">183.92.434.99</span>
<span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span>
<span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">admin</span>
<span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">123</span>
</code></pre>
<h4 id="7-4-4-添加-Swagger-配置类"><a href="#7-4-4-添加-Swagger-配置类" class="headerlink" title="7.4.4 添加 Swagger 配置类"></a>7.4.4 添加 Swagger 配置类</h4><p>不用做任何修改</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Docket <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"webApi"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> ApiInfo <span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"rabbitmq 接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"本文档描述了 rabbitmq 微服务接口定义"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Jaqen"</span><span class="token punctuation">,</span> <span class="token string">"http://gravoes.github.io"</span><span class="token punctuation">,</span>
                        <span class="token string">"2321076768@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="7-5-队列-TTL"><a href="#7-5-队列-TTL" class="headerlink" title="7.5 队列 TTL"></a>7.5 队列 TTL</h3><h4 id="7-5-1-代码架构图"><a href="#7-5-1-代码架构图" class="headerlink" title="7.5.1 代码架构图"></a>7.5.1 代码架构图</h4><p>创建两个队列 QA 和 QB，两者队列 TTL 分别设置为 10S 和 40S，然后在创建一个交换机 X 和死信交 换机 Y，它们的类型都是 direct，创建一个死信队列 QD，它们的绑定关系如下：</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231129674.png" alt="image-20211028231129674"></p>
<h4 id="7-5-2-配置文件类代码"><a href="#7-5-2-配置文件类代码" class="headerlink" title="7.5.2 配置文件类代码"></a>7.5.2 配置文件类代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TtlQueueConfig</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//正常交换机和队列</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NORMAL_EXCHANGE <span class="token operator">=</span> <span class="token string">"X"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_A <span class="token operator">=</span> <span class="token string">"QA"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_B <span class="token operator">=</span> <span class="token string">"QB"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//public static final String QUEUE_C = "QC";</span>

    <span class="token comment" spellcheck="true">//死信交换机和队列</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_EXCHANGE <span class="token operator">=</span> <span class="token string">"Y"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_D <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//声明正常交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">normalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>NORMAL_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">deadExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A ttl为10s 并绑定到对应的死信交换机上</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列绑定的死信交换机</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列的死信路由key</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明队列的TTL</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A绑定正常X交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueABindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueA"</span><span class="token punctuation">)</span> Queue queueA<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列B ttl为40s 并绑定到对应的死信交换机上</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列绑定的死信交换机</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明当前队列的死信路由key</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//声明队列的TTL</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_B<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明队列A绑定正常X交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueB"</span><span class="token punctuation">)</span> Queue queueB<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信队列QD</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">queueD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明死信队列绑定死信交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueDBindingY</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueD"</span><span class="token punctuation">)</span> Queue queueD<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadExchange"</span><span class="token punctuation">)</span> DirectExchange yExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>yExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="7-5-3-消息生产者代码"><a href="#7-5-3-消息生产者代码" class="headerlink" title="7.5.3 消息生产者代码"></a>7.5.3 消息生产者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/ttl"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMsgController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsg/{message}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{}，发送一条消息给两个队列：{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XA"</span><span class="token punctuation">,</span><span class="token string">"消息来自ttl为10s的队列"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XB"</span><span class="token punctuation">,</span><span class="token string">"消息来自ttl为40s的队列"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-5-4-消息消费者代码"><a href="#7-5-4-消息消费者代码" class="headerlink" title="7.5.4 消息消费者代码"></a>7.5.4 消息消费者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"QD"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>
        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{}，收到死信队列信息：{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>通过浏览器发送请求：<a href="http://localhost:8080/ttl/sendMsg/%E5%98%BB%E5%98%BB%E5%98%BB">http://localhost:8080/ttl/sendMsg/嘻嘻嘻</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231826012.png" alt="image-20211028231826012"></p>
<p>第一条消息在 10S 后变成了死信消息，然后被消费者消费掉，第二条消息在 40S 之后变成了死信消息， 然后被消费掉，这样一个延时队列就打造完成了。</p>
<p>不过，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有 10S 和 40S 两个时间选项，如果需要一个小时后处理，那么就需要增加 TTL 为一个小时的队列，如果是预定会议室然 后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？</p>
<h3 id="7-6-延时队列优化"><a href="#7-6-延时队列优化" class="headerlink" title="7.6 延时队列优化"></a>7.6 延时队列优化</h3><h4 id="7-6-1-代码架构图"><a href="#7-6-1-代码架构图" class="headerlink" title="7.6.1 代码架构图"></a>7.6.1 代码架构图</h4><p>在这里新增了一个队列 QC,绑定关系如下,该队列不设置 TTL 时间</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028231916938.png" alt="image-20211028231916938"></p>
<h4 id="7-6-2-配置文件类代码"><a href="#7-6-2-配置文件类代码" class="headerlink" title="7.6.2 配置文件类代码"></a>7.6.2 配置文件类代码</h4><p>在上述配置中额外添加QC队列</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//额外添加一个QC</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Queue <span class="token function">queueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>QUEUE_C<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>DEAD_EXCHANGE<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span><span class="token string">"YD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//绑定交换机</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> Binding <span class="token function">queueCBindingX</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"queueC"</span><span class="token punctuation">)</span> Queue queueC<span class="token punctuation">,</span>
                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"normalExchange"</span><span class="token punctuation">)</span> DirectExchange xExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>xExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"XC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-6-3-消息生产者代码"><a href="#7-6-3-消息生产者代码" class="headerlink" title="7.6.3 消息生产者代码"></a>7.6.3 消息生产者代码</h4><p>在controller中添加</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendExpirationMsg/{message}/{ttlTime}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> String message<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"ttlTime"</span><span class="token punctuation">)</span> String ttlTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span> correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>ttlTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},发送一条时长{}毫秒 TTL 信息给队列 C:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ttlTime<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>发起请求:</p>
<p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E6%B6%88%E6%81%AFone/20000">http://localhost:8080/ttl/sendExpirationMsg/消息one/20000</a></p>
<p><a href="http://localhost:8080/ttl/sendExpirationMsg/%E6%B6%88%E6%81%AFtwo/2000">http://localhost:8080/ttl/sendExpirationMsg/消息two/2000</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028232742500.png" alt="image-20211028232742500"></p>
<p>此时消息队列是先进先出，所以会造成阻塞，因为 RabbitMQ 只会检查第一个消息是否过期，如果过期则丢到死信队列， 如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行。</p>
<h3 id="7-7-Rabbitmq-插件实现延迟队列"><a href="#7-7-Rabbitmq-插件实现延迟队列" class="headerlink" title="7.7 Rabbitmq 插件实现延迟队列"></a>7.7 Rabbitmq 插件实现延迟队列</h3><p>如果不能实现在消息粒度上的 TTL，并使其在设置的 TTL 时间 及时死亡，就无法设计成一个通用的延时队列。</p>
<h4 id="7-7-1-安装延时队列插件"><a href="#7-7-1-安装延时队列插件" class="headerlink" title="7.7.1 安装延时队列插件"></a>7.7.1 安装延时队列插件</h4><ol>
<li><p>在官网<a href="https://www.rabbitmq.com/community-plugins.html%E4%B8%8B%E8%BD%BD">https://www.rabbitmq.com/community-plugins.html下载</a> rabbitmq_delayed_message_exchange 插件.</p>
</li>
<li><p>解压放到当前目录下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins
</code></pre>
</li>
<li><p>执行下面命令让该插件生效</p>
<pre class=" language-bnash"><code class="language-bnash">rabbitmq-plugins enable rabbitmq_delayed_message_exchange
</code></pre>
</li>
<li><p>重启rabbitmq</p>
<pre class=" language-bash"><code class="language-bash">systemctl restart rabbitmq-server
</code></pre>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028233541142.png" alt="image-20211028233541142"></p>
<h4 id="7-7-2-代码架构图"><a href="#7-7-2-代码架构图" class="headerlink" title="7.7.2 代码架构图"></a>7.7.2 代码架构图</h4></li>
</ol>
<p>在这里新增了一个队列 delayed.queue,一个自定义交换机 delayed.exchange，绑定关系如下:</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028233632315.png" alt="image-20211028233632315"></p>
<h4 id="7-7-3-配置文件类代码"><a href="#7-7-3-配置文件类代码" class="headerlink" title="7.7.3 配置文件类代码"></a>7.7.3 配置文件类代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedQueueConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delayed.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delayed.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delayed.routingKey"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Queue <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//自定义延迟交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> CustomExchange <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//自定义交换机类型</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span><span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">bindingDelayedQueue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                       <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayedExchange"</span><span class="token punctuation">)</span> CustomExchange delayedExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>delayedExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAYED_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="7-7-4-消息生产者代码"><a href="#7-7-4-消息生产者代码" class="headerlink" title="7.7.4 消息生产者代码"></a>7.7.4 消息生产者代码</h4><p>加入到controller中</p>
<pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendDelayMsg/{message}/{delayTime}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String message<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@PathVariable</span> Integer delayTime<span class="token punctuation">)</span><span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"delayed.exchange"</span><span class="token punctuation">,</span><span class="token string">"delayed.routingKey"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span>correlationData <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
            correlationData<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> correlationData<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" 当 前 时 间 ： {}, 发送一条延迟 {} 毫秒的信息给队列 delayed.queue:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>delayTime<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="7-7-5-消息消费者代码"><a href="#7-7-5-消息消费者代码" class="headerlink" title="7.7.5 消息消费者代码"></a>7.7.5 消息消费者代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayConsumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delayed.queue"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DELAYED_QUEUE_NAME<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveDelayedQueue</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间:{},收到延时队列的消息:{}"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>发起请求：</p>
<p><a href="http://localhost:8080/ttl/sendDelayMsg/%E6%B6%88%E6%81%AFone/20000">http://localhost:8080/ttl/sendDelayMsg/消息one/20000</a></p>
<p><a href="http://localhost:8080/ttl/sendDelayMsg/%E6%B6%88%E6%81%AFtwo/2000">http://localhost:8080/ttl/sendDelayMsg/消息two/2000</a></p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211028234149325.png" alt="image-20211028234149325"></p>
<p>第二个消息被先消费掉了，符合预期</p>
<h3 id="7-8-总结"><a href="#7-8-总结" class="headerlink" title="7.8 总结"></a>7.8 总结</h3><p>延时队列在需要延时处理的场景下非常有用，使用 RabbitMQ 来实现延时队列可以很好的利用 RabbitMQ 的特性，如：<strong>消息可靠发送</strong>、<strong>消息可靠投递</strong>、<strong>死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃</strong>。另外，通过 RabbitMQ 集群的特性，可以很好的<strong>解决单点故障</strong>问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</p>
<p>当然，延时队列还有很多其它选择，比如利用 Java 的 DelayQueue，利用 Redis 的 zset，利用 Quartz 或者利用 kafka 的时间轮，这些方式各有特点,看需要适用的场景</p>
<h2 id="8-发布确认高级"><a href="#8-发布确认高级" class="headerlink" title="8. 发布确认高级"></a>8. 发布确认高级</h2><p>在生产环境中由于一些不明原因，导致 rabbitmq 重启，在 RabbitMQ 重启期间生产者消息投递失败， 导致消息丢失，需要手动处理和恢复。于是，我们开始思考，如何才能进行 RabbitMQ 的消息可靠投递呢？ 特别是在这样比较极端的情况，RabbitMQ 集群不可用的时候，无法投递的消息该如何处理呢?</p>
<h3 id="8-1发布确认-针对交换机和队列"><a href="#8-1发布确认-针对交换机和队列" class="headerlink" title="8.1发布确认 (针对交换机和队列)"></a>8.1发布确认 (针对交换机和队列)</h3><h4 id="8-1-1-确认机制方案"><a href="#8-1-1-确认机制方案" class="headerlink" title="8.1.1 确认机制方案"></a>8.1.1 确认机制方案</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029150218088.png" alt="image-20211029150218088"></p>
<h4 id="8-1-2-配置文件"><a href="#8-1-2-配置文件" class="headerlink" title="8.1.2 配置文件"></a>8.1.2 配置文件</h4><p>在application.properties中添加</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">correlated</span>
</code></pre>
<p>启用发布确认模式；</p>
<p><code>correlated</code>：发布消息成功到交换器后会触发回调方法</p>
<h3 id="8-2-交换机和队列-路由-失联"><a href="#8-2-交换机和队列-路由-失联" class="headerlink" title="8.2 交换机和队列(路由)失联"></a>8.2 交换机和队列(路由)失联</h3><h4 id="8-2-1-添加配置类"><a href="#8-2-1-添加配置类" class="headerlink" title="8.2.1 添加配置类"></a>8.2.1 添加配置类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//注册交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">confirmExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//注册队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">confirmQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBindingEx</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>CONFIRM_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-2-消息生产者"><a href="#8-2-2-消息生产者" class="headerlink" title="8.2.2 消息生产者"></a>8.2.2 消息生产者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/confirm"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> MyCallBack myCallBack<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>myCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * true：交换机无法将消息进行路由时，会将该消息返回给生产者
         * false：如果发现消息无法进行路由，则直接丢弃
         */</span>
        <span class="token comment" spellcheck="true">//rabbitTemplate.setMandatory(true);//也可以在properties</span>
        <span class="token comment" spellcheck="true">//设置回退消息交给谁处理</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span>myCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMsg/{message}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//指定消息id为1</span>
        CorrelationData correlationData1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String routingKey1 <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">,</span>routingKey1<span class="token punctuation">,</span>message<span class="token operator">+</span>routingKey1<span class="token punctuation">,</span>correlationData1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//指定消息id为2</span>
        CorrelationData correlationData2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String routingKey2 <span class="token operator">=</span> <span class="token string">"key2"</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">,</span>routingKey2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>message<span class="token operator">+</span>routingKey2<span class="token punctuation">,</span>correlationData2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息内容：{}"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-3-回调接口"><a href="#8-2-3-回调接口" class="headerlink" title="8.2.3 回调接口"></a>8.2.3 回调接口</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallBack</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span>RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 当交换机宕机的一个回调
     * @param correlationData 消息相关数据
     * @param ack   是否应答
     * @param cause 失败原因
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//判断correlationData是否为空</span>
        String id <span class="token operator">=</span> <span class="token punctuation">(</span>correlationData <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">?</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//确认收到</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"交换机已经收到id为：{}的消息"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"交换机未收到id为：{}的消息，原因是：{}"</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//当消息无法路由的时候的回调方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>ReturnedMessage returned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息:{}被服务器退回，退回原因:{}, 交换机是:{}, 路由 key:{}"</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>returned<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>returned<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-4-消息消费者"><a href="#8-2-4-消息消费者" class="headerlink" title="8.2.4 消息消费者"></a>8.2.4 消息消费者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConsumer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
 <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span><span class="token punctuation">{</span>
 String msg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受到队列 confirm.queue 消息:{}"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-5-交换机宕机"><a href="#8-2-5-交换机宕机" class="headerlink" title="8.2.5 交换机宕机"></a>8.2.5 交换机宕机</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029152256140.png" alt="image-20211029152256140"></p>
<p>我们故意设置一个错误的交换机名称，模拟交换机宕机</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029152408787.png" alt="image-20211029152408787"></p>
<p>可见，id为1的信息已经收到，但id为2的却收不到，正是因为找不到交换机</p>
<h4 id="8-2-6-路由宕机"><a href="#8-2-6-路由宕机" class="headerlink" title="8.2.6 路由宕机"></a>8.2.6 路由宕机</h4><blockquote>
<p>​    Mandatory 参数</p>
</blockquote>
<p>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的。那么如何让无法被路由的消息帮我想办法处理一下？最起码通知我一声，我好自己处理啊。通过设置 mandatory 参数可以在当消息传递过程中不可达目的地时将消息返回给生产者。</p>
<p>我们故意设置id为2的发送信息是错误的<code>routinKey</code>来模拟无法路由</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029153201540.png" alt="image-20211029153201540"></p>
<p>我们可以看到交换机正常接受，但key2出现了错误,我们得到了回退消息。</p>
<h3 id="8-3-备份交换机"><a href="#8-3-备份交换机" class="headerlink" title="8.3 备份交换机"></a>8.3 备份交换机</h3><p>有了 mandatory 参数和回退消息，我们获得了对无法投递消息的感知能力，有机会在生产者的消息无法被投递时发现并处理。</p>
<p>在 RabbitMQ 中，有一种备份交换机的机制存在，备份交换机可以理解为 RabbitMQ 中交换机的“备胎”，当我们为某一个交换机声明一个对应的备份交换机时， 就是为它创建一个备胎，当交换机接收到一条不可路由消息时，将会把这条消息转发到备份交换机中，由 备份交换机来进行转发和处理，通常备份交换机的类型为 Fanout ，这样就能把所有消息都投递到与其绑 定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都 进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p>
<h4 id="8-3-1-代码架构图"><a href="#8-3-1-代码架构图" class="headerlink" title="8.3.1 代码架构图"></a>8.3.1 代码架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029153444902.png" alt="image-20211029153444902"></p>
<h4 id="8-3-2-修改配置类"><a href="#8-3-2-修改配置类" class="headerlink" title="8.3.2 修改配置类"></a>8.3.2 修改配置类</h4><p>添加一个备份交换机和备份队列还有一个警告队列，并修改原先交换机与备份交换机的绑定关系</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"confirm.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"confirm.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIRM_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BACKUP_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"backup.exchange"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BACKUP_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"backup.queue"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String WARNING_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"warning.queue"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//注册交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DirectExchange <span class="token function">confirmExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//声明主交换机和备份交换机的绑定关系</span>
        ExchangeBuilder exchangeBuilder <span class="token operator">=</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>CONFIRM_EXCHANGE_NAME<span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"alternate-exchange"</span><span class="token punctuation">,</span>BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>DirectExchange<span class="token punctuation">)</span>exchangeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//注册队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">confirmQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>CONFIRM_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//绑定</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">queueBindingEx</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"confirmExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>CONFIRM_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加备份交换机</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> FanoutExchange <span class="token function">backupExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加备份队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">backupQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BACKUP_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//备份交换机绑定备份附列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">backupQueueBindingExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//添加警告队列</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Queue <span class="token function">warningQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>WARNING_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//声明报警队列绑定关系</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Binding <span class="token function">warningQueueBindingExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>
                                              <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-3-3-报警消费者"><a href="#8-3-3-报警消费者" class="headerlink" title="8.3.3 报警消费者"></a>8.3.3 报警消费者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarningConsumer</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String WARNING_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"warning.queue"</span><span class="token punctuation">;</span>
 <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> WARNING_QUEUE_NAME<span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveWarningMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"报警发现不可路由消息：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-3-4-测试注意事项"><a href="#8-3-4-测试注意事项" class="headerlink" title="8.3.4 测试注意事项"></a>8.3.4 测试注意事项</h4><p>重新启动项目的时候需要把原来的 <code>confirm.exchange</code> 删除因为我们修改了其绑定属性，不然会报错</p>
<h4 id="8-3-5-结果分析"><a href="#8-3-5-结果分析" class="headerlink" title="8.3.5 结果分析"></a>8.3.5 结果分析</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029162005499.png" alt="image-20211029162005499"></p>
<p>mandatory 参数与备份交换机可以一起使用的时候，如果两者同时开启，消息究竟何去何从？谁优先级高，经过上面结果显示答案是<strong>备份交换机优先级</strong>高。</p>
<h2 id="9-RabbitMQ-其他知识点"><a href="#9-RabbitMQ-其他知识点" class="headerlink" title="9.RabbitMQ 其他知识点"></a>9.RabbitMQ 其他知识点</h2><h3 id="9-1-幂等性"><a href="#9-1-幂等性" class="headerlink" title="9.1 幂等性"></a>9.1 幂等性</h3><h4 id="9-1-1-概念"><a href="#9-1-1-概念" class="headerlink" title="9.1.1 概念"></a>9.1.1 概念</h4><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。 举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常， 此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱 了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误 立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等</p>
<h4 id="9-1-2-消息重复消费"><a href="#9-1-2-消息重复消费" class="headerlink" title="9.1.2 消息重复消费"></a>9.1.2 消息重复消费</h4><p>消费者在消费 MQ 中的消息时，MQ 已把消息发送给消费者，消费者在给 MQ 返回 ack 时网络中断， 故 MQ 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但 实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p>
<h4 id="9-1-3-解决思路"><a href="#9-1-3-解决思路" class="headerlink" title="9.1.3 解决思路"></a>9.1.3 解决思路</h4><p>MQ 消费者的幂等性的解决一般使用全局 ID 或者写个唯一标识比如时间戳 或者 UUID 或者订单消费 者消费 MQ 中的消息也可利用 MQ 的该 id 来判断，或者可按自己的规则生成一个全局唯一 id，每次消费消 息时用该 id 先判断该消息是否已消费过。</p>
<h4 id="9-1-4-消费端的幂等性保障"><a href="#9-1-4-消费端的幂等性保障" class="headerlink" title="9.1.4  消费端的幂等性保障"></a>9.1.4  消费端的幂等性保障</h4><p>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现幂等性， 这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息。业界主流的幂等性有两种操作:a. 唯一 ID+指纹码机制,利用数据库主键去重, b.利用 <code>redis</code> 的原子性去实现。</p>
<h4 id="9-1-5-唯一-ID-指纹码机制"><a href="#9-1-5-唯一-ID-指纹码机制" class="headerlink" title="9.1.5  唯一 ID+指纹码机制"></a>9.1.5  唯一 ID+指纹码机制</h4><p>指纹码:我们的一些规则或者时间戳加别的服务给到的唯一信息码,它并不一定是我们系统生成的，基 本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个 id 是否存 在数据库中,优势就是实现简单就一个拼接，然后查询判断是否重复；劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能，但也不是我们最推荐的方式。</p>
<h4 id="9-1-6-Redis-原子性"><a href="#9-1-6-Redis-原子性" class="headerlink" title="9.1.6   Redis 原子性"></a>9.1.6   Redis 原子性</h4><p>利用 redis 执行 setnx 命令，天然具有幂等性。从而实现不重复消费</p>
<h3 id="9-2-优先级队列"><a href="#9-2-优先级队列" class="headerlink" title="9.2  优先级队列"></a>9.2  优先级队列</h3><h4 id="9-2-1-使用场景"><a href="#9-2-1-使用场景" class="headerlink" title="9.2.1  使用场景"></a>9.2.1  使用场景</h4><p>有一个订单催付的场景，如果在用户设定的时间内未付款那么就会给用户推送一条短信提醒。对于重要客户，他们的订单必须得到优先处理，而曾经我们的后端系统是使用 redis 来存 放的定时轮询，大家都知道 redis 只能用 List 做一个简简单单的消息队列，并不能实现一个优先级的场景， 所以订单量大了后采用 RabbitMQ 进行改造和优化,如果发现是大客户的订单给一个相对比较高的优先级， 否则就是默认优先级。</p>
<h4 id="9-2-2-如何添加"><a href="#9-2-2-如何添加" class="headerlink" title="9.2.2  如何添加"></a>9.2.2  如何添加</h4><blockquote>
<p>9.2.2. 如何添加  a.控制台页面添加</p>
</blockquote>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029203227744.png" alt="image-20211029203227744"></p>
<blockquote>
<p>b.队列中代码添加优先级</p>
</blockquote>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-max-priority"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>c.消息中代码添加优先级</p>
</blockquote>
<pre class=" language-java"><code class="language-java">AMQP<span class="token punctuation">.</span>basicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><font>注意事项</font></p>
<p>要让队列实现优先级需要做的事情有如下事情:队列需要设置为优先级队列，消息需要设置消息的优先 级，消费者需要等待消息已经发送到队列中才去消费因为，这样才有机会对消息进行排序</p>
<h3 id="9-3-惰性队列"><a href="#9-3-惰性队列" class="headerlink" title="9.3 惰性队列"></a>9.3 惰性队列</h3><h4 id="9-3-1-使用场景"><a href="#9-3-1-使用场景" class="headerlink" title="9.3.1. 使用场景"></a>9.3.1. 使用场景</h4><p>RabbitMQ 从 3.6.0 版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够<strong>支持更长的队列，即支持更多的消息存储</strong>。当消费者由于各种各样的原因(比如消费者下线、宕机亦或者是由于维护而关闭等)而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。</p>
<p>默认情况下，当生产者将消息发送到 RabbitMQ 的时候，队列中的消息会尽可能的存储在内存之中， 这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留 一份备份。当 RabbitMQ 需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的 时间，也会阻塞队列的操作，进而无法接收新的消息。虽然 RabbitMQ 的开发者们一直在升级相关的算法， 但是效果始终不太理想，尤其是在消息量特别大的时候.</p>
<h4 id="9-3-2-两种模式"><a href="#9-3-2-两种模式" class="headerlink" title="9.3.2  两种模式"></a>9.3.2  两种模式</h4><p>队列具备两种模式：<code>default</code> 和 <code>lazy</code>。默认的为 default 模式，在 3.6.0 之前的版本无需做任何变更。lazy 模式即为惰性队列的模式，可以通过调用 <code>channel.queueDeclare</code> 方法的时候在参数中设置，也可以通过 Policy 的方式设置，如果一个队列同时使用这两种方式设置的话，那么 Policy 的方式具备更高的优先级。 如果要通过声明的方式改变已有队列的模式的话，那么只能先删除队列，然后再重新声明一个新的。</p>
<p>在队列声明的时候可以通过<code>x-queue-mode</code>参数来设置队列的模式，取值为“default”和“lazy”。下面示例中演示了一个惰性队列的声明细节：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-queue-mode"</span><span class="token punctuation">,</span> <span class="token string">"lazy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"myqueue"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="9-3-3-内存开销对比"><a href="#9-3-3-内存开销对比" class="headerlink" title="9.3.3  内存开销对比"></a>9.3.3  内存开销对比</h4><p>在发送 1 百万条消息，每条消息大概占 1KB 的情况下，普通队列占用内存是 1.2GB，而惰性队列仅仅 占用 1.5MB</p>
<h2 id="10-RabbitMQ-集群"><a href="#10-RabbitMQ-集群" class="headerlink" title="10. RabbitMQ 集群"></a>10. RabbitMQ 集群</h2><h3 id="10-1-clustering"><a href="#10-1-clustering" class="headerlink" title="10.1  clustering"></a>10.1  clustering</h3><h4 id="10-1-1-使用集群的原因"><a href="#10-1-1-使用集群的原因" class="headerlink" title="10.1.1  使用集群的原因"></a>10.1.1  使用集群的原因</h4><p>如果 RabbitMQ 服务器遇到内存崩溃、机器掉电或者主板故障等情况，该怎么办？单台 RabbitMQ 服务器可以满足每秒 1000 条消息的吞吐量，那么如果应用需要 RabbitMQ 服务满足每秒 10 万条消息的吞 吐量呢？购买昂贵的服务器来增强单机 RabbitMQ 务的性能显得捉襟见肘，搭建一个 RabbitMQ 集群才是 解决实际问题的关键.</p>
<h4 id="10-1-2-虚拟机搭建"><a href="#10-1-2-虚拟机搭建" class="headerlink" title="10.1.2  虚拟机搭建"></a>10.1.2  虚拟机搭建</h4><ol>
<li><p>修改 3 台机器的主机名称</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/hostname
</code></pre>
</li>
<li><p>配置各个节点的 hosts 文件，让各个节点都能互相识别对方(三个都要写)</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/hosts

10.211.55.74 node1
10.211.55.75 node2
10.211.55.76 node3
</code></pre>
</li>
<li><p>以确保各个节点的 cookie 文件使用的是同一个值</p>
<p>在 node1 上执行远程操作命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie

<span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmq/.erlang.cookie
</code></pre>
</li>
<li><p>启动 RabbitMQ 服务,顺带启动 Erlang 虚拟机和 RbbitMQ 应用服务(在三台节点上分别执行以 下命令)</p>
<pre class=" language-bash"><code class="language-bash">rabbitmq-server -detached
</code></pre>
</li>
<li><p>在节点 2 以此执行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@node1
rabbitmqctl start_app<span class="token punctuation">(</span>只启动应用服务<span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>在节点 3 执行</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@node2
rabbitmqctl start_app
</code></pre>
</li>
<li><p>集群状态</p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl cluster_status
</code></pre>
</li>
<li><p>需要重新设置用户</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建账号</span>
rabbitmqctl add_user admin 123

<span class="token comment" spellcheck="true">#设置用户角色</span>
rabbitmqctl set_user_tags admin administrator

<span class="token comment" spellcheck="true">#设置用户权限</span>
rabbitmqctl set_permissions -p <span class="token string">"/"</span> admin <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>
</code></pre>
</li>
<li><p>解除集群节点(node2 和 node3 机器分别执行)(可选)</p>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
rabbitmqctl cluster_status
rabbitmqctl forget_cluster_node rabbit@node2<span class="token punctuation">(</span>node1 机器上执行<span class="token punctuation">)</span>
</code></pre>
<h4 id="10-1-3-Docker搭建"><a href="#10-1-3-Docker搭建" class="headerlink" title="10.1.3 Docker搭建"></a>10.1.3 Docker搭建</h4><ol>
<li><p>拉去镜像</p>
<pre class=" language-bash"><code class="language-bash">docker pull rabbitmq:management
</code></pre>
</li>
<li><p><strong>运行容器</strong></p>
<pre class=" language-bash"><code class="language-bash">docker run -d --hostname node1 --name rabbitmq1 -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management

docker run -d --hostname node2 --name rabbitmq2 -p 5673:5672 --link rabbitmq1:rabbit_host1 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management

docker run -d --hostname node3 --name rabbitmq3 -p 5674:5672 --link rabbitmq1:rabbit_host1 --link rabbitmq2:rabbit_host2 -e RABBITMQ_ERLANG_COOKIE<span class="token operator">=</span><span class="token string">'rabbitmq_cookie'</span> rabbitmq:management
</code></pre>
</li>
<li><p><strong>加入节点到集群</strong></p>
<p>设置节点1：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit1 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
<p>设置节点2，加入到集群：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit2 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster --ram rabbit@node1
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
<p>设置节点3，加入到集群：</p>
<pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it myrabbit3 <span class="token function">bash</span>
rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster --ram rabbit@bode1
rabbitmqctl start_app
<span class="token keyword">exit</span>
</code></pre>
</li>
<li><p>设置好之后，使用 <a href="http://ip:15672/">http://ip:15672</a> 进行访问</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029214949105.png" alt="image-20211029214949105"></p>
<h4 id="10-1-4-Springboot搭建"><a href="#10-1-4-Springboot搭建" class="headerlink" title="10.1.4 Springboot搭建"></a>10.1.4 Springboot搭建</h4></li>
<li><p><strong>配置RabbitMQ单机</strong></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
　　rabbitmq<span class="token punctuation">:</span>
　　　　host<span class="token punctuation">:</span> localhost
　　　　port<span class="token punctuation">:</span> <span class="token number">5672</span>
　　　　username<span class="token punctuation">:</span> username
　　　　password<span class="token punctuation">:</span> password
　　　　
<span class="token comment" spellcheck="true">#或者使用addresses</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
　　rabbitmq<span class="token punctuation">:</span>
　　　　addresses<span class="token punctuation">:</span> ip1<span class="token punctuation">:</span>port1
　　　　username<span class="token punctuation">:</span> username
　　　　password<span class="token punctuation">:</span> password
</code></pre>
</li>
<li><p><strong>配置RabbitMQ集群</strong></p>
</li>
</ol>
<pre class=" language-bash"><code class="language-bash">spring:
　　rabbitmq:
　　　　addresses: ip1:port1,ip2:port2,ip3:port3
　　　　username: username
　　　　password: password
</code></pre>
<h3 id="10-2-镜像队列"><a href="#10-2-镜像队列" class="headerlink" title="10.2 镜像队列"></a>10.2 镜像队列</h3><h4 id="10-2-1-使用镜像的原因"><a href="#10-2-1-使用镜像的原因" class="headerlink" title="10.2.1 使用镜像的原因"></a>10.2.1 使用镜像的原因</h4><p>如果 RabbitMQ 集群中只有一个 Broker 节点，那么该节点的失效将导致整体服务的临时性不可用，并 且也可能会导致消息的丢失。可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true， 但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在 一个短暂却会产生问题的时间窗。通过 <code>publisherconfirm</code> 机制能够确保客户端知道哪些消息己经存入磁盘， 尽管如此，一般不希望遇到因单点故障导致的服务不可用</p>
<p><strong>引入镜像队列(Mirror Queue)的机制，可以将队列镜像到集群中的其他 Broker 节点之上，如果集群中 的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</strong></p>
<h4 id="10-2-2-搭建步骤"><a href="#10-2-2-搭建步骤" class="headerlink" title="10.2.2 搭建步骤"></a>10.2.2 搭建步骤</h4><ol>
<li><p><strong>策略policy概念</strong></p>
<p>使用RabbitMQ镜像功能，需要基于RabbitMQ策略来实现，策略policy是用来控制和修改群集范围的某个vhost队列行为和Exchange行为。策略policy就是要设置哪些Exchange或者queue的数据需要复制、同步，以及如何复制同步。</p>
<p>为了使队列成为镜像队列，需要创建一个策略来匹配队列，设置策略有两个键“ha-mode和 ha-params（可选）”。ha-params根据ha-mode设置不同的值，下表说明这些key的选项。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029215439378.png" alt="image-20211029215439378"></p>
</li>
<li><p>登录rabbitmq管理页面 ——&gt; Admin ——&gt; Policies ——&gt; Add / update a policy</p>
<p><code>name</code>：随便取，策略名称<br><code>Pattern</code>：^ 匹配符，只有一个^代表匹配所有<br><code>Definition</code>：ha-mode=all 为匹配类型，分为3种模式：all（表示所有的queue）</p>
<p><strong>或者使用命令：</strong></p>
<pre class=" language-bash"><code class="language-bash">rabbitmqctl set_policy ha-all <span class="token string">"^"</span> <span class="token string">'{"ha-mode":"all"}'</span>
</code></pre>
</li>
<li><p><strong>查看效果</strong></p>
</li>
</ol>
<p>此策略会同步所在同一VHost中的交换器和队列数据。设置好policy之后，使用 <a href="http://ip:15672/">http://ip:15672</a> 再次进行访问，可以看到队列镜像同步。</p>
<p>停掉 node1 之后发现 node2 成为镜像队列,就算整个集群只剩下一台机器了 依然能消费队列里面的消息 说明队列里面的消息被镜像队列传递到相应机器里面了</p>
<h3 id="10-3-Haproxy-Keepalive-实现高可用负载均衡"><a href="#10-3-Haproxy-Keepalive-实现高可用负载均衡" class="headerlink" title="10.3 Haproxy+Keepalive 实现高可用负载均衡"></a>10.3 Haproxy+Keepalive 实现高可用负载均衡</h3><h4 id="10-3-1-整体架构图"><a href="#10-3-1-整体架构图" class="headerlink" title="10.3.1  整体架构图"></a>10.3.1  整体架构图</h4><p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029220301875.png" alt="image-20211029220301875"></p>
<h4 id="10-3-2-Haproxy-实现负载均衡"><a href="#10-3-2-Haproxy-实现负载均衡" class="headerlink" title="10.3.2  Haproxy 实现负载均衡"></a>10.3.2  Haproxy 实现负载均衡</h4><p>HAProxy 提供高可用性、负载均衡及基于 TCP、HTTP 应用的代理，支持虚拟主机，它是免费、快速并 且可靠的一种解决方案，包括Twitter,Reddit,StackOverflow,GitHub 在内的多家知名互联网公司在使用。 HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。 扩展 nginx,lvs,haproxy 之间的区别: <a href="http://www.ha97.com/5646.html">http://www.ha97.com/5646.html</a></p>
<h4 id="10-3-3-Keepalived-实现双机-主备-热备"><a href="#10-3-3-Keepalived-实现双机-主备-热备" class="headerlink" title="10.3.3 Keepalived 实现双机(主备)热备"></a>10.3.3 Keepalived 实现双机(主备)热备</h4><p>试想如果前面配置的 HAProxy 主机突然宕机或者网卡失效，那么虽然 RbbitMQ 集群没有任何故障但是 对于外界的客户端来说所有的连接都会被断开结果将是灾难性的为了确保负载均衡服务的可靠性同样显得十分重要，这里就要引入 Keepalived 它能够通过自身健康检查、资源接管功能做高可用(双机热备)，实现故障转移.</p>
<h3 id="10-4-Federation-Exchange"><a href="#10-4-Federation-Exchange" class="headerlink" title="10.4  Federation Exchange"></a>10.4  Federation Exchange</h3><h4 id="10-4-1-使用它的原因"><a href="#10-4-1-使用它的原因" class="headerlink" title="10.4.1  使用它的原因"></a>10.4.1  使用它的原因</h4><p>(broker 北京)，(broker 深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京 的业务(Client 北京) 需要连接(broker 北京)，向其中的交换器 exchangeA 发送消息，此时的网络延迟很小， (Client 北京)可以迅速将消息发送至 exchangeA 中，就算在开启了 publisherconfirm 机制或者事务机制的 情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client 深圳)需要向 exchangeA 发送消息， 那么(Client 深圳) (broker 北京)之间有很大的网络延迟，(Client 深圳) 将发送消息至 exchangeA 会经历一 定的延迟，尤其是在开启了 publisherconfirm 机制或者事务机制的情况下，(Client 深圳) 会等待很长的延 迟时间来接收(broker 北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的 阻塞。</p>
<p>将业务(Client 深圳)部署到北京的机房可以解决这个问题，但是如果(Client 深圳)调用的另些服务都部 署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？ 这里使用 Federation 插件就可以很好地解决这个问题</p>
<h3 id="10-5-Federation-Queue"><a href="#10-5-Federation-Queue" class="headerlink" title="10.5 Federation Queue"></a>10.5 Federation Queue</h3><h4 id="10-5-1-使用它的原因"><a href="#10-5-1-使用它的原因" class="headerlink" title="10.5.1  使用它的原因"></a>10.5.1  使用它的原因</h4><p>联邦队列可以在多个 Broker 节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以 连接一个或者多个上游队列(upstream queue)，并从这些上游队列中获取消息以满足本地消费者消费消息 的需求。</p>
<p><img src="/../images/2021-10-26-Rabbitmq%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211029220826127.png" alt="image-20211029220826127"></p>
<h3 id="10-6-Shovel"><a href="#10-6-Shovel" class="headerlink" title="10.6. Shovel"></a>10.6. Shovel</h3><h4 id="10-6-1-使用它的原因"><a href="#10-6-1-使用它的原因" class="headerlink" title="10.6.1 使用它的原因"></a>10.6.1 使用它的原因</h4><p>与Federation 具备的数据转发功能类似，Shovel 够可靠、持续地从一个 Broker 中的队列(作为源端，即 source)拉取数据并转发至另一个 Broker 中的交换器(作为目的端，即 destination)。作为源端的队列和作 为目的端的交换器可以同时位于同一个 Broker，也可以位于不同的 Broker 上。Shovel 可以翻译为”铲子”， 是一种比较形象的比喻，这个”铲子”可以将消息从一方”铲到”另一方。S<strong>hovel 行为就像优秀的客户端应用 程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理</strong></p>
</body></html>]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/2021/10/29/JavaSE/</url>
    <content><![CDATA[<html><head></head><body><h2 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1.Java语言概述"></a>1.Java语言概述</h2><h4 id="1）整体内容框架"><a href="#1）整体内容框架" class="headerlink" title="1）整体内容框架"></a>1）整体内容框架</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211015184213040.png" alt="image-20211015184213040"></p>
<blockquote>
<p>第一部分：编程语言核心结构</p>
</blockquote>
<p>主要知识点：变量、基本语法、分支、循环、数组</p>
<blockquote>
<p>第二部分：Java面向对象核心逻辑</p>
</blockquote>
<p>主要知识点：OOP、封装、继承、多态、接口</p>
<blockquote>
<p>第三部分：开发JavaSE高级应用程序</p>
</blockquote>
<p>主要知识点：异常、集合、I/O、多线程、反射机制、网络编程、</p>
<h4 id="2）开发环境搭建"><a href="#2）开发环境搭建" class="headerlink" title="2）开发环境搭建"></a>2）开发环境搭建</h4><blockquote>
<p>JDK、JRE、JVM的关系</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015195809885.png" alt="image-20211015195809885"></p>
<blockquote>
<p>path环境变量的配置</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015195918675.png" alt="image-20211015195918675"></p>
<h4 id="3-Java程序"><a href="#3-Java程序" class="headerlink" title="3) Java程序"></a>3) Java程序</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211015200020502.png" alt="image-20211015200020502"></p>
<p><strong>java程序编写-编译-运行的过程：</strong></p>
<ul>
<li>编写：我们将编写的java代码保存在以”.java”结尾的源文件中</li>
<li>编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java</li>
<li>运行：使用java.exe命令解释运行我们的字节码文件。 格式：java 类名</li>
</ul>
<h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2.基本语法"></a>2.基本语法</h2><h4 id="1-关键字与标识符"><a href="#1-关键字与标识符" class="headerlink" title="1) 关键字与标识符"></a>1) 关键字与标识符</h4><blockquote>
<p>1.java关键字的使用</p>
</blockquote>
<p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>特点：关键字中所字母都为小写</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200302740.png" alt="image-20211015200302740"></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200306806.png" alt="image-20211015200306806"></p>
<blockquote>
<p>2.保留字：现Java版本尚未使用，但以后版本可能会作为关键字使用。</p>
</blockquote>
<p>具体哪些保留字：goto 、const</p>
<h4 id="2-变量的使用"><a href="#2-变量的使用" class="headerlink" title="2) 变量的使用"></a>2) 变量的使用</h4><blockquote>
<p>1 按数据类型分类</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015200503566.png" alt="image-20211015200503566"></p>
<p><strong>//1. 整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)</strong></p>
<p>​        //① byte范围：-128 ~ 127<br>​        // ② 声明long型变量，必须以”l”或”L”结尾<br>​        // ③ 通常，定义整型变量时，使用int型。<br>​        //④整型的常量，默认类型是：int型</p>
<p><strong>//2. 浮点型：float(4字节) \ double(8字节)</strong></p>
<p>​        //① 浮点型，表示带小数点的数值<br>​        //② float表示数值的范围比long还大<br>​        //③ 定义float类型变量时，变量要以”f”或”F”结尾<br>​        //④ 通常，定义浮点型变量时，使用double型。<br>​        //⑤ 浮点型的常量，默认类型为：double</p>
<p><strong>//3. 字符型：char (1字符=2字节)</strong></p>
<p>​    //① 定义char型变量，通常使用一对’’,内部只能写一个字符<br>​    //② 表示方式：1.声明一个字符 2.转义字符 3.直接使用     Unicode 值来表示字符型常量</p>
<p><strong>//4.布尔型：boolean</strong><br>    //① 只能取两个值之一：true 、 false<br>    //② 常常在条件判断、循环结构中使用</p>
<blockquote>
<pre><code>     2. 按声明的位置分类
</code></pre>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015203740944.png" alt="image-20211015203740944"></p>
<blockquote>
<p>  3.变量使用的注意点：</p>
</blockquote>
<p>​    ① 变量必须先声明，后使用<br>​    ② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了<br>​    ③ 同一个作用域内，不可以声明两个同名的变量</p>
<blockquote>
<ol start="4">
<li>自动类型转换(只涉及7种基本数据类型）</li>
</ol>
</blockquote>
<p>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p>
<p><strong>byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double</strong><br>    特别的：当byte、char、short三种类型的变量做运算时，结果为int型</p>
<blockquote>
<p>​    5 强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</p>
</blockquote>
<p>1.需要使用强转符：()<br>2.注意点：强制类型转换，可能导致精度损失。</p>
<h4 id="3-进制"><a href="#3-进制" class="headerlink" title="3) 进制"></a>3) 进制</h4><blockquote>
<p>​    1.编程中涉及的进制及表示方式：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015204245631.png" alt="image-20211015204245631"></p>
<blockquote>
<p>​    2.二进制的使用说明：</p>
</blockquote>
<p>2.1 计算机底层的存储方式：所有数字在计算机底层都以二进制形式存在。<br>2.2 二进制数据的存储方式：所有的数值，不管正负，底层都以补码的方式存储。<br>2.3 原码、反码、补码的说明：</p>
<p>正数：</p>
<p>​        三码合一</p>
<p>负数：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015204332717.png" alt="image-20211015204332717"></p>
<h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4) 运算符"></a>4) 运算符</h4><blockquote>
<p>​    1.算术运算符： + - + - * / % (前)++ (后)++ (前)– (后)– </p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//(前)++ :先自增1，后运算</span>
 <span class="token comment" spellcheck="true">//(后)++ :先运算，后自增1</span>
    
<span class="token number">2</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//(前)-- :先自减1，后运算</span>
  <span class="token comment" spellcheck="true">//(后)-- :先运算，后自减1</span>
    
<span class="token number">3</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//连接符：+：只能使用在String与其他数据类型变量之间使用。</span>
</code></pre>
<blockquote>
<p>​    2.赋值运算符：=  +=  -=  *=  /=  %= </p>
</blockquote>
<p>1.运算的结果不会改变变量本身的数据类型</p>
<p>2.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)</span>

​        <span class="token comment" spellcheck="true">//方式一：num = num + 2;</span>
​        <span class="token comment" spellcheck="true">//方式二：num += 2; (推荐)</span>
</code></pre>
<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)</span>

    <span class="token comment" spellcheck="true">//方式一：num = num + 1;</span>
    <span class="token comment" spellcheck="true">//方式二：num += 1; </span>
    <span class="token comment" spellcheck="true">//方式三：num++; (推荐)</span>
</code></pre>
<blockquote>
<p>​    3.比较运算符（关系运算符）: == != &gt;  &lt;  &gt;=  &lt;=  instanceof</p>
</blockquote>
<ul>
<li>​    1.比较运算符的结果是boolean类型</li>
<li>​    2.&gt;  &lt;  &gt;=  &lt;= :只能使用在数值类型的数据之间。</li>
<li>​    3.== 和 !=: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。</li>
</ul>
<blockquote>
<p>​    4.逻辑运算符：&amp; &amp;&amp;  |  || !  ^</p>
</blockquote>
<p><strong>1.区分&amp; 与 &amp;&amp;</strong></p>
<pre class=" language-markdown"><code class="language-markdown">//相同点1：&amp; 与  &amp;&amp; 的运算结果相同
//相同点2：当符号左边是true时，二者都会执行符号右边的运算

//不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。
</code></pre>
<p>​        <strong>//开发中，推荐使用&amp;&amp;</strong></p>
<p><strong>2.区分：| 与 ||</strong> </p>
<pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    //相同点1：| 与  || 的运算结果相同</span>
<span class="token code keyword">    //相同点2：当符号左边是false时，二者都会执行符号右边的运算</span>
    
<span class="token code keyword">    //不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算</span>
    
</code></pre>
<p>​    <strong>//开发中，推荐使用||</strong></p>
<blockquote>
<p>​    5.位运算符：&lt;&lt;  &gt;&gt; &gt;&gt;&gt; &amp;  |  ^  ~</p>
</blockquote>
<p>【面试题】 你能否写出最高效的2 * 8的实现方式？<br>    答案：2 &lt;&lt; 3  或  8 &lt;&lt; 1</p>
<ol>
<li>位运算符操作的都是整型的数据</li>
<li>&lt;&lt; ：在一定范围内，每向左移1位，相当于 * 2</li>
<li>‘&gt;&gt;’:在一定范围内，每向右移1位，相当于 / 2</li>
</ol>
<blockquote>
<p>​    6.三元运算符：(条件表达式)? 表达式1 : 表达式2</p>
</blockquote>
<p> 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p>
<h4 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6) 流程控制"></a>6) 流程控制</h4><p>顺序结构：程序从上到下执行。</p>
<blockquote>
<p>​    分支结构</p>
</blockquote>
<p>1.if-else条件判断结构</p>
<p>2.switch-case选择结构</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
    执行语句<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
    执行语句<span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">default</span><span class="token operator">:</span>
    执行语句n<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//break;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>2.说明：</strong><br>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</p>
<p>② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</p>
<p>③ switch结构中的表达式，只能是如下的6种数据类型之一：<br>   <strong>byte</strong> 、<strong>short</strong>、<strong>char</strong>、<strong>int</strong>、<strong>enum</strong>、<strong>String</strong></p>
<p>④ case 之后只能声明常量。不能声明范围。</p>
<p>⑤ break关键字是可选的。</p>
<p>⑥ default:相当于if-else结构中的else。   default结构是可选的，而且位置是灵活的。</p>
<p><strong>3.如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。</strong></p>
<p><strong>4.break在switch-case中是可选的</strong></p>
<blockquote>
<p>​    循环结构</p>
</blockquote>
<p>1.循环结构的四要素</p>
<p>① 初始化条件<br>② 循环条件  —&gt;是boolean类型<br>③ 循环体<br>④ 迭代条件</p>
<p><strong>for和while循环总结：</strong></p>
<ol>
<li>开发中，基本上我们都会从for、while中进行选择，实现循环结构。</li>
<li>for循环和while循环是可以相互转换的！<br>区别：for循环和while循环的初始化条件部分的作用范围不同。</li>
<li>我们写程序，要避免出现死循环。</li>
</ol>
<p><strong>补充:衡量一个功能代码的优劣</strong>：<br>1.正确性<br>2.可读性<br>3.健壮性<br>4.高效率与低存储：时间复杂度 、空间复杂度 （衡量算法的好坏）</p>
<blockquote>
<p>​    break和continue关键字的使用</p>
</blockquote>
<p>break:        结束<strong>当前</strong>循环</p>
<p>continue:  结束<strong>当次</strong>循环</p>
<blockquote>
<p>​    Scanner类</p>
</blockquote>
<p>如何从键盘获取不同类型的变量：需要使用Scanner类</p>
<p><strong>具体实现步骤：</strong><br>1.导包：import java.util.Scanner;<br>2.Scanner的实例化:Scanner scan = new Scanner(System.in);<br>3.调用Scanner类的相关方法（next() / nextXxx()），来获取指定类型的变量</p>
<h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><h4 id="1）数组的概述"><a href="#1）数组的概述" class="headerlink" title="1）数组的概述"></a>1）数组的概述</h4><p><strong>1.数组的理解：</strong></p>
<ul>
<li>数组(Array)，是多个相同类型数据一定顺序排列的集合，并使用一个名字命名，</li>
</ul>
<p><strong>2.数组的特点：</strong></p>
<ul>
<li>数组是序排列的</li>
<li>数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li>
<li>创建数组对象会在内存中开辟一整块连续的空间</li>
<li>数组的长度一旦确定，就不能修改。</li>
</ul>
<h4 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2) 一维数组"></a>2) 一维数组</h4><blockquote>
<p>​    1.一维数组的声明与初始化</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//类型推断</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    2.一维数组的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211015224004165.png" alt="image-20211015224004165"></p>
<h4 id="3-二维数组"><a href="#3-二维数组" class="headerlink" title="3) 二维数组"></a>3) 二维数组</h4><blockquote>
<p>​    二维数组的声明与初始化</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//动态初始化1</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//动态初始化2</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//也是正确的写法：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型推断</span>
</code></pre>
<blockquote>
<p>​    二维数组的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016204716700.png" alt="image-20211016204716700"></p>
<h4 id="4）十大内部排序算法"><a href="#4）十大内部排序算法" class="headerlink" title="4）十大内部排序算法"></a>4）十大内部排序算法</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211016204852206.png" alt="image-20211016204852206"></p>
<p>1）衡量排序算法的优劣：时间复杂度、空间复杂度、稳定性</p>
<p>2）排序的分类：内部排序 与 外部排序（需要借助于磁盘）</p>
<p>3）不同排序算法的时间复杂度</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016204923356.png" alt="image-20211016204923356"></p>
<h4 id="5）Arrays工具类的使用"><a href="#5）Arrays工具类的使用" class="headerlink" title="5）Arrays工具类的使用"></a>5）Arrays工具类的使用</h4><p>1.理解：<br>① 定义在java.util包下。<br>② Arrays:提供了很多操作数组的方法。</p>
<p>2.使用：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断两个数组是否相等</span>
<span class="token comment" spellcheck="true">//boolean euqals(int[] a, int[] b)</span>
    
<span class="token comment" spellcheck="true">//输出数组信息</span>
<span class="token comment" spellcheck="true">//String toString(int[] a)</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token comment" spellcheck="true">//将指定值填充到数组之中。</span>
Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//对数组进行排序。</span>
Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="6-数组的常见异常"><a href="#6-数组的常见异常" class="headerlink" title="6) 数组的常见异常"></a>6) 数组的常见异常</h4><blockquote>
<p>​    1.数组角标越界异常：ArrayIndexOutOfBoundsException</p>
</blockquote>
<blockquote>
<p>​    2.空指针异常：NullPointerException</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//情况一：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment" spellcheck="true">//情况二：</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="4-面对对象——上"><a href="#4-面对对象——上" class="headerlink" title="4.面对对象——上"></a>4.面对对象——上</h2><ul>
<li><p>1.Java类及类的成员：属性、方法、构造器；代码块、内部类</p>
</li>
<li><p>2.面向对象的大特征：封装性、继承性、多态性、(抽象性)</p>
</li>
<li><p>3.其它关键字：this、super、static、final、abstract、interface、package、import等</p>
<p><strong>“大处着眼，小处着手”</strong></p>
</li>
</ul>
<h4 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1) 类与对象"></a>1) 类与对象</h4><blockquote>
<p>​    1.面向对象与面向过程（理解）</p>
</blockquote>
<p>1.面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。<br>2.面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<blockquote>
<p>​    2.面向对象中两个重要的概念：</p>
</blockquote>
<p><strong>类：</strong>对一类事物的描述，是抽象的、概念上的定义<br><strong>对象：</strong>是实际存在的该类事物的每个个体，因而也称为实例(instance)</p>
<ul>
<li>面向对象程序设计的重点是类的设计</li>
<li>设计类，就是设计类的成员。</li>
</ul>
<blockquote>
<p>​    3.对象的内存解析</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016214911907.png" alt="image-20211016214911907"></p>
<blockquote>
<p>​    4.匿名对象:</p>
</blockquote>
<p>我们创建的对象，没显式的赋给一个变量名。即为匿名对象</p>
<p>匿名对象只能调用一次。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1999</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0.0</span>
</code></pre>
<h4 id="2-JVM内存结构"><a href="#2-JVM内存结构" class="headerlink" title="2) JVM内存结构"></a>2) JVM内存结构</h4><p>编译完源程序以后，生成一个或多个字节码文件。<br>我们使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016215258999.png" alt="image-20211016215258999"></p>
<p><strong>虚拟机栈</strong>，即为平时提到的栈结构。我们将局部变量存储在栈结构中</p>
<p><strong>堆</strong>，我们将new出来的结构（比如：数组、对象）加载在对空间中。</p>
<p>补充：对象的属性（非static的）加载在堆空间中。<br>方法区：类的加载信息、常量池、静态域</p>
<h4 id="3）属性"><a href="#3）属性" class="headerlink" title="3）属性"></a>3）属性</h4><p>对比：<strong>属性  vs  局部变量</strong></p>
<blockquote>
<p>​    1 在类中声明的位置的不同</p>
</blockquote>
<p>属性：直接定义在类的一对{}内</p>
<p>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p>
<blockquote>
<p>​    2 关于权限修饰符的不同</p>
</blockquote>
<p>属性：可以在声明属性时，指明其权限，使用权限修饰符。</p>
<p>常用的权限修饰符：private、public、缺省、protected  —&gt;封装性;目前，大家声明属性时，都使用缺省就可以了。</p>
<p>局部变量：不可以使用权限修饰符。</p>
<blockquote>
<p>​    3 默认初始化值的情况：</p>
</blockquote>
<p>属性：类的属性，根据其类型，都默认初始化值。</p>
<ul>
<li><pre><code>        整型（byte、short、int、long：0）
</code></pre>
</li>
<li><pre><code>        浮点型（float、double：0.0）
</code></pre>
</li>
<li><pre><code>        字符型（char：0  （或'\u0000'））
</code></pre>
</li>
<li><pre><code>        布尔型（boolean：false）
</code></pre>
</li>
<li><pre><code>        引用数据类型（类、数组、接口：null）
</code></pre>
</li>
</ul>
<p>局部变量：没默认初始化值。</p>
<ul>
<li><pre><code>     意味着，我们在调用局部变量之前，一定要显式赋值。
</code></pre>
</li>
<li><pre><code>     特别地：形参在调用时，我们赋值即可。
</code></pre>
</li>
</ul>
<blockquote>
<p>​    4 在内存中加载的位置：</p>
</blockquote>
<p>属性：加载到堆空间中   （非static）</p>
<p>局部变量：加载到栈空间</p>
<blockquote>
<p>​    方式一：按照数据类型</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016222237851.png" alt="image-20211016222237851"></p>
<blockquote>
<p>​    方式二：按照在类中声明的位置：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016222258960.png" alt="image-20211016222258960"></p>
<h4 id="4-封装与隐藏"><a href="#4-封装与隐藏" class="headerlink" title="4) 封装与隐藏"></a>4) 封装与隐藏</h4><blockquote>
<p>​    1.为什么要引入封装性？</p>
</blockquote>
<p>我们程序设计追求“高内聚，低耦合”。<br><strong>高内聚</strong> ：类的内部数据操作细节自己完成，不允许外部干涉；<br><strong>低耦合</strong> ：仅对外暴露少量的方法用于使用。</p>
<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p>
<blockquote>
<p>​    2.Java规定的四种权限修饰符</p>
</blockquote>
<p>权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public</p>
<blockquote>
<pre><code>     3.具体的修饰范围：
</code></pre>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211016225016305.png" alt="image-20211016225016305"></p>
<h4 id="5-构造器"><a href="#5-构造器" class="headerlink" title="5) 构造器"></a>5) 构造器</h4><blockquote>
<p>​    构造器的作用：</p>
</blockquote>
<ul>
<li>1.创建对象</li>
<li>2.初始化对象的信息</li>
</ul>
<blockquote>
<p>​    2.使用说明：</p>
</blockquote>
<ul>
<li>1.如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li>
<li>2.定义构造器的格式：权限修饰符  类名(形参列表){}</li>
<li>3.一个类中定义的多个构造器，彼此构成重载</li>
<li>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li>
<li>5.一个类中，至少会有一个构造器。</li>
</ul>
<h4 id="6）this关键字"><a href="#6）this关键字" class="headerlink" title="6）this关键字"></a>6）this关键字</h4><p>1.可以调用的结构：属性、方法；构造器</p>
<blockquote>
<pre><code>     2.this调用属性、方法：
</code></pre>
</blockquote>
<p>​    this理解为：当前对象  或 当前正在创建的对象</p>
<p>2.1  在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，</p>
<ul>
<li>  通常情况下，我们都择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式</li>
<li>  的使用”this.变量”的方式，表明此变量是属性，而非形参。</li>
</ul>
<blockquote>
<p>​    3.this调用构造器：</p>
</blockquote>
<p>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器<br>② 构造器中不能通过”this(形参列表)”方式调用自己<br>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”<br>④ 规定：”this(形参列表)”必须声明在当前构造器的首行<br>⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p>
<h4 id="7-package"><a href="#7-package" class="headerlink" title="7) package"></a>7) package</h4><blockquote>
<p>​    JDK中的主要包介绍</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211017220322671.png" alt="image-20211017220322671"></p>
<h2 id="5-面向对象——中"><a href="#5-面向对象——中" class="headerlink" title="5.面向对象——中"></a>5.面向对象——中</h2><h4 id="1-继承性"><a href="#1-继承性" class="headerlink" title="1) 继承性"></a>1) 继承性</h4><blockquote>
<p>​    1.为什么要有类的继承性？(继承性的好处）</p>
</blockquote>
<ul>
<li>① 减少了代码的冗余，提高了代码的复用性</li>
<li>② 便于功能的扩展</li>
<li>③ 为之后多态性的使用，提供了前提</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211017220510110.png" alt="image-20211017220510110"></p>
<blockquote>
<p>​    2.继承性的格式：</p>
</blockquote>
<p>class A extends B{}</p>
<ul>
<li>   A:子类、派生类、subclass</li>
<li>   B:父类、超类、基类、superclass</li>
</ul>
<blockquote>
<p>​    3.子类继承父类以后有哪些不同？</p>
</blockquote>
<ul>
<li>一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的<strong>属性</strong>和<strong>方法</strong>。<ul>
<li>特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。</li>
</ul>
</li>
<li>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。<ul>
<li>   子类和父类的关系，不同于子集和集合的关系。</li>
<li>   extends：延展、扩展</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    4.Java中继承性的说明</p>
</blockquote>
<p>1.一个类可以被多个子类继承。<br>2.Java中类的单继承性：一个类只能有一个父类<br>3.子父类是相对的概念。<br>4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类<br>5.子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法</p>
<blockquote>
<p>​    5.java.lang.Object类的理解</p>
</blockquote>
<ol>
<li>如果我们没显式的声明一个类的父类的话，则此类继承于java.lang.Object类</li>
<li>所的java类（除java.lang.Object类之外都直接或间接的继承于java.lang.Object类</li>
<li>意味着，所的java类具有java.lang.Object类声明的功能。</li>
</ol>
<h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2) 方法的重写"></a>2) 方法的重写</h4><blockquote>
<p>​    1.什么是方法的重写(override 或 overwrite)？</p>
</blockquote>
<p>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作.</p>
<blockquote>
<p>​    2. 应用：</p>
</blockquote>
<p>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。</p>
<blockquote>
<p>​    3.重写的规则：</p>
</blockquote>
<p>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</p>
<p> ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p>
<p>返回值：       </p>
<ul>
<li><table>
<thead>
<tr>
<th>父类：void</th>
<th>子类：void</th>
</tr>
</thead>
<tbody><tr>
<td>父类：A类</td>
<td>子类：A类或者A类的子类</td>
</tr>
<tr>
<td>父类：基本数据类型</td>
<td>子类：和父类相同</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>特殊情况</strong>：子类不能重写父类中声明为private权限的方法</p>
<p>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候</p>
<p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写，要么都声明为static的（不是重写)。    </p>
<blockquote>
<p>​    5.区分方法的重写和重载？</p>
</blockquote>
<p>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p>
<p><em>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</em></p>
<p>而对于<strong>多态</strong>，只等到方法<strong>调用</strong>的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。 </p>
<h4 id="3-super关键字"><a href="#3-super关键字" class="headerlink" title="3) super关键字"></a>3) super关键字</h4><blockquote>
<p>​    1.super 关键字可以理解为：父类的</p>
</blockquote>
<blockquote>
<p>​    2.可以用来调用的结构：</p>
</blockquote>
<p>属性、方法、构造器</p>
<blockquote>
<p>​    3.super调用属性、方法：</p>
</blockquote>
<ul>
<li> 我们可以在子类的方法或构造器中。通过使用”<strong>super.属性”或”super.方法</strong>“的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li>
<li> 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中<strong>调用父类</strong>中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li>
<li> 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</li>
</ul>
<blockquote>
<p>​    4.super调用构造器：</p>
</blockquote>
<ul>
<li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li>
<li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li>
<li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二一，不能同时出现</li>
<li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li>
<li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li>
</ul>
<h4 id="4-子类对象实例化全过程"><a href="#4-子类对象实例化全过程" class="headerlink" title="4) 子类对象实例化全过程"></a>4) 子类对象实例化全过程</h4><blockquote>
<p>​    1.从结果上看：继承性</p>
</blockquote>
<ul>
<li>子类继承父类以后，就获取了父类中声明的属性或方法。</li>
<li>创建子类的对象，在堆空间中，就会加载所父类中声明的属性。</li>
</ul>
<blockquote>
<p>​    2.从过程上看：</p>
</blockquote>
<p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用。</p>
<blockquote>
<p>​    3.强调说明：</p>
</blockquote>
<p>虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p>
<h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5) 多态性"></a>5) 多态性</h4><blockquote>
<p>​    1.多态性的理解：可以理解为一个事物的多种形态。</p>
</blockquote>
<blockquote>
<p>​    2.何为多态性：</p>
</blockquote>
<p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//举例：</span>
Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    3.多态性的使用：虚拟方法调用</p>
</blockquote>
<ul>
<li><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p>
</li>
<li><p>总结：编译，看左边；运行，看右边。</p>
</li>
</ul>
<blockquote>
<p>​    4.多态性的使用前提：</p>
</blockquote>
<p>① 类的继承关系  ② 方法的重写</p>
<blockquote>
<p>​    5.多态性的应用举例：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">举例一：
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Animal animal = new Dog();</span>
        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

举例二：
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token punctuation">}</span>

举例三：
<span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doData</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//conn = new MySQlConnection(); / conn = new OracleConnection();</span>
                <span class="token comment" spellcheck="true">//规范的步骤去操作数据</span>
<span class="token comment" spellcheck="true">//        conn.method1();</span>
<span class="token comment" spellcheck="true">//        conn.method2();</span>
<span class="token comment" spellcheck="true">//        conn.method3();</span>
        
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    6.多态性使用的注意点：</p>
</blockquote>
<p>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边)</p>
<blockquote>
<p>​    7.关于向上转型与向下转型：</p>
</blockquote>
<ul>
<li><p>向上转型：多态</p>
</li>
<li><p>向下转型：类型转换符（）</p>
</li>
</ul>
<p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。</p>
<p><strong>注意:</strong></p>
<p>① 使用强转时，可能出现ClassCastException的异常。</p>
<p>② 为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p>
<blockquote>
<p>​    8. instanceof的使用：</p>
</blockquote>
<p>① a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。</p>
<p>② 如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。</p>
<p>③ 要求a所属的类与类A必须是子类和父类的关系，否则编译错误。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018000554514.png" alt="image-20211018000554514"></p>
<blockquote>
<p>​    9.面试题：</p>
</blockquote>
<p><strong>1.谈谈你对多态性的理解？</strong></p>
<p>① 实现代码的通用性。</p>
<p>② Object类中定义的public boolean equals(Object obj){  }</p>
<p>  JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</p>
<p>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</p>
<p><strong>2.多态是编译时行为还是运行时行为？</strong></p>
<p>编译，看左边；运行，看右边。</p>
<h4 id="6-Object类的使用"><a href="#6-Object类的使用" class="headerlink" title="6) Object类的使用"></a>6) Object类的使用</h4><blockquote>
<p>​    1.java.lang.Object类的说明：</p>
</blockquote>
<p>1.Object类是所Java类的根父类</p>
<p>2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 </p>
<p>3.Object类中的功能(属性、方法)就具通用性。</p>
<p>方法：equals() / toString() / getClass() /hashCode() / clone() / finalize()、wait() 、 notify()、notifyAll()</p>
<ol start="4">
<li>Object类只声明了一个空参的构造器</li>
</ol>
<blockquote>
<p>​    2.equals()方法</p>
</blockquote>
<ol>
<li>是一个方法，而非运算符</li>
<li>只能适用于引用数据类型</li>
<li>Object类中equals()的定义：</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p>
<ol start="4">
<li>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</li>
<li>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写</li>
</ol>
<blockquote>
<p>​    3.如何重写equals()</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//手动重写举例：</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
String name<span class="token punctuation">;</span>
<span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//重写其equals()方法</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> u<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4.== 运算符的使用：</p>
</blockquote>
<ol>
<li><p>可以使用在基本数据类型变量和引用数据类型变量中</p>
</li>
<li><p>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p>
</li>
<li><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p>
</li>
</ol>
<p><strong>补充</strong>： == 符号使用时，必须保证符号左右两边的变量类型一致</p>
<h4 id="7-Java中的JUnit单元测试"><a href="#7-Java中的JUnit单元测试" class="headerlink" title="7) Java中的JUnit单元测试"></a>7) Java中的JUnit单元测试</h4><p><strong>步骤：</strong></p>
<ul>
<li>1.中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步</li>
<li>2.创建Java类，进行单元测试。</li>
<li>此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器</li>
<li>3.此类中声明单元测试方法。</li>
<li>此时的单元测试方法：方法的权限是public,没返回值，没形参</li>
<li></li>
<li>4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</li>
<li></li>
<li>5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。</li>
<li>6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</li>
</ul>
<h4 id="8-包装类的使用"><a href="#8-包装类的使用" class="headerlink" title="8) 包装类的使用"></a>8) 包装类的使用</h4><blockquote>
<p>​    1.为什么要有包装类(或封装类）</p>
</blockquote>
<p>为了使基本数据类型的变量具有类的特征，引入包装类。</p>
<blockquote>
<p>​    2.基本数据类型与对应的包装类：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018001353022.png" alt="image-20211018001353022"></p>
<blockquote>
<p>​    3.需要掌握的类型间的转换：（基本数据类型、包装类、String）</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018001416347.png" alt="image-20211018001416347"></p>
<blockquote>
<p>​    简易版：</p>
</blockquote>
<ul>
<li><p>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱</p>
</li>
<li><p>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)</p>
</li>
<li><p>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</p>
<p>注意：转换时，可能会报NumberFormatException</p>
</li>
</ul>
<p><strong>应用场景举例：</strong></p>
<p>① Vector类中关于添加元素，只定义了形参为Object类型的方法：</p>
<p>v.addElement(Object obj);   //基本数据类型 —&gt;包装类 —&gt;使用多态</p>
<h2 id="6-面向对象——下"><a href="#6-面向对象——下" class="headerlink" title="6.面向对象——下"></a>6.面向对象——下</h2><h4 id="1-static-关键字"><a href="#1-static-关键字" class="headerlink" title="1) static 关键字"></a>1) static 关键字</h4><blockquote>
<p>​    1.可以用来修饰的结构：主要用来修饰类的内部结构</p>
</blockquote>
<p>属性、方法、代码块、内部类</p>
<blockquote>
<p>​    2.static修饰属性：静态变量（或类变量）</p>
</blockquote>
<ul>
<li><p>属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</p>
<ul>
<li><p>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p>
</li>
<li><p>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p>
</li>
</ul>
</li>
<li><p>① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</p>
</li>
<li><p>② 静态变量的加载要早于对象的创建。</p>
</li>
<li><p>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p>
</li>
</ul>
<blockquote>
<p>​    3.静态变量内存解析：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018200553246.png" alt="image-20211018200553246"></p>
<blockquote>
<p>​    4.static修饰方法：静态方法、类方法</p>
</blockquote>
<p>① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用</p>
<p>② 静态方法中，只能调用静态的方法或属性</p>
<p>③ 非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>
<blockquote>
<p>​    5. static的注意点：</p>
</blockquote>
<p>在静态的方法内，不能使用this关键字、super关键字</p>
<p>关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</p>
<blockquote>
<p>​    6.如何判定属性和方法应该使用static关键字：</p>
</blockquote>
<ul>
<li><p>关于属性</p>
<ul>
<li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</li>
<li>类中的常量也常常声明为static</li>
</ul>
</li>
<li><p>关于方法</p>
<ul>
<li><p>操作静态属性的方法，通常设置为static的</p>
</li>
<li><p>工具类中的方法，习惯上声明为static的。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    7.使用举例：</p>
</blockquote>
<p>举例一：Arrays、Math、Collections等工具类</p>
<p>举例二：单例模式</p>
<h4 id="2-main-方法"><a href="#2-main-方法" class="headerlink" title="2) main()方法"></a>2) main()方法</h4><ul>
<li><ol>
<li>main()方法作为程序的入口</li>
</ol>
</li>
<li><ol start="2">
<li>main()方法也是一个普通的静态方法</li>
</ol>
</li>
<li><ol start="3">
<li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li>
</ol>
</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018201041980.png" alt="image-20211018201041980"></p>
<h4 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3) 代码块"></a>3) 代码块</h4><blockquote>
<p>​    1.代码块的作用：用来初始化类、对象的信息</p>
</blockquote>
<blockquote>
<p>​    2.分类：代码块要是使用修饰符，只能使用static</p>
</blockquote>
<p>分类：静态代码块  vs 非静态代码块</p>
<blockquote>
<p>​    3.静态代码块：</p>
</blockquote>
<ul>
<li>内部可以输出语句</li>
<li><strong>随着类的加载而执行,而且只执行一次</strong></li>
<li>作用：初始化类的信息</li>
<li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序</li>
<li>执行静态代码块的执行要优先于非静态代码块的执行</li>
<li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li>
</ul>
<blockquote>
<p>​    4.非静态代码块：</p>
</blockquote>
<ul>
<li>内部可以输出语句</li>
<li><strong>随着对象的创建而执行</strong></li>
<li>每创建一个对象，就执行一次非静态代码块</li>
<li>作用：可以在创建对象时，对对象的属性等进行初始化</li>
<li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li>
<li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li>
</ul>
<blockquote>
<p>​    5.属性的赋值顺序</p>
</blockquote>
<ul>
<li>①默认初始化</li>
<li>②显式初始化/⑤在代码块中赋值</li>
<li>③构造器中初始化</li>
<li>④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值</li>
</ul>
<p>执行的先后顺序：① - ② / ⑤ - ③ - ④</p>
<h4 id="4-final-关键字"><a href="#4-final-关键字" class="headerlink" title="4) final 关键字"></a>4) final 关键字</h4><blockquote>
<p>​    1.可以用来修饰：类、方法、变量</p>
</blockquote>
<blockquote>
<p>​    2.具体的：</p>
</blockquote>
<ul>
<li><p>final 用来修饰一个类:<strong>此类不能被其他类所继承。</strong></p>
<ul>
<li>比如：String类、System类、StringBuffer类</li>
</ul>
</li>
<li><p>final 用来修饰方法：<strong>表明此方法不可以被重写</strong></p>
<ul>
<li>比如：Object类中getClass();</li>
</ul>
</li>
<li><p>final 用来修饰变量：<strong>此时的”变量”就称为是一个常量</strong></p>
<ul>
<li>1.final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始</li>
<li><ol start="2">
<li>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li>
</ol>
</li>
</ul>
</li>
<li><p>static final 用来修饰属性：<strong>全局常量</strong></p>
</li>
</ul>
<h4 id="5-abstract-关键字"><a href="#5-abstract-关键字" class="headerlink" title="5) abstract 关键字"></a>5) abstract 关键字</h4><blockquote>
<p>​    1.可以用来修饰：类、方法</p>
</blockquote>
<blockquote>
<p>​    2.具体的：</p>
</blockquote>
<p><strong>abstract修饰类：抽象类</strong></p>
<ul>
<li>此类不能实例化</li>
<li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li>
</ul>
<p><strong>abstract修饰方法：抽象方法</strong></p>
<ul>
<li><pre><code>    抽象方法只方法的声明，没方法体
</code></pre>
</li>
<li><pre><code>    包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。
</code></pre>
</li>
<li><pre><code>    若子类重写了父类中的所的抽象方法后，此子类方可实例化
</code></pre>
</li>
<li><pre><code>    若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰
</code></pre>
</li>
</ul>
<blockquote>
<p>​    3.注意点：</p>
</blockquote>
<ul>
<li><p>1.abstract不能用来修饰：属性、构造器等结构</p>
</li>
<li><p>2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p>
</li>
</ul>
<h4 id="6-interface-接口"><a href="#6-interface-接口" class="headerlink" title="6) interface 接口"></a>6) interface 接口</h4><blockquote>
<p>​    1.使用说明：</p>
</blockquote>
<ul>
<li>1.接口使用interface来定义</li>
</ul>
<ul>
<li>2.Java中，接口和类是并列的两个结构</li>
<li>3.如何定义接口：定义接口中的成员</li>
</ul>
<ul>
<li><p>3.1 JDK7及以前：只能定义全局常量和抽象方法</p>
<pre><code>- 全局常量：public static final的.但是书写时，可以省略不写
- 抽象方法：public abstract的
</code></pre>
</li>
<li><p>3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略</p>
</li>
<li><ol start="4">
<li>接口中不能定义构造器的！意味着<strong>接口不可以实例化</strong></li>
</ol>
</li>
<li><ol start="5">
<li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li>
</ol>
<ul>
<li><p>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</p>
</li>
<li><p>如果实现类没覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p>
</li>
</ul>
</li>
<li><ol start="6">
<li>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</li>
</ol>
<ul>
<li>格式：class AA extends BB implements CC,DD,EE</li>
</ul>
</li>
<li><ol start="7">
<li>接口与接口之间可以继承，而且可以多继承</li>
</ol>
</li>
<li><ol start="8">
<li>接口的具体使用，体现多态性</li>
</ol>
</li>
<li><ol start="9">
<li>接口，实际上可以看做是一种规范</li>
</ol>
</li>
</ul>
<blockquote>
<p>​    2.面向接口编程的思想</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018222932796.png" alt="image-20211018222932796"></p>
<p>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个</p>
<blockquote>
<p>​    3.Java8中关于接口的新规范</p>
</blockquote>
<ul>
<li>知识点1：接口中定义的静态方法，只能通过接口来调用。</li>
<li>知识点2：通过实现类的对象，可以调用接口中的默认方法。如果实现类<strong>重写了接口</strong>中的默认方法，调用时，仍然调用的是重写以后的方法</li>
<li>知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了<strong>同名同参数的</strong>默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则</li>
<li>知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突。</li>
<li>知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用自己定义的重写的方法</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用的是父类中声明的</span>
        <span class="token comment" spellcheck="true">//调用接口中的默认方法</span>
        CompareA<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CompareB<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    抽象类和接口的异同？</p>
</blockquote>
<ul>
<li>相同点：不能实例化；都可以包含抽象方法的</li>
<li>不同点：<ul>
<li>把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明</li>
<li>2）类：单继承性    接口：多继承</li>
</ul>
</li>
</ul>
<h4 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7) 内部类"></a>7) 内部类</h4><blockquote>
<p>​    1.定义：</p>
</blockquote>
<p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</p>
<blockquote>
<p>​    2.内部类的分类：</p>
</blockquote>
<p>成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)</p>
<blockquote>
<p>​    3.成员内部类的理解：</p>
</blockquote>
<p><strong>一方面，作为外部类的成员：</strong></p>
<ul>
<li>调用外部类的结构</li>
<li>可以被static修饰</li>
<li>可以被4种不同的权限修饰</li>
</ul>
<p><strong>另一方面，作为一个类：</strong></p>
<ul>
<li><pre><code>        类内可以定义属性、方法、构造器等
</code></pre>
</li>
<li><pre><code>        可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承
</code></pre>
</li>
<li><pre><code>        可以被abstract修饰
</code></pre>
</li>
</ul>
<blockquote>
<p>​    4.成员内部类：</p>
</blockquote>
<ul>
<li>4.1如何创建成员内部类的对象？(静态的，非静态的)</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建静态的Dog内部类的实例(静态的成员内部类):</span>
person<span class="token punctuation">.</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//创建非静态的Bird内部类的实例(非静态的成员内部类):</span>
<span class="token comment" spellcheck="true">//Person.Bird bird = new Person.Bird();//错误的</span>
Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Person<span class="token punctuation">.</span>Bird bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>4.2如何在成员内部类中调用外部类的结构？</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    String name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//非静态成员内部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>
        String name <span class="token operator">=</span> <span class="token string">"杜鹃"</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法的形参</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部类的属性</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部类的属性</span>
        <span class="token comment" spellcheck="true">//Person.this.eat();</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    5.局部内部类的使用：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回一个实现了Comparable接口的类的对象</span>
<span class="token keyword">public</span> Comparable <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//方式一：</span>
    <span class="token keyword">class</span> <span class="token class-name">Mycomparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//方式二：</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>总结：</strong></p>
<p>成员内部类和局部内部类，在编译以后，都会生成字节码文件。</p>
<p>格式： 成员内部类：外部类$内部类名.class</p>
<p>​            局部内部类：外部类$数字 内部类名.class</p>
<h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><h4 id="1-异常"><a href="#1-异常" class="headerlink" title="1) 异常"></a>1) 异常</h4><blockquote>
<p>​    1. 异常的体系结构</p>
</blockquote>
<ul>
<li>java.lang.Throwable<ul>
<li><pre><code>    |-----java.lang.Error:一般不编写针对性的代码进行处理。
</code></pre>
</li>
<li><pre><code>    |-----java.lang.Exception:可以进行异常的处理    * |------**编译时异常(checked)**      * |-----IOException        *                         |-----FileNotFoundException      * |-----ClassNotFoundException    * |------**运行时异常**(unchecked,RuntimeException)      *                     |-----NullPointerException      *                     |-----ArrayIndexOutOfBoundsException      *                     |-----ClassCastException      *                     |-----NumberFormatException      *                     |-----InputMismatchException      *                     |-----ArithmeticException
</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018230857756.png" alt="image-20211018230857756"></p>
<blockquote>
<p>​    2.从程序执行过程，看编译时异常和运行时异常</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211018230945731.png" alt="image-20211018230945731"></p>
<p>编译时异常：执行javac.exe命名时，可能出现的异常</p>
<p>运行时异常：执行java.exe命名时，出现的异常</p>
<blockquote>
<p>​    3.常见的异常类型，请举例说明：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>以下是运行时异常<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token comment" spellcheck="true">//ArithmeticException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//InputMismatchException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//NumberFormatException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        String str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//ClassCastException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//IndexOutOfBoundsException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//ArrayIndexOutOfBoundsException</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//StringIndexOutOfBoundsException</span>
        String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//NullPointerException</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
<span class="token comment" spellcheck="true">//        int[] arr = null;</span>
<span class="token comment" spellcheck="true">//        System.out.println(arr[3]);</span>
        
        String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
        str <span class="token operator">=</span> null<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>以下是编译时异常<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="2-异常的处理"><a href="#2-异常的处理" class="headerlink" title="2) 异常的处理"></a>2) 异常的处理</h4><blockquote>
<p>​    1.java异常处理的抓抛模型</p>
</blockquote>
<p><strong>过程一：</strong>“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</p>
<ol>
<li><p>并将此对象抛出。</p>
</li>
<li><p>一旦抛出对象以后，其后的代码就不再执行。</p>
<p><strong>关于异常对象的产生：</strong></p>
</li>
</ol>
<p>① 系统自动生成的异常对象</p>
<p>② 手动的生成一个异常对象，并抛出（throw）</p>
<p><strong>过程二</strong>：”抓”：可以理解为异常的处理方式：① try-catch-finally  ② throws</p>
<blockquote>
<p>​    2.异常处理方式一：try-catch-finally</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//可能出现异常的代码</span>
  
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式1</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式2</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//处理异常的方式3</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">finally</span><span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">//一定会执行的代码</span>
  <span class="token punctuation">}</span>
</code></pre>
<p><strong>说明：</strong></p>
<ol>
<li>finally是可选的。</li>
<li>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li>
<li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没写finally的情况。继续执行其后的代码</li>
<li>catch中的异常类型如果没子父类关系，则谁声明在上，谁声明在下无所谓。catch中的异常类型如果满足子父类关系，则要求<strong>子类一定声明在父类的上面</strong>。否则，报错</li>
<li>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</li>
<li>在try结构中声明的变量，再出了try结构以后，就不能再被调用</li>
<li>try-catch-finally结构可以嵌套</li>
</ol>
<blockquote>
<p>​    2.finally</p>
</blockquote>
<p>1.finally是可选的</p>
<p>2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况。</p>
<p>3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</p>
<blockquote>
<p>​    3.final、finally、finalize三者的区别？</p>
</blockquote>
<p><strong>类似：</strong></p>
<ul>
<li>throw 和 throws</li>
<li>Collection 和 Collections</li>
<li>String 、StringBuffer、StringBuilder</li>
<li>ArrayList 、 LinkedList</li>
<li>HashMap 、LinkedHashMap</li>
<li>重写、重载</li>
</ul>
<p><strong>结构不相似的：</strong></p>
<ul>
<li>抽象类、接口</li>
<li>== 、 equals()</li>
<li>sleep()、wait()</li>
</ul>
<blockquote>
<p>​    3.异常处理方式二：</p>
</blockquote>
<p>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。</p>
<p>一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>
<blockquote>
<p>​    4. 对比两种处理方式</p>
</blockquote>
<p>try-catch-finally:真正的将异常给处理掉了。</p>
<p>throws的方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。 </p>
<blockquote>
<p>​    5. 体会开发中应该如何选择两种处理方式？</p>
</blockquote>
<p>如果父类中被重写的方法没throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中异常，必须使用try-catch-finally方式处理。</p>
<p>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</p>
<p>方法重写的规则之一：</p>
<p><strong>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</strong></p>
<h4 id="3-手动抛出异常"><a href="#3-手动抛出异常" class="headerlink" title="3) 手动抛出异常"></a>3) 手动抛出异常</h4><blockquote>
<p>​    1.使用说明</p>
</blockquote>
<p>在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象。</p>
<blockquote>
<p>​    2.throw 和  throws区别：</p>
</blockquote>
<ul>
<li>throw 表示抛出一个异常类的对象，生成异常对象的过程。声明在方法体内。</li>
<li>throws 属于异常处理的一种方式，声明在方法的声明处。</li>
</ul>
<blockquote>
<p>​    3.典型例题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//手动抛出异常对象</span>
<span class="token comment" spellcheck="true">//            throw new RuntimeException("您输入的数据非法！");</span>
<span class="token comment" spellcheck="true">//            throw new Exception("您输入的数据非法！");</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
<span class="token punctuation">}</span>

</code></pre>
<h4 id="4-自定义异常类"><a href="#4-自定义异常类" class="headerlink" title="4) 自定义异常类"></a>4) 自定义异常类</h4><blockquote>
<p>​    1.如何自定义一个异常类？</p>
</blockquote>
<ol>
<li><p>继承于现的异常结构：RuntimeException 、Exception</p>
</li>
<li><p>提供全局常量：serialVersionUID</p>
</li>
<li><p>提供重载的构造器</p>
</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7034897193246939L<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<h2 id="8-多线程"><a href="#8-多线程" class="headerlink" title="8.多线程"></a>8.多线程</h2><h4 id="1）程序、进程、线程"><a href="#1）程序、进程、线程" class="headerlink" title="1）程序、进程、线程"></a>1）程序、进程、线程</h4><blockquote>
<p>​    01. 程序(programm)</p>
</blockquote>
<p>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</p>
<blockquote>
<p>​    02. 进程(process)</p>
</blockquote>
<p>概念：程序的一次执行过程，或是正在运行的一个程序。</p>
<p>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>
<blockquote>
<p>​    03. 线程(thread)</p>
</blockquote>
<p>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>
<p>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022211236934.png" alt="image-20211022211236934"></p>
<ul>
<li>进程可以细化为多个线程。</li>
<li>每个线程，拥有自己独立的：栈、程序计数器</li>
<li>多个线程，共享同一个进程中的结构：方法区、堆。</li>
</ul>
<h4 id="2-并行与并发"><a href="#2-并行与并发" class="headerlink" title="2) 并行与并发"></a>2) 并行与并发</h4><blockquote>
<p>​    01. 单核CPU与多核CPU的理解</p>
</blockquote>
<p>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。<strong>例如</strong>：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。</p>
<p>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</p>
<p>一个Java应用程序java.exe，其实至少三个线程：<strong>main()主线程，gc()垃圾回收线程，异常处理线程</strong>。当然如果发生异常，会影响主线程。</p>
<blockquote>
<p>​    02. 并行与并发的理解</p>
</blockquote>
<p>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p>
<p>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</p>
<h4 id="3-创建多线程的两种方式"><a href="#3-创建多线程的两种方式" class="headerlink" title="3) 创建多线程的两种方式"></a>3) 创建多线程的两种方式</h4><blockquote>
<p>​    方式一：继承Thread类的方式：</p>
</blockquote>
<ul>
<li><ol>
<li>创建一个继承于Thread类的子类</li>
</ol>
</li>
<li><ol start="2">
<li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li>
</ol>
</li>
<li><ol start="3">
<li>创建Thread类的子类的对象</li>
</ol>
</li>
<li><ol start="4">
<li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li>
</ol>
</li>
</ul>
<p>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。</p>
<p>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</p>
<blockquote>
<p>​    方式二：实现Runnable接口的方式：</p>
</blockquote>
<ul>
<li><ol>
<li>创建一个实现了Runnable接口的类</li>
</ol>
</li>
<li><ol start="2">
<li>实现类去实现Runnable中的抽象方法：run()</li>
</ol>
</li>
<li><ol start="3">
<li>创建实现类的对象</li>
</ol>
</li>
<li><ol start="4">
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
</ol>
</li>
<li><ol start="5">
<li>通过Thread类的对象调用start()</li>
</ol>
</li>
</ul>
<blockquote>
<p>​    3.两种方式的对比：</p>
</blockquote>
<p>开发中：优先选择：实现Runnable接口的方式</p>
<p><strong>原因：</strong></p>
<ul>
<li>实现的方式没类的单继承性的局限性</li>
<li>实现的方式更适合来处理多个线程共享数据的情况。</li>
</ul>
<p><strong>相同点：</strong></p>
<ul>
<li>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</li>
<li>目前两种方式，要想启动线程，都是调用的Thread类中的start()。</li>
</ul>
<h4 id="4-Thread类中的常用方法"><a href="#4-Thread类中的常用方法" class="headerlink" title="4) Thread类中的常用方法"></a>4) Thread类中的常用方法</h4><blockquote>
<p>​    1.常用方法</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. start():启动当前线程；调用当前线程的run()</span>

<span class="token comment" spellcheck="true">//2. run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</span>

<span class="token comment" spellcheck="true">//3. currentThread():静态方法，返回执行当前代码的线程</span>

<span class="token comment" spellcheck="true">//4. getName():获取当前线程的名字</span>

<span class="token comment" spellcheck="true">//5. setName():设置当前线程的名字</span>

<span class="token comment" spellcheck="true">//6. yield():释放当前cpu的执行权</span>

<span class="token comment" spellcheck="true">//7. join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</span>

<span class="token comment" spellcheck="true">//8. stop():已过时。当执行此方法时，强制结束当前线程。</span>

<span class="token comment" spellcheck="true">//9. sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</span>

<span class="token comment" spellcheck="true">//10. isAlive():判断当前线程是否存活</span>
</code></pre>
<blockquote>
<p>​    2.线程的优先级</p>
</blockquote>
<p>MAX_PRIORITY：10</p>
<p>MIN _PRIORITY：1</p>
<p>NORM_PRIORITY：5  –&gt;默认优先级</p>
<p><strong>如何获取和设置当前线程的优先级</strong>？</p>
<p>getPriority():获取线程的优先级</p>
<p>setPriority(int p):设置线程的优先级</p>
<p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，<strong>高优先级的线程高概率的情况下被执行</strong>。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</p>
<p>线程通信：<strong>wait() / notify() / notifyAll()</strong> :此三个方法定义在Object类中的。</p>
<blockquote>
<p>​    3.线程的分类</p>
</blockquote>
<p>一种是守护线程，一种是用户线程。</p>
<h4 id="5-Thread的生命周期"><a href="#5-Thread的生命周期" class="headerlink" title="5) Thread的生命周期"></a>5) Thread的生命周期</h4><p><img src="/../images/2021-10-29-JavaSE/image-20211022215952796.png" alt="image-20211022215952796"></p>
<p><strong>说明：</strong></p>
<p>1.生命周期关注两个概念：状态、相应的方法</p>
<p>2.关注：状态a–&gt;状态b:哪些方法执行了（回调方法）</p>
<p>​                某个方法主动调用：状态a–&gt;状态b</p>
<p>3.阻塞：临时状态，不可以作为最终状态<br>  死亡：最终状态。</p>
<h4 id="6）线程的同步机制"><a href="#6）线程的同步机制" class="headerlink" title="6）线程的同步机制"></a>6）线程的同步机制</h4><blockquote>
<p>​    方式一：同步代码块</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//需要被同步的代码块</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>说明：</strong></p>
<ol>
<li>操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</li>
<li><strong>共享数据</strong>：多个线程共同操作的变量。比如：ticket就是共享数据。</li>
<li><strong>同步监视器</strong>，俗称：锁。任何一个类的对象，都可以充当锁。要求：多个线程必须要共用同一把锁。</li>
</ol>
<p>补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</p>
<p>在继承Thread类创建多线程的方式中，<strong>慎用this充当同步监视器</strong>，考虑使用当前类充当同步监视器。</p>
<blockquote>
<p>​    方式二：同步方法</p>
</blockquote>
<p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p>
<p><strong>关于同步方法的总结：</strong></p>
<ol>
<li><p>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</p>
</li>
<li><p>非静态的同步方法，同步监视器是：this</p>
</li>
</ol>
<p>静态的同步方法，同步监视器是：当前类本身</p>
<blockquote>
<p>​    方式三：Lock锁  — JDK5.0新增</p>
</blockquote>
<ol>
<li>面试题：synchronized 与 Lock的异同？</li>
</ol>
<ul>
<li>相同：二者都可以解决线程安全问题</li>
<li>不同：<ul>
<li>synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</li>
<li>Lock需要手动的启动同步（lock()，同时结束同步也需要手动的实现（unlock()）</li>
</ul>
</li>
</ul>
<p><strong>使用的优先顺序：</strong></p>
<p> Lock —&gt; 同步代码块（已经进入了方法体，分配了相应资源 ) —&gt; 同步方法（在方法体之外)</p>
<blockquote>
<p>​    3.利弊</p>
</blockquote>
<p>同步的方式，解决了线程的安全问题。—好处</p>
<p>操作同步代码时，只能一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</p>
<h4 id="7-线程通讯"><a href="#7-线程通讯" class="headerlink" title="7) 线程通讯"></a>7) 线程通讯</h4><blockquote>
<p>​    1.线程通信涉及到的三个方法：</p>
</blockquote>
<ul>
<li>wait():一旦执行此方法，当前线程就进入<strong>阻塞</strong>状态，并释放同步监视器。</li>
<li>notify():一旦执行此方法，就会<strong>唤醒</strong>被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li>
<li>notifyAll():一旦执行此方法，就会<strong>唤醒所有</strong>被wait的线程。</li>
</ul>
<blockquote>
<p>​    2.说明：</p>
</blockquote>
<ul>
<li> 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li>
<li> 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。(否则，会出现<strong>IllegalMonitorStateException</strong>异常)</li>
<li> 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li>
</ul>
<blockquote>
<p>​    3.面试题：sleep() 和 wait()的异同？</p>
</blockquote>
<ul>
<li>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li>
<li>2.不同点：<ul>
<li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li>
<li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li>
<li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，<strong>sleep()不会释放锁，wait()会释放锁</strong>。</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    4.小结释放锁的操作：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022221033227.png" alt="image-20211022221033227"></p>
<blockquote>
<p>​    5.小结不会释放锁的操作：</p>
</blockquote>
<p><img src="/../images/2021-10-29-JavaSE/image-20211022221046890.png" alt="image-20211022221046890"></p>
<h4 id="8-JDK5-0新增线程创建"><a href="#8-JDK5-0新增线程创建" class="headerlink" title="8) JDK5.0新增线程创建"></a>8) JDK5.0新增线程创建</h4><blockquote>
<p>​    新增方式一：实现Callable接口。</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建一个实现Callable的实现类</span>
<span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//2.实现Call方法，将此线程需要执行的操作声明在call()</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//3.创建Callable接口实现类的对象</span>
        NumThread numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//4.将此Callable接口实现类的对象传递到FutureTask构造器中，创建FutureTask的对象</span>
        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>numThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>
          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//6.获取Callable中call方法的返回值</span>
            <span class="token comment" spellcheck="true">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>
             Object sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p>
<ol>
<li><p>call()可以返回值的。</p>
</li>
<li><p>call()可以抛出异常，被外面的操作捕获，获取异常的信息</p>
</li>
<li><p>Callable是支持泛型的</p>
</li>
</ol>
<blockquote>
<p>​    新增方式二：使用线程池</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//1. 提供指定线程数量的线程池</span>
        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ThreadPoolExecutor service1 <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> service<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//设置线程池的属性</span>
<span class="token comment" spellcheck="true">//        System.out.println(service.getClass());</span>
<span class="token comment" spellcheck="true">//        service1.setCorePoolSize(15);</span>
<span class="token comment" spellcheck="true">//        service1.setKeepAliveTime();</span>


        <span class="token comment" spellcheck="true">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适合适用于Runnable</span>
        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适合适用于Runnable</span>

<span class="token comment" spellcheck="true">//        service.submit(Callable callable);//适合使用于Callable</span>
        <span class="token comment" spellcheck="true">//3.关闭连接池</span>
        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>好处：</strong></p>
<p>1.提高响应速度（减少了创建新线程的时间）</p>
<p>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p>
<p>3.便于线程管理</p>
<p>​    corePoolSize：核心池的大小</p>
<p>​     maximumPoolSize：最大线程数</p>
<p>​    keepAliveTime：线程没任务时最多保持多长时间后会终止</p>
<h2 id="9-Java常用类"><a href="#9-Java常用类" class="headerlink" title="9.Java常用类"></a>9.Java常用类</h2><h4 id="1）String类"><a href="#1）String类" class="headerlink" title="1）String类"></a>1）String类</h4><blockquote>
<p>​    1.概述</p>
</blockquote>
<p>String:字符串，使用一对””引起来表示。</p>
<ul>
<li>1.String声明为final的，不可被继承</li>
<li>2.String:<ul>
<li>实现了Serializable接口：表示字符串是支持序列化的。</li>
<li>实现了Comparable接口：表示String可以比较大小</li>
</ul>
</li>
<li>3.String内部定义了final char[] value用于存储字符串数据</li>
<li>4.通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。</li>
<li>5.字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</li>
</ul>
<blockquote>
<p>​    2.String的不可变性</p>
</blockquote>
<p><strong>说明:</strong></p>
<p>1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p>2.当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p>3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p>
<p><strong>内存图解:</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023205653151.png" alt="image-20211023205653151"></p>
<blockquote>
<p>​    3.String实例化的不同方式</p>
</blockquote>
<p><strong>3.1 方式说明</strong></p>
<p>方式一：通过字面量定义的方式  String s1 = “javaEE”;<br>方式二：通过new + 构造器的方式 String s3 = new String(“javaEE”);</p>
<p><strong>3.2 面试题</strong><br><strong>String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？</strong><br>两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p>
<p><strong>3.3 图示</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023205841979.png" alt="image-20211023205841979"></p>
<blockquote>
<p>​    4. 字符串拼接方式赋值的对比</p>
</blockquote>
<p><strong>4.1 说明</strong></p>
<p>1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>2.只要其中一个是变量，结果就在堆中。<br>3.如果拼接的结果调用intern()方法，返回值就在常量池中</p>
<blockquote>
<p>​    5.常用方法：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的长度
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>： 返回某索引处的字符
<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断是否是空字符串
String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：将 String 中的所字符转换为小写
String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：使用默认语言环境，将 String 中的所字符转换为大写
String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回字符串的副本，忽略前导空白和尾部空白
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>：比较字符串的内容是否相同
<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：与equals方法类似，忽略大小写
String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：将指定字符串连接到此字符串的结尾。 等价于用“<span class="token operator">+</span>”
<span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span>：比较两个字符串的大小
String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。
String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> ：返回一个新字符串，它是此字符串从beginIndex开始截取到<span class="token function">endIndex</span><span class="token punctuation">(</span>不包含<span class="token punctuation">)</span>的一个子字符串。

<span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>：测试此字符串是否以指定的后缀结束
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span>：测试此字符串是否以指定的前缀开始
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始

<span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>：当且仅当此字符串包含指定的 <span class="token keyword">char</span> 值序列时，返回 <span class="token boolean">true</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最右边出现处的索引
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索

注：indexOf和lastIndexOf方法如果未找到都是返回<span class="token operator">-</span><span class="token number">1</span>
</code></pre>
<p><strong>替换：</strong></p>
<pre class=" language-java"><code class="language-java">String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。
String <span class="token function">replace</span><span class="token punctuation">(</span>CharSequence target<span class="token punctuation">,</span> CharSequence replacement<span class="token punctuation">)</span>：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。
String <span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span>：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。
String <span class="token function">replaceFirst</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> String replacement<span class="token punctuation">)</span>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。
匹配<span class="token operator">:</span>
<span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：告知此字符串是否匹配给定的正则表达式。
切片：
String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span>：根据给定正则表达式的匹配拆分此字符串。
String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。
</code></pre>
<blockquote>
<p>​    6. String与其它结构的转换</p>
</blockquote>
<p><strong>6.1 与基本数据类型、包装类之间的转换</strong></p>
<ul>
<li>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</li>
<li>基本数据类型、包装类 –&gt; String:调用String重载的valueOf(xxx)</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> Intenger<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    String str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String str3 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>
    
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.2 与字符数组之间的转换</strong></p>
<ul>
<li>String –&gt; char[]:调用String的toCharArray()</li>
<li>char[] –&gt; String:调用String的构造器</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//题目： a21cb3</span>

    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.3 与字节数组之间的转换</strong></p>
<ul>
<li><p>编码：String –&gt; byte[]:调用String的getBytes()</p>
</li>
<li><p>解码：byte[] –&gt; String:调用String的构造器</p>
</li>
<li></li>
<li><p>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)</p>
</li>
<li><p>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂</p>
</li>
</ul>
<p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>
    String str1 <span class="token operator">=</span> <span class="token string">"abc123中国"</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行编码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用gbk字符集进行编码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用默认的字符集，进行解码。</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现乱码。原因：编码集和解码集不一致！</span>


    String str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没出现乱码。原因：编码集和解码集一致！</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>6.4 与StringBuffer、StringBuilder之间的转换</strong></p>
<ul>
<li>String –&gt;StringBuffer、StringBuilder:<ul>
<li>调用StringBuffer构造器、</li>
<li>调用StringBuilder构造器</li>
</ul>
</li>
<li>StringBuffer、StringBuilder –&gt;String:<ul>
<li> ①调用String构造器；</li>
<li> ②StringBuffer、StringBuilder的toString()</li>
</ul>
</li>
</ul>
<blockquote>
<p>​    7. JVM中字符串常量池存放位置说明：</p>
</blockquote>
<p>jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在<strong>方法区</strong>（永久区）</p>
<p>jdk 1.7:字符串常量池存储在<strong>堆空间</strong></p>
<p>jdk 1.8:字符串常量池存储在<strong>方法区（元空间）</strong></p>
<blockquote>
<p>​    8. 常见算法题目的考查：</p>
</blockquote>
<p>1）模拟一个trim方法，去除字符串两端的空格。</p>
<p>2）将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p>
<p>3）获取一个字符串在另一个字符串中出现的次数。<br>      比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p>
<p>4）获取两个字符串中最大相同子串。比如：<br>   str1 = “abcwerthelloyuiodef“;str2 = “cvhellobnm”</p>
<p>5）对字符串中字符进行自然顺序排序。</p>
<h4 id="2-StringBuffer、StringBuilder"><a href="#2-StringBuffer、StringBuilder" class="headerlink" title="2) StringBuffer、StringBuilder"></a>2) StringBuffer、StringBuilder</h4><blockquote>
<p>​    1.String、StringBuffer、StringBuilder三者的对比</p>
</blockquote>
<p>String:不可变的字符序列；底层使用char[]存储</p>
<p>StringBuffer:可变的字符序列；<strong>线程安全</strong>的，效率低；底层使用char[]存储</p>
<p>StringBuilder:可变的字符序列；jdk5.0新增的，<strong>线程不安全</strong>的，效率高；底层使用char[]存储</p>
<blockquote>
<p>​    2.StringBuffer与StringBuilder的内存解析</p>
</blockquote>
<p><strong>以StringBuffer为例：</strong></p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[0];</span>
String str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[]{'a','b','c'};</span>

StringBuffer sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char[16];底层创建了一个长度是16的数组。</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value[0] = 'a';</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value[1] = 'b';</span>

StringBuffer sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//char[] value = new char["abc".length() + 16];</span>

<span class="token comment" spellcheck="true">//问题1. System.out.println(sb2.length());//3</span>
<span class="token comment" spellcheck="true">//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span>
    默认情况下，扩容为原来容量的<span class="token number">2</span>倍 <span class="token operator">+</span> <span class="token number">2</span>，同时将原数组中的元素复制到新的数组中。
        
</code></pre>
<p> <strong>指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</strong></p>
<blockquote>
<p>​    3.对比String、StringBuffer、StringBuilder三者的执行效率</p>
</blockquote>
<p>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p>
<blockquote>
<p>​    4.StringBuffer、StringBuilder中的常用方法</p>
</blockquote>
<ul>
<li>增：append(xxx)</li>
<li>删：delete(int start,int end)</li>
<li>改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</li>
<li>查：charAt(int n )</li>
<li>插：insert(int offset, xxx)</li>
<li>长度：length();</li>
<li>*遍历：for() + charAt() / toString()</li>
</ul>
<h4 id="3-JDK8之前日期时间API"><a href="#3-JDK8之前日期时间API" class="headerlink" title="3) JDK8之前日期时间API"></a>3) JDK8之前日期时间API</h4><blockquote>
<p>​    1.获取系统当前时间：System类中的currentTimeMillis()</p>
</blockquote>
<p>long time = System.currentTimeMillis();</p>
<p>//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</p>
<blockquote>
<p>​    2. java.util.Date类与java.sql.Date类</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//构造器一：Date()：创建一个对应当前时间的Date对象</span>
        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sat Feb 16 16:35:31 GMT+08:00 2019</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1550306204104</span>

        <span class="token comment" spellcheck="true">//构造器二：创建指定毫秒数的Date对象</span>
        Date date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>155030620410L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//创建java.sql.Date对象</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>35235325345L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1971-02-13</span>

<span class="token comment" spellcheck="true">//如何将java.util.Date对象转换为java.sql.Date对象</span>
    <span class="token comment" spellcheck="true">//情况一：</span>
        Date date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>2343243242323L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date5 <span class="token operator">=</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date<span class="token punctuation">)</span> date4<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//情况二：</span>
        Date date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3. java.text.SimpleDataFormat类</p>
</blockquote>
<p><strong>SimpleDateFormat对日期Date类的格式化和解析</strong></p>
<p>格式化：日期 —&gt;字符串</p>
<p>解析：    字符串 —&gt; 日期 (格式化的逆过程)</p>
<pre class=" language-java"><code class="language-java">SimpleDateFormat sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment" spellcheck="true">//格式化</span>
        String format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2019-02-18 11:48:27</span>

<span class="token operator">/</span>解析<span class="token operator">:</span>要求字符串必须是符合SimpleDateFormat识别的格式<span class="token punctuation">(</span>通过构造器参数体现<span class="token punctuation">)</span><span class="token punctuation">,</span>
Date date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-18 11:48:27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    4.Calendar类：日历类、抽象类</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.实例化 调用其静态方法getInstance()</span>
 Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//2.常用方法</span>
        <span class="token comment" spellcheck="true">//get()</span>
        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//set()</span>
        <span class="token comment" spellcheck="true">//calendar可变性</span>
         calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//add()</span>
        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//getTime():日历类---> Date</span>
        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//setTime():Date ---> 日历类</span>
        Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-JDK8中新日期时间API"><a href="#4-JDK8中新日期时间API" class="headerlink" title="4) JDK8中新日期时间API"></a>4) JDK8中新日期时间API</h4><blockquote>
<p>​    1.日期时间API的迭代：</p>
</blockquote>
<p>第一代：jdk 1.0 Date类<br>第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br>第三代：jdk 1.8 提出了新的一套API</p>
<blockquote>
<pre><code>     2.前两代存在的问题举例：
</code></pre>
</blockquote>
<ul>
<li>可变性：像日期和时间这样的类应该是不可变的。</li>
<li>偏移性：Date中的年份是从1900开始的，而月份都从0开始。</li>
<li>格式化：格式化只对Date用，Calendar则不行。</li>
<li>此外，它们也不是线程安全的；不能处理闰秒等。</li>
</ul>
<blockquote>
<p>​    3.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime</p>
</blockquote>
<p><strong>3.1 说明：</strong></p>
<p>① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p>
<p>② LocalDateTime相较于LocalDate、LocalTime，使用频率要高</p>
<p>③ 类似于Calendar</p>
<p><strong>3.2 常用方法：</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023215951752.png" alt="image-20211023215951752"></p>
<blockquote>
<p>​    4..时间点：Instant</p>
</blockquote>
<p><strong>4.1 说明：</strong><br>① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br>② 类似于 java.util.Date类</p>
<p><strong>4.2 常用方法：</strong></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023220027154.png" alt="image-20211023220027154"></p>
<blockquote>
<p>​    5.日期时间格式化类：DateTimeFormatter</p>
</blockquote>
<p><strong>5.1 说明：</strong><br>① 格式化或解析日期、时间<br>② 类似于SimpleDateFormat</p>
<p><strong>5.2 常用方法：</strong><br>① 实例化方式：<br>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<p>② 常用方法：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211023220142008.png" alt="image-20211023220142008"></p>
<h4 id="5）Java比较器"><a href="#5）Java比较器" class="headerlink" title="5）Java比较器"></a>5）Java比较器</h4><blockquote>
<p>​    1.Java比较器的使用背景：</p>
</blockquote>
<p>Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>如何实现？使用两个接口中的任何一个：<strong>Comparable 或 Comparator</strong></p>
<blockquote>
<p>​    2.自然排序：使用Comparable接口</p>
</blockquote>
<p><strong>2.1 说明</strong></p>
<ul>
<li><p>像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</p>
</li>
<li><p>2像String、包装类重写compareTo()方法以后，进行了从小到大的排列</p>
</li>
<li><p>重写compareTo(obj)的规则：</p>
<p>​    如果当前对象this大于形参对象obj，则返回正整数，<br>​    如果当前对象this小于形参对象obj，则返回负整数，<br>​    如果当前对象this等于形参对象obj，则返回零。</p>
</li>
<li><p>对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</p>
</li>
</ul>
<p><strong>2.2 自定义类代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            Goods goods <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//方式一：</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>
                rerturn <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//return 0;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeEcxeption</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3.定制排序：使用Comparator接口</p>
</blockquote>
<p><strong>3.1 说明</strong></p>
<p>1.背景：<br>当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序</p>
<p>2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：</p>
<p>如果方法返回正整数，则表示o1大于o2；<br>如果返回0，表示相等；<br>返回负整数，表示o1小于o2。</p>
<p><strong>3.2 代码举例：</strong></p>
<pre class=" language-java"><code class="language-java">Compartor com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compartor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 isntanceof Goods <span class="token operator">&amp;&amp;</span> o2 instanceif Goods<span class="token punctuation">)</span><span class="token punctuation">{</span>
            Goods g1 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
            Goods g2 <span class="token operator">=</span> <span class="token punctuation">(</span>Goods<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>Double<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RunTimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 两种排序方式对比</p>
</blockquote>
<ul>
<li><p>   Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</p>
</li>
<li><p>   Comparator接口属于临时性的比较。</p>
</li>
</ul>
<h4 id="6-其他类"><a href="#6-其他类" class="headerlink" title="6) 其他类"></a>6) 其他类</h4><blockquote>
<p>​    1.System类</p>
</blockquote>
<ul>
<li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p>
</li>
<li><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</p>
</li>
<li><p>方法：</p>
<p>​    native long currentTimeMillis()<br>​    void exit(int status)<br>​    void gc()<br>​    String getProperty(String key)</p>
</li>
</ul>
<blockquote>
<p>​    2.Math类</p>
</blockquote>
<p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p>
<blockquote>
<p>​    3.BigInteger类、BigDecimal类</p>
</blockquote>
<p><strong>说明：</strong></p>
<p>① java.math包的BigInteger可以表示不可变的任意精度的整数。</p>
<p>② 要求数字精度比较高，用到java.math.BigDecimal类</p>
<p><strong>代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    BigInteger bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"12433241123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    BigDeciaml bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDeciaml</span><span class="token punctuation">(</span><span class="token string">"12345.351"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    BigDeciaml bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDeciaml</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span>BigDeciaml<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span>BigDeciaml<span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="10-枚举类和注解"><a href="#10-枚举类和注解" class="headerlink" title="10.枚举类和注解"></a>10.枚举类和注解</h2><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1) 枚举类的使用"></a>1) 枚举类的使用</h4><blockquote>
<p>​    1. 枚举类的说明：</p>
</blockquote>
<ul>
<li>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li>
<li>2.当需要定义一组常量时，强烈建议使用枚举类</li>
<li>3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li>
</ul>
<blockquote>
<p>​    2. 如何自定义枚举类？</p>
</blockquote>
<p><strong>步骤：自定义枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.声明Season对象的属性:private final修饰</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>
    
     <span class="token comment" spellcheck="true">//2.私化类的构造器,并给对象属性赋值</span>
     <span class="token keyword">private</span> <span class="token function">Season</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span>String seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//3.提供当前枚举类的多个对象：public static final的</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//4.其他诉求1：获取枚举类对象的属性</span>
     <span class="token keyword">public</span> String <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    3. jdk 5.0 新增使用enum定义枚举类。</p>
</blockquote>
<p><strong>步骤：//使用enum关键字枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//2.声明Season对象的属性:private final修饰</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>
    
     <span class="token comment" spellcheck="true">//3.私化类的构造器,并给对象属性赋值</span>
     <span class="token keyword">private</span> <span class="token function">Season1</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span>String seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
     <span class="token comment" spellcheck="true">//4.其他诉求1：获取枚举类对象的属性</span>
        <span class="token keyword">public</span> String <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）</p>
</blockquote>
<pre class=" language-java"><code class="language-java">Season summer <span class="token operator">=</span> Season<span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//toString():返回枚举类对象的名称</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//values():返回所的枚举类对象构成的数组</span>
Season1<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> Season1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>
Season winter <span class="token operator">=</span> Season<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>​    5. 使用enum定义枚举类之后，如何让枚举类对象分别实现接口：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>//使用enum关键字枚举类</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> Season <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="2-注解的使用"><a href="#2-注解的使用" class="headerlink" title="2) 注解的使用"></a>2) 注解的使用</h4><blockquote>
<p>​    1. 注解的理解</p>
</blockquote>
<p>① jdk 5.0 新增的功能</p>
<p>② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</p>
<p>③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</p>
<p><strong>框架 = 注解 + 反射机制 + 设计模式</strong></p>
<blockquote>
<p>​    2. 注解的使用示例</p>
</blockquote>
<p>示例一：生成文档相关的注解</p>
<p>示例二：在编译时进行格式检查(JDK内置的个基本注解)</p>
<p>​    @Override: 限定重写父类方法, 该注解只能用于方法</p>
<p>​    @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p>
<p>​    @SuppressWarnings: 抑制编译器警告</p>
<blockquote>
<p>​    3.如何自定义注解：参照@SuppressWarnings定义</p>
</blockquote>
<p>① 注解声明为：@interface</p>
<p>② 内部定义成员，通常使用value表示</p>
<p>③ 可以指定成员的默认值，使用default定义</p>
<p>④ 如果自定义注解没成员，表明是一个标识作用。</p>
<p><strong>说明：</strong></p>
<p>如果注解有成员，在使用注解时，需要指明成员的值。<br>自定义注解必须配上注解的信息处理流程(使用反射)才意义。<br>自定义注解通过都会指明两个元注解：Retention、Target</p>
<p><strong>代码举例：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>MyAnnotations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">,</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>

    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>​    4. 元注解 ：对现有的注解进行解释说明的注解。</p>
</blockquote>
<p><strong>jdk 提供的4种元注解：</strong></p>
<ul>
<li><strong>Retention</strong>：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为\RUNTIME只声明为RUNTIME生命周期的注解，才能通过反射获取。</li>
<li><strong>Target</strong>:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</li>
<li><strong>Documented</strong>:表示所修饰的注解在被javadoc解析时，保留下来。</li>
<li><strong>Inherited</strong>:被它修饰的 Annotation 将具继承性。</li>
</ul>
<p>—&gt;类比：元数据的概念：String name = “Tom”;</p>
<blockquote>
<p>​    5. 如何获取注解信息:通过发射来进行获取、调用。</p>
</blockquote>
<p>前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p>
<blockquote>
<p>​    6.JDK8中注解的新特性：可重复注解、类型注解</p>
</blockquote>
<p><strong>6.1 可重复注解：</strong></p>
<p>① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</p>
<p>② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</p>
<p><strong>6.2 类型注解：</strong></p>
<p>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明。</p>
<p>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p>
<h2 id="11-集合"><a href="#11-集合" class="headerlink" title="11.集合"></a>11.集合</h2><h3 id="1-数组与集合"><a href="#1-数组与集合" class="headerlink" title="1.数组与集合"></a>1.数组与集合</h3><blockquote>
<p>1.集合与数组存储数据概述：</p>
</blockquote>
<p>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。</p>
<blockquote>
<p>2.数组存储的特点：</p>
</blockquote>
<p>一旦初始化以后，其长度就确定了。</p>
<p>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</p>
<p>比如：String[] arr; int[] arr1; Object[] arr2;</p>
<blockquote>
<p>3.数组存储的弊端：</p>
</blockquote>
<ul>
<li>一旦初始化以后，其长度就不可修改。</li>
<li>数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不</li>
<li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li>
<li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</li>
</ul>
<blockquote>
<p>4.集合存储的优点：</p>
</blockquote>
<p>解决数组存储数据方面的弊端。</p>
<h3 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2.Collection接口"></a>2.Collection接口</h3><blockquote>
<p>1.单列集合框架结构</p>
</blockquote>
<ul>
<li><p>Collection接口：单列集合，用来存储一个一个的对象</p>
<ul>
<li><p>List接口:存储有序的，可重复的数据</p>
<ul>
<li>ArrayList、LinkedList、vector</li>
</ul>
</li>
<li><p>​    Set接口：存储无序的，不可重复的数据</p>
<ul>
<li>​    HashSet、LinkedHashSet、TreeSet</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>图示：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211130212217258.png" alt="image-20211130212217258"></p>
<blockquote>
<p>2.Collection接口常用方法：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">addAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span>
<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">contains</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">removeAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span>
<span class="token function">retainsAll</span><span class="token punctuation">(</span>Collection coll<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>
<span class="token function">hasCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>3.Collection集合与数组间的转换</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//集合 ---> 数组： toArray()</span>
Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//数组 --->集合:调用Arrays类的静态方法asList(T ... t)</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>4.使用Collection集合存储对象，要求对象所属的类满足：</p>
</blockquote>
<p>向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals().</p>
<h3 id="3-Iterator接口与foreach循环"><a href="#3-Iterator接口与foreach循环" class="headerlink" title="3.Iterator接口与foreach循环"></a>3.Iterator接口与foreach循环</h3><blockquote>
<p>1.遍历Collection的两种方式：</p>
</blockquote>
<p>① 使用迭代器Iterator  </p>
<p>② foreach循环（或增强for循环）</p>
<blockquote>
<p>2.java.utils包下定义的迭代器接口：Iterator</p>
</blockquote>
<ul>
<li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</li>
<li>GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</li>
</ul>
<pre class=" language-java"><code class="language-java">Iterator iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//hasNext():判断是否还有下一个元素</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//next():①指针下移 ②将下移以后集合位置上的元素返回</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>内部定义了remove(),可以在遍历的时候，删除集合中的元素。</p>
<p>此方法不同于集合直接调用remove()</p>
<h3 id="4-List接口"><a href="#4-List接口" class="headerlink" title="4.List接口"></a>4.List接口</h3><blockquote>
<p>1.存储的数据特点</p>
</blockquote>
<p>存储有序的、可重复的数据。</p>
<blockquote>
<p>2.常用方法</p>
</blockquote>
<pre class=" language-java"><code class="language-java">增：<span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>
删：<span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>
改：<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object ele<span class="token punctuation">)</span>
查：<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
插：<span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object ele<span class="token punctuation">)</span>
长度：<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
遍历：① Iterator迭代器方式
     ② 增强<span class="token keyword">for</span>循环
     ③ 普通的循环    
</code></pre>
<blockquote>
<p>3.常用实现类</p>
</blockquote>
<ul>
<li><code>ArrayList</code>：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</li>
</ul>
<ul>
<li><pre><code> `LinkedList`：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储
</code></pre>
</li>
<li><pre><code> `Vector`：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储
</code></pre>
</li>
</ul>
<blockquote>
<p>4.源码分析</p>
</blockquote>
<p><strong>4.1 ArrayList的源码分析：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span>   <span class="token number">2.1</span> jdk <span class="token number">7</span>情况下
<span class="token operator">*</span>      ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层创建了长度是10的Object[]数组elementData</span>
<span class="token operator">*</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//elementData[0] = new Integer(123);</span>
<span class="token operator">*</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">*</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此次的添加导致底层elementData数组容量不够，则扩容。</span>
<span class="token operator">*</span>      默认情况下，扩容为原来的容量的<span class="token number">1.5</span>倍，同时需要将原有数组中的数据复制到新的数组中。
<span class="token operator">*</span>
<span class="token operator">*</span>      结论：建议开发中使用带参的构造器：ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>
<span class="token operator">*</span>
<span class="token operator">*</span>   <span class="token number">2.2</span> jdk <span class="token number">8</span>中ArrayList的变化：
<span class="token operator">*</span>      ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层Object[] elementData初始化为{}.并没创建长度为10的数组</span>
<span class="token operator">*</span>
<span class="token operator">*</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span>
<span class="token operator">*</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">*</span>      后续的添加和扩容操作与jdk <span class="token number">7</span> 无异。
</code></pre>
<ul>
<li>2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</li>
</ul>
<p><strong>4.2 LinkedList的源码分析：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span>      LinkedList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 内部声明了Node类型的first和last属性，默认值为null
<span class="token operator">*</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将123封装到Node中，创建了Node对象。</span>
<span class="token operator">*</span>
<span class="token operator">*</span>      其中，Node定义为：体现了LinkedList的双向链表的说法
       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>
            E item<span class="token punctuation">;</span>
            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>
            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>

            <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre>
<p><strong>4.3 Vector的源码分析：</strong></p>
<p>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。<br>在扩容方面，默认扩容为原来的数组长度的2倍。</p>
<blockquote>
<p>5.存储的元素的要求</p>
</blockquote>
<p>添加的对象，所在的类要重写equals()方法</p>
<h3 id="5-Set接口"><a href="#5-Set接口" class="headerlink" title="5.Set接口"></a>5.Set接口</h3><blockquote>
<p>1.存储的数据特点：无序的、不可重复的元素</p>
</blockquote>
<p>以HashSet为例说明：</p>
<ol>
<li>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</li>
<li>不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。</li>
</ol>
<blockquote>
<p>2.元素添加过程：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">我们向HashSet中添加元素a<span class="token punctuation">,</span>首先调用元素a所在类的<span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，计算元素a的哈希值，
此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断
数组此位置上是否已经元素：
<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>如果此位置上没其他元素，则元素a添加成功。
  如果此位置上有其他元素<span class="token function">b</span><span class="token punctuation">(</span>或以链表形式存在的多个元素，则比较元素a与元素b的hash值： 
     <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>如果hash值不相同，则元素a添加成功。
         如果hash值相同，进而需要调用元素a所在类的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法：
               <span class="token keyword">case</span> <span class="token number">3</span> <span class="token operator">:</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">true</span><span class="token punctuation">,</span>元素a添加失败
               <span class="token keyword">case</span> <span class="token number">4</span> <span class="token operator">:</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">false</span><span class="token punctuation">,</span>则元素a添加成功。
</code></pre>
<p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。<br>jdk 7 :元素a放到数组中，指向原来的元素。<br>jdk 8 :原来的元素在数组中，指向元素a<br>总结：七上八下</p>
<p>HashSet底层：数组+链表的结构。（前提：jdk7)</p>
<blockquote>
<p>3.常用方法</p>
</blockquote>
<p>Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。</p>
<blockquote>
<p>4.常用实现类</p>
</blockquote>
<ul>
<li><p>Set接口：存储无序的、不可重复的数据   –&gt;高中讲的“集合”</p>
<ul>
<li><p>HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值</p>
<ul>
<li><pre><code>     LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历
</code></pre>
</li>
</ul>
<p>在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。</p>
<p> 对于频繁的遍历操作，LinkedHashSet效率高于HashSet.</p>
</li>
<li><p>TreeSet：可以照添加对象的指定属性，进行排序。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>5.存储对象所在类的要求</p>
</blockquote>
<p><strong>HashSet/LinkedHashSet:</strong></p>
<p>要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()<br>要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</p>
<p><strong>TreeSet:</strong><br>1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().<br>2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</p>
<blockquote>
<p>6.TreeSet的使用</p>
</blockquote>
<p><strong>6.1 使用说明:</strong><br>1.向TreeSet中添加的数据，要求是<strong>相同类</strong>的对象。<br>2.两种排序方式：自然排序（实现Comparable接口 和 定制排序（Comparator）</p>
<p>方式一：自然排序</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        set<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
     Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>方式二：定制排序</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Comparator com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//照年龄从小到大排列</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    User u1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
                    User u2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
                    <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="6-Map接口"><a href="#6-Map接口" class="headerlink" title="6.Map接口"></a>6.Map接口</h3><p>双列集合框架：Map</p>
<blockquote>
<p>1.常用实现类结构</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Map<span class="token operator">:</span>双列数据，存储key<span class="token operator">-</span>value对的数据   <span class="token operator">--</span><span class="token operator">-</span>类似于高中的函数：y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">*</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>HashMap<span class="token operator">:</span>作为Map的主要实现类；线程不安全的，效率高；存储null的key和value
<span class="token operator">*</span>       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>LinkedHashMap<span class="token operator">:</span>保证在遍历map元素时，可以照添加的顺序实现遍历。
<span class="token operator">*</span>          原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。
<span class="token operator">*</span>                    对于频繁的遍历操作，此类执行效率高于HashMap。
<span class="token operator">*</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>TreeMap<span class="token operator">:</span>保证照添加的key<span class="token operator">-</span>value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序 ，底层使用红黑树
<span class="token operator">*</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Hashtable<span class="token operator">:</span>作为古老的实现类；线程安全的，效率低；不能存储null的key和value
<span class="token operator">*</span>        <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span>Properties<span class="token operator">:</span>常用来处理配置文件。key和value都是String类型
<span class="token operator">*</span>
<span class="token operator">*</span>      HashMap的底层：数组<span class="token operator">+</span>链表  （jdk7及之前<span class="token punctuation">)</span>
<span class="token operator">*</span>                    数组<span class="token operator">+</span>链表<span class="token operator">+</span>红黑树 （jdk <span class="token number">8</span><span class="token punctuation">)</span>
</code></pre>
<p>[面试题]</p>
<ul>
<li> HashMap的底层实现原理？</li>
<li> HashMap 和 Hashtable的异同？</li>
<li> CurrentHashMap 与 Hashtable的异同？</li>
</ul>
<blockquote>
<p>2.存储结构的理</p>
</blockquote>
<ul>
<li>Map中的<code>key</code>:无序的、不可重复的，使用Set存储所的key—&gt; key所在的类要重写equals()和hashCode()</li>
<li>Map中的<code>value</code>:无序的、可重复的，使用Collection存储所的value —&gt;value所在的类要重写equals()</li>
<li>Map中的<code>entry</code>:无序的、不可重复的，使用Set存储所的entry.一个键值对：key-value构成了一个Entry对象。</li>
</ul>
<blockquote>
<p>3.常用方法</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 添加：<span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>
<span class="token operator">*</span> 删除：<span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>
<span class="token operator">*</span> 修改：<span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span>
<span class="token operator">*</span> 查询：<span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span>
<span class="token operator">*</span> 长度：<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">*</span> 遍历：<span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<blockquote>
<p>4.内存结构说明：（难点）</p>
</blockquote>
<p><strong>4.1 HashMap在jdk7中实现原理：</strong></p>
<pre class=" language-java"><code class="language-java">HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token operator">*</span>      在实例化以后，底层创建了长度是<span class="token number">16</span>的一维数组Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table。
<span class="token operator">*</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>可能已经执行过多次put<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">*</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span>value1<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token operator">*</span>      首先，调用key1所在类的<span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。
<span class="token operator">*</span>      如果此位置上的数据为空，此时的key1<span class="token operator">-</span>value1添加成功。 <span class="token operator">--</span><span class="token operator">--</span>情况<span class="token number">1</span>
<span class="token operator">*</span>      如果此位置上的数据不为空，<span class="token punctuation">(</span>意味着此位置上存在一个或多个数据<span class="token punctuation">(</span>以链表形式存在<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>比较key1和已经存在的一个或多个数据的哈希值：
<span class="token operator">*</span>              如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1<span class="token operator">-</span>value1添加成功。<span class="token operator">--</span><span class="token operator">--</span>情况<span class="token number">2</span>
<span class="token operator">*</span>              如果key1的哈希值和已经存在的某一个数据<span class="token punctuation">(</span>key2<span class="token operator">-</span>value2<span class="token punctuation">)</span>的哈希值相同，继续比较：调用key1所在类的<span class="token function">equals</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span>方法，比较：
<span class="token operator">*</span>                      如果<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">false</span><span class="token operator">:</span>此时key1<span class="token operator">-</span>value1添加成功。<span class="token operator">--</span><span class="token operator">--</span>情况<span class="token number">3</span>
<span class="token operator">*</span>                      如果<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">true</span><span class="token operator">:</span>使用value1替换value2。
<span class="token operator">*</span>
<span class="token operator">*</span>      补充：关于情况<span class="token number">2</span>和情况<span class="token number">3</span>：此时key1<span class="token operator">-</span>value1和原来的数据以链表的方式存储。
<span class="token operator">*</span>
<span class="token operator">*</span>     在不断的添加过程中，会涉及到扩容问题，当超出临界值<span class="token punctuation">(</span>且要存放的位置非空<span class="token punctuation">)</span>时，扩容。默认的扩容方式：扩容为原来容量的<span class="token number">2</span>倍，并将原的数据复制过来。
</code></pre>
<p><strong>4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>     <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>底层没创建一个长度为<span class="token number">16</span>的数组
<span class="token number">2</span><span class="token punctuation">.</span>     jdk <span class="token number">8</span>底层的数组是：Node<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>而非Entry<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token number">3</span><span class="token punctuation">.</span>     首次调用<span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法时，底层创建长度为<span class="token number">16</span>的数组
<span class="token number">4</span><span class="token punctuation">.</span>     jdk7底层结构只：数组<span class="token operator">+</span>链表。jdk8中底层结构：数组<span class="token operator">+</span>链表<span class="token operator">+</span>红黑树。
<span class="token number">4.1</span> 形成链表时，七上八下（jdk7<span class="token operator">:</span>新的元素指向旧的元素。jdk8：旧的元素指向新的元素）
<span class="token number">4.2</span> 当数组的某一个索引位置上的元素以链表形式存在的数据个数 <span class="token operator">></span> <span class="token number">8</span> 且当前数组的长度 <span class="token operator">></span> <span class="token number">64</span>时，此时此索引位置上的所数据改为使用红黑树存储。
</code></pre>
<p><strong>4.3 HashMap底层典型属性的属性的说明：</strong></p>
<pre class=" language-java"><code class="language-java">DEFAULT_INITIAL_CAPACITY <span class="token operator">:</span> HashMap的默认容量，<span class="token number">16</span>
DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：<span class="token number">0.75</span>
threshold：扩容的临界值<span class="token operator">=</span>容量<span class="token operator">*</span>填充因子：<span class="token number">16</span> <span class="token operator">*</span> <span class="token number">0.75</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">12</span>
TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树<span class="token operator">:</span><span class="token number">8</span>
MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量<span class="token operator">:</span><span class="token number">64</span>
</code></pre>
<p><strong>4.4 LinkedHashMap的底层实现原理(了解)</strong></p>
<p>LinkedHashMap底层使用的结构与HashMap相同，因为LinkedHashMap继承于HashMap.<br>区别就在于：LinkedHashMap内部提供了Entry，替换HashMap中的Node.</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211130220923060.png" alt="image-20211130220923060"></p>
<blockquote>
<p>5.TreeMap的使用</p>
</blockquote>
<p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</p>
<p>因为要照key进行排序：自然排序 、定制排序</p>
<blockquote>
<p>6.使用Properties读取配置文件</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载流对应的文件</span>

        String name <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="7-Collection工具类"><a href="#7-Collection工具类" class="headerlink" title="7.Collection工具类"></a>7.Collection工具类</h3><blockquote>
<p>1.作用：操作Collection和Map的工具类</p>
</blockquote>
<blockquote>
<p>常用方法：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token function">reverse</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：反转 List 中元素的顺序
    
<span class="token function">shuffle</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：对 List 集合元素进行随机排序
    
<span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：根据元素的自然顺序对指定 List 集合元素升序排序
    
<span class="token function">sort</span><span class="token punctuation">(</span>List，Comparator<span class="token punctuation">)</span>：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序
    
<span class="token function">swap</span><span class="token punctuation">(</span>List，<span class="token keyword">int</span>， <span class="token keyword">int</span><span class="token punctuation">)</span>：将指定 list 集合中的 i 处元素和 j 处元素进行交换
    
Object <span class="token function">max</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>：根据元素的自然顺序，返回给定集合中的最大元素  
Object <span class="token function">max</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素
    
Object <span class="token function">min</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>
Object <span class="token function">min</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span>
    
<span class="token keyword">int</span> <span class="token function">frequency</span><span class="token punctuation">(</span>Collection，Object<span class="token punctuation">)</span>：返回指定集合中指定元素的出现次数
    
<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List dest<span class="token punctuation">,</span>List src<span class="token punctuation">)</span>：将src中的内容复制到dest中
    
<span class="token keyword">boolean</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>List list，Object oldVal，Object newVal<span class="token punctuation">)</span>：使用新值替换 List 对象的所旧值
</code></pre>
<p>说明：</p>
<p>ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程安全的。<br>使用synchronizedList(List list） 和 synchronizedMap(Map map）</p>
<h2 id="12-泛型"><a href="#12-泛型" class="headerlink" title="12.泛型"></a>12.泛型</h2><h3 id="1-泛型的理解"><a href="#1-泛型的理解" class="headerlink" title="1.泛型的理解"></a>1.泛型的理解</h3><blockquote>
<p>1.泛型的概念</p>
</blockquote>
<p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明量、创建对象时确定（即传入实际的类型参数，也称为类型实参）。</p>
<blockquote>
<p>2.泛型的引入背景</p>
</blockquote>
<p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e>   这个<e>就是类型参数，即泛型。</e></e></e></e></p>
<h3 id="2-泛型在集合中的使用"><a href="#2-泛型在集合中的使用" class="headerlink" title="2.泛型在集合中的使用"></a>2.泛型在集合中的使用</h3><blockquote>
<p>1.在集合中使用泛型</p>
</blockquote>
<pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> entry <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>图示：</p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211130223639139.png" alt="image-20211130223639139"></p>
<p><img src="/../images/2021-10-29-JavaSE/image-20211130223807344.png" alt="image-20211130223807344"></p>
<blockquote>
<p>3.集合中使用泛型总结</p>
</blockquote>
<ul>
<li>集合接口或集合类在jdk5.0时都修改为带泛型的结构。</li>
<li>在实例化集合类时，可以指明具体的泛型类型</li>
<li>指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li>
<li>注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li>
<li>如果实例化时，没指明泛型的类型。默认类型为java.lang.Object类型。</li>
</ul>
<h3 id="3-自定义"><a href="#3-自定义" class="headerlink" title="3.自定义"></a>3.自定义</h3><blockquote>
<p>1.举例</p>
</blockquote>
<p>【Order.java】</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>
    String orderName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//类的内部结构就可以使用类的泛型</span>
    T orderT<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>String orderName<span class="token punctuation">,</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span>T orderT<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//如下的几个方法都不是泛型方法</span>
    <span class="token keyword">public</span> T <span class="token function">getOrderT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderT</span><span class="token punctuation">(</span>T orderT<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//静态方法中不能使用类的泛型。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>T orderT<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没任何关系。</span>
  <span class="token comment" spellcheck="true">//换句话说，泛型方法所属的类是不是泛型类都没关系。</span>
  <span class="token comment" spellcheck="true">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span>  List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>

        ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>E e <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>【SubOrder.java】</p>
<pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//SubOrder:不是泛型类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubOrder</span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>
   
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">copyFromArrayToList</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>

        ArrayList<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>E e <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果定义了泛型类，实例化没指明类的泛型，则认为此泛型类型为Object类型</p>
<p>要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型。</p>
<blockquote>
<p>2.注意点</p>
</blockquote>
<ul>
<li><p>1.泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如:&lt;E1,E2,E3&gt;</p>
</li>
<li><p>2.泛型类的构造器如下: public GenericClass(){}。</p>
<p>​        而下面是错误的: public GenericClass<e>(){}</e></p>
</li>
<li><p>3.实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</p>
</li>
<li><p>4.泛型不同的引用不能相互赋值。</p>
</li>
</ul>
<p>​                    尽管在编译时ArrayList<string>和ArrayList<integer>是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。</integer></string></p>
<ul>
<li><p>5.泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。经验:泛型要使用一路都用。要不用，一路都不要用。</p>
</li>
<li><p>6.如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</p>
</li>
<li><p>7.jdk1.7，泛型的简化操作: ArrayList<fruit> flist = new ArrayList&lt;&gt;();</fruit></p>
</li>
<li><p>8.泛型的指定中不能使用基本数据类型，可以使用包装类替换。</p>
</li>
<li><p>9.在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法中不能使用类的泛型。</p>
</li>
<li><p>10.异常类不能是泛型的</p>
</li>
<li><p>11.不能使用new E[]。但是可以:E[]elements =(E[])new Object[capacity];</p>
</li>
</ul>
<p><img src="/../images/2021-10-29-JavaSE/image-20211130225024245.png" alt="image-20211130225024245"></p>
<blockquote>
<p>3.应用场景举例</p>
</blockquote>
<p>【DAO.java】:定义了操作数据库中的表的通用操作。   ORM思想(数据库中的表和Java中的类对应)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DAO</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//表的共性操作的DAO</span>

    <span class="token comment" spellcheck="true">//添加一条记录</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//删除一条记录</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//修改一条记录</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//查询一条记录</span>
    <span class="token keyword">public</span> T <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//查询多条记录</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getForList</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//泛型方法</span>
    <span class="token comment" spellcheck="true">//举例：获取表中一共有多少条记录？获取最大的员工入职时间？</span>
    <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> E <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>【CustomerDAO.java】:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDAO</span> <span class="token keyword">extends</span> <span class="token class-name">DAO</span><span class="token operator">&lt;</span>Customer<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只能操作某一个表的DAO</span>
    
<span class="token punctuation">}</span>
</code></pre>
<p>【StudentDAO.java】:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDAO</span> <span class="token keyword">extends</span> <span class="token class-name">DAO</span><span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只能操作某一个表的DAO</span>
    
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-泛型在继承上的体现"><a href="#4-泛型在继承上的体现" class="headerlink" title="4.泛型在继承上的体现"></a>4.泛型在继承上的体现</h3><blockquote>
<p>1.泛型在继承方面的体现</p>
</blockquote>
<p>虽然类A是类B的父类，但是G<a> 和G<b>二者不具备子父类关系，二者是并列关系。</b></a></p><a><b>
<p>  补充：类A是类B的父类，A<g> 是 B<g> 的父类</g></g></p>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>
        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>
        obj <span class="token operator">=</span> str<span class="token punctuation">;</span>

        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        arr1 <span class="token operator">=</span> arr2<span class="token punctuation">;</span>
        
        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//此时的list1和list2的类型不具子父类关系</span>
        <span class="token comment" spellcheck="true">//编译不通过</span>
        list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        反证法：
        假设list1 = list2;
           list1.add(123);导致混入非String的数据。出错。
         */</span>
    <span class="token punctuation">}</span>
</code></pre>
</b></a><b><h3 id="5-通配符"><a></a><a href="#5-通配符" class="headerlink" title="5.通配符"></a>5.通配符</h3><blockquote>
<p>1.通配符的使用</p>
</blockquote>
<p>通配符：**?**</p>
<p> 类A是类B的父类，G<a>和G<b>是没关系的，二者共同的父类是：G&lt;?&gt;</b></a></p><a><b>
<pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list <span class="token operator">=</span> null<span class="token punctuation">;</span>

        list <span class="token operator">=</span> list1<span class="token punctuation">;</span>
        list <span class="token operator">=</span> list2<span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//编译通过</span>
        
        <span class="token comment" spellcheck="true">//添加(写入)：对于List&lt;?>就不能向其内部添加数据。除了添加null之外。</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment" spellcheck="true">//获取(读取)：允许读取数据，读取的数据类型为Object。</span>
        Object o <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>2.有限制条件的通配符的使用</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
    限制条件的通配符的使用。
        ? extends A:
                G&lt;? extends A> 可以作为G&lt;A>和G&lt;B>的父类，其中B是A的子类

        ? super A:
                G&lt;? super A> 可以作为G&lt;A>和G&lt;B>的父类，其中B是A的父类

*/</span>

 <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> list1 <span class="token operator">=</span> null<span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Person<span class="token operator">></span> list2 <span class="token operator">=</span> null<span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        list1 <span class="token operator">=</span> list3<span class="token punctuation">;</span>
        list1 <span class="token operator">=</span> list4<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        list1 = list5;</span>

<span class="token comment" spellcheck="true">//        list2 = list3;</span>
        list2 <span class="token operator">=</span> list4<span class="token punctuation">;</span>
        list2 <span class="token operator">=</span> list5<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//读取数据：</span>
        list1 <span class="token operator">=</span> list3<span class="token punctuation">;</span>
        Person p <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//编译不通过</span>
        <span class="token comment" spellcheck="true">//Student s = list1.get(0);</span>

        list2 <span class="token operator">=</span> list4<span class="token punctuation">;</span>
        Object obj <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">////编译不通过</span>
<span class="token comment" spellcheck="true">//        Person obj = list2.get(0);</span>

        <span class="token comment" spellcheck="true">//写入数据：</span>
        <span class="token comment" spellcheck="true">//编译不通过</span>
<span class="token comment" spellcheck="true">//        list1.add(new Student());</span>

        <span class="token comment" spellcheck="true">//编译通过</span>
        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre>
</b></a><b><h2 id="13-IO流"><a></a><a href="#13-IO流" class="headerlink" title="13.IO流"></a>13.IO流</h2><h3 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h3><blockquote>
<p>1.File类的理解</p>
</blockquote>
<ol>
<li>File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</li>
<li>File类声明在java.io包下</li>
<li>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及到写入或读取文件的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</li>
<li>后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”.</li>
</ol>
<blockquote>
<p>2.File的实例化</p>
</blockquote>
<p><strong>2.1 常用构造器</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token function">File</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">)</span>
<span class="token function">File</span><span class="token punctuation">(</span>String parentPath<span class="token punctuation">,</span>String childPath<span class="token punctuation">)</span>
<span class="token function">File</span><span class="token punctuation">(</span>File parentFile<span class="token punctuation">,</span>String childPath<span class="token punctuation">)</span>
</code></pre>
<p><strong>2.2 路径的分类</strong></p>
<p>相对路径：相较于某个路径下，指明的路径。<br>绝对路径：包含盘符在内的文件或文件目录的路径</p>
<p>IDEA中：</p>
<ul>
<li>如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。</li>
<li>如果大家使用main()测试，相对路径即为当前的Project下。</li>
</ul>
<p>Eclipse中：</p>
<ul>
<li>不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。</li>
</ul>
</b></b></body></html>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx知识点</title>
    <url>/2021/10/30/nginx%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="1-Nginx-简介"><a href="#1-Nginx-简介" class="headerlink" title="1. Nginx 简介"></a>1. Nginx 简介</h2><h3 id="1-1-Nginx-概述"><a href="#1-1-Nginx-概述" class="headerlink" title="1.1 Nginx 概述"></a>1.1 Nginx 概述</h3><p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能 力强,事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</p>
<h3 id="1-2-Nginx-作为-web-服务器"><a href="#1-2-Nginx-作为-web-服务器" class="headerlink" title="1.2 Nginx 作为 web 服务器"></a>1.2 Nginx 作为 web 服务器</h3><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php 等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发， 性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高 达 50,000 个并发连接数。</p>
<h3 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h3><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。 </p>
<p>正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p>
<ul>
<li>简单来说：通过代理服务器来访问服务器的过程 就叫正向代理。</li>
<li>需要在客户端配置代理服务器进行指定网站访问</li>
</ul>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030220214346.png" alt="image-20211030220214346"></p>
<h3 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h3><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返 回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030220410539.png" alt="image-20211030220410539"></p>
<h3 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h3><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服 务器处理完毕后，再将结果返回给客户端。</p>
<p>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成 本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂 度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易 造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p>
<p>我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机 器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能 满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量 是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能 够满足需求的。那么怎么办呢？ 上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题 的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，<strong>我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们 所说的负载均衡。</strong></p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030221457994.png" alt="image-20211030221457994"></p>
<h3 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速 度。降低原来单个服务器的压力。</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030221949437.png" alt="image-20211030221949437"></p>
<h2 id="2-Nginx-安装"><a href="#2-Nginx-安装" class="headerlink" title="2. Nginx 安装"></a>2. Nginx 安装</h2><h3 id="2-1-进入-nginx-官网，下载"><a href="#2-1-进入-nginx-官网，下载" class="headerlink" title="2.1 进入 nginx 官网，下载"></a>2.1 进入 nginx 官网，下载</h3><p>下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<p>选择Linux版本</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030225809892.png" alt="image-20211030225809892"></p>
<h3 id="2-2-开始安装"><a href="#2-2-开始安装" class="headerlink" title="2.2 开始安装"></a>2.2 开始安装</h3><p>将文件传输到 <code>/usr/lcoal/software/</code>下</p>
<p>依次执行以下命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#进入安装路径</span>
<span class="token function">cd</span> /usr/local/software/
<span class="token comment" spellcheck="true">#解压</span>
<span class="token function">tar</span> nginx-1.20.1.tar.gz
<span class="token comment" spellcheck="true">#进入nginx</span>
<span class="token function">cd</span> nginx-1.20.1/
<span class="token comment" spellcheck="true">#安装</span>
./configure
<span class="token comment" spellcheck="true">#执行命令</span>
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre>
<h3 id="2-3-运行nginx"><a href="#2-3-运行nginx" class="headerlink" title="2.3 运行nginx"></a>2.3 运行nginx</h3><ul>
<li><p>安装完nginx后，会在 路径 /usr/local 下自动生成 nginx 文件夹。这是自动生成的。</p>
</li>
<li><p>进入这个目录：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/nginx
</code></pre>
</li>
</ul>
<p>目录内容：</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030230835036.png" alt="image-20211030230835036"></p>
<ul>
<li>进入sbin文件夹</li>
</ul>
<p>nginx命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动nginx</span>
./nginx
<span class="token comment" spellcheck="true">#查询nginx</span>
<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> nginx
<span class="token comment" spellcheck="true">#关闭nginx</span>
./nginx -s stop
<span class="token comment" spellcheck="true">#重启nginx</span>
./nginx -s reload
</code></pre>
<p>查看配置文件：</p>
<pre class=" language-bahs"><code class="language-bahs">cd conf/

#编辑nginx.conf
vim nginx.conf
</code></pre>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030231524985.png" alt="image-20211030231524985"></p>
<p>最后我们可以在浏览器输入：<code>47.113.221.56:80</code>查看是否成功</p>
<p><img src="/../images/2021-10-30-nginx%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211030231809594.png" alt="image-20211030231809594"></p>
<h2 id="3-Nginx配置文件"><a href="#3-Nginx配置文件" class="headerlink" title="3.Nginx配置文件"></a>3.Nginx配置文件</h2><h3 id="3-1-nginx-的组成部分"><a href="#3-1-nginx-的组成部分" class="headerlink" title="3.1 nginx 的组成部分"></a>3.1 nginx 的组成部分</h3><p>配置文件中有很多#， 开头的表示注释内容，我们去掉所有以 # 开头的段落，精简之后的 内容如下：</p>
<pre class=" language-conf"><code class="language-conf">worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
</code></pre>
<ul>
<li>nginx 配置文件有三部分组成</li>
</ul>
<h3 id="3-2-第一部分：全局块"><a href="#3-2-第一部分：全局块" class="headerlink" title="3.2 第一部分：全局块"></a>3.2 第一部分：全局块</h3><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。<br>比如上面第一行配置的：</p>
<pre class=" language-conf"><code class="language-conf">worker_processes  1;
</code></pre>
<p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p>
<h3 id="3-3-第二部分：events块"><a href="#3-3-第二部分：events块" class="headerlink" title="3.3 第二部分：events块"></a>3.3 第二部分：events块</h3><pre class=" language-conf"><code class="language-conf">events {
    worker_connections  1024;
}
</code></pre>
<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p>
<ul>
<li>上述例子就表示每个 work process 支持的最大连接数为 1024.</li>
<li>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</li>
</ul>
<h3 id="3-4-第三部分：http-块"><a href="#3-4-第三部分：http-块" class="headerlink" title="3.4 第三部分：http 块"></a>3.4 第三部分：http 块</h3><pre class=" language-conf"><code class="language-conf">http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
</code></pre>
<p> 这是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>
<p>需要注意的是：http 块也可以包括 http 全局块、server 块。</p>
<h4 id="3-4-1-http-全局块"><a href="#3-4-1-http-全局块" class="headerlink" title="3.4.1 http 全局块"></a>3.4.1 http 全局块</h4><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p>
<h4 id="3-4-2-server-块"><a href="#3-4-2-server-块" class="headerlink" title="3.4.2 server 块"></a>3.4.2 server 块</h4><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。</p>
<ul>
<li>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</li>
<li>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</li>
</ul>
<blockquote>
<p>1、全局 server 块</p>
</blockquote>
<p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p>
<blockquote>
<p>2、location 块</p>
</blockquote>
<p>一个 server 块可以配置多个 location 块。</p>
<p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称 （也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓 存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p>
</body></html>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud学习笔记</title>
    <url>/2021/10/31/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="1-初识springcloud"><a href="#1-初识springcloud" class="headerlink" title="1.初识springcloud"></a>1.初识springcloud</h2><h3 id="1-1-springcloud介绍"><a href="#1-1-springcloud介绍" class="headerlink" title="1.1 springcloud介绍"></a>1.1 springcloud介绍</h3><p>spring cloud 是一系列框架的集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控</strong>等，都可以用 spring boot 的开发风格做到一键启动和部署。spring cloud 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过 spring boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
<h3 id="1-2-springcloud技术组成"><a href="#1-2-springcloud技术组成" class="headerlink" title="1.2 springcloud技术组成"></a>1.2 springcloud技术组成</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211031224906577.png" alt="image-20211031224906577"></p>
<h3 id="springcloud组件更替"><a href="#springcloud组件更替" class="headerlink" title="springcloud组件更替"></a>springcloud组件更替</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211031225232573.png" alt="image-20211031225232573"></p>
<h2 id="2-springcloud环境搭建"><a href="#2-springcloud环境搭建" class="headerlink" title="2.springcloud环境搭建"></a>2.springcloud环境搭建</h2><h3 id="2-1-组件版本"><a href="#2-1-组件版本" class="headerlink" title="2.1 组件版本"></a>2.1 组件版本</h3><table>
<thead>
<tr>
<th>工具</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>springcloud</td>
<td>Hoxton.SR12</td>
</tr>
<tr>
<td>springboot</td>
<td>2.3.12.RELEASE</td>
</tr>
<tr>
<td>java</td>
<td>jdk1.8</td>
</tr>
<tr>
<td>Maven</td>
<td>3.5以上</td>
</tr>
<tr>
<td>Mysql</td>
<td>5.7以上</td>
</tr>
<tr>
<td>springcloud alibaba</td>
<td>2.1.0.RELEASE</td>
</tr>
</tbody></table>
<h3 id="2-2-搭建父工程"><a href="#2-2-搭建父工程" class="headerlink" title="2.2 搭建父工程"></a>2.2 搭建父工程</h3><ol>
<li>创建一个maven工程,删除掉其他文件，只保留<code>pom.xml</code>作为<parent></parent></li>
<li>字符编码统一设置为UTF-8</li>
<li>父工程创建完成后跳过MVN：test，并clean，install将父工程发布到仓库</li>
</ol>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>cloud-consumer-order81<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!--统一管理jar包版本--></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.spring.boot.starter.version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.spring.boot.starter.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.boot.version</span><span class="token punctuation">></span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.boot.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.cloud.alibaba.version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.cloud.alibaba.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-spring-boot-starter.version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-spring-boot-starter.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hutool-all.version</span><span class="token punctuation">></span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hutool-all.version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

  <span class="token comment" spellcheck="true">&lt;!--子模块继承后,提供作用:锁定版本+子module不用groupId和version--></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--springboot 2.3.12--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--Spring cloud Hoxton.SR12--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.cloud.alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${druid.spring.boot.starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-spring-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="3-编码构建"><a href="#3-编码构建" class="headerlink" title="3.编码构建"></a>3.编码构建</h2><h3 id="3-1-cloud-provider-payment8001"><a href="#3-1-cloud-provider-payment8001" class="headerlink" title="3.1 cloud-provider-payment8001"></a>3.1 cloud-provider-payment8001</h3><p><strong>微服务提供者</strong></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101001354865.png" alt="image-20211101001354865"></p>
<h4 id="3-1-1-pom、yml、启动类"><a href="#3-1-1-pom、yml、启动类" class="headerlink" title="3.1.1  pom、yml、启动类"></a>3.1.1  pom、yml、启动类</h4><ul>
<li><p>创建子模块<code>moudle</code>的maven工程</p>
</li>
<li><p>pom文件</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--mysql-connector-java--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--jdbc--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>配置springboot启动类</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain8001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li><p>配置application.yml</p>
</li>
<li><pre class=" language-yml"><code class="language-yml">server:
  port: 8001
spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包 org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: jaqen
mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包
</code></pre>
</li>
</ul>
<h4 id="3-1-2-业务类"><a href="#3-1-2-业务类" class="headerlink" title="3.1.2 业务类"></a>3.1.2 业务类</h4><ol>
<li><p>建表SQL</p>
</li>
<li><p>entity</p>
<ul>
<li>主实体:<code>class:Payment</code></li>
<li>Json封装体:<code>class:CommonResult</code></li>
</ul>
</li>
<li><p>dao</p>
<ul>
<li><code>Interface:PaymentDao</code></li>
<li>在resources下创建mapper文件夹,<code>PaymentMapper.xml</code></li>
</ul>
</li>
<li><p>service</p>
<ul>
<li><code>Interface:PaymentService</code></li>
<li>实现类:<code>class:PaymentServiceImpl</code></li>
</ul>
</li>
<li><p>controller</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> PaymentService paymentService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/insert"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****返回结果为：{}"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"插入数据库成功"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"插入数据库失败"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Payment payment <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*****查询结果为：{}"</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payment <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"查询成功"</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"无记录，查询id"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
<h4 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3 测试"></a>3.1.3 测试</h4><ul>
<li><p>Get测试</p>
<p><a href="http://localhost:8001/payment/get/31">http://localhost:8001/payment/get/31</a></p>
</li>
<li><p>Post测试</p>
<p>通过postman测试insert请求，或者通过idea自带的httpClient插件测试Post请求</p>
<p><a href="http://localhost:8001/payment/insert?serial=Jaqen">http://localhost:8001/payment/insert?serial=Jaqen</a></p>
</li>
</ul>
<h3 id="3-2-cloud-consumer-order81"><a href="#3-2-cloud-consumer-order81" class="headerlink" title="3.2 cloud-consumer-order81"></a>3.2 cloud-consumer-order81</h3><p><strong>微服务消费者</strong></p>
<h4 id="3-2-1-pom、yml、启动类"><a href="#3-2-1-pom、yml、启动类" class="headerlink" title="3.2.1 pom、yml、启动类"></a>3.2.1 pom、yml、启动类</h4><ul>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-client--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 81
spring:
  application:
    name: cloud-order-service
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
</li>
<li><p>启动类</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain81</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderMain81<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ul>
<h4 id="3-2-2-业务类"><a href="#3-2-2-业务类" class="headerlink" title="3.2.2 业务类"></a>3.2.2 业务类</h4><ol>
<li><p>entity</p>
<ul>
<li>主实体:<code>class:Payment</code></li>
<li>Json封装体:<code>class:CommonResult</code></li>
</ul>
</li>
<li><p>config</p>
<ul>
<li>配置类:<code>class:applicationContextConfig</code></li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>什么是<code>Restemplate</code>?</li>
</ul>
<p>RestTemplate提供了多种便捷访问远程Http服务的方法，<br>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集.</p>
<ul>
<li>使用</li>
</ul>
<p>使用restTemplate访问restful接口非常的简单粗暴无脑。<br>(url, requestMap, ResponseBean.class)这三个参数分别代表<br>REST请求地址、请求参数、HTTP响应转换被转换成的对象类型</p>
</li>
<li><p>controller</p>
</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//public static final String PAYMENT_URL = "http://localhost:8001";</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/insert"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//客户端用浏览器是get请求，但是底层实质发送post调用服务端8001</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/insert"</span><span class="token punctuation">,</span> payment<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//http://localhost:81/consumer/payment/get/30</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3 测试"></a>3.2.3 测试</h4><ul>
<li><p>Get测试</p>
<p><a href="http://localhost:81/consumer/payment/get/31">http://localhost:81/consumer/payment/get/31</a></p>
</li>
<li><p>Post测试</p>
<p><a href="http://localhost:801/consumer/payment/insert?serial=Jaqen">http://localhost:801/consumer/payment/insert?serial=Jaqen</a></p>
</li>
</ul>
<h3 id="3-3-代码重构"><a href="#3-3-代码重构" class="headerlink" title="3.3 代码重构"></a>3.3 代码重构</h3><p>在各个模块中有重复使用的部分，可以抽取出来单独成为一个moudle，例如<code>entity</code></p>
<ol>
<li><p>新建<code>cloud-api-commons</code>模块</p>
</li>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>抽取<code>entity</code></p>
</li>
<li><p>maven命令clean &amp; install</p>
</li>
<li><p>其他模块添加自定义的依赖</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
</li>
</ol>
<h2 id="4-Eureka服务注册与发现"><a href="#4-Eureka服务注册与发现" class="headerlink" title="4.Eureka服务注册与发现"></a>4.Eureka服务注册与发现</h2><h3 id="4-1-Eureka基础知识"><a href="#4-1-Eureka基础知识" class="headerlink" title="4.1 Eureka基础知识"></a>4.1 Eureka基础知识</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101213000074.png" alt="image-20211101213000074"></p>
<h4 id="4-1-1-什么是服务治理"><a href="#4-1-1-什么是服务治理" class="headerlink" title="4.1.1 什么是服务治理"></a>4.1.1 什么是服务治理</h4><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理</p>
<p> 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>
<h4 id="4-1-2-什么是服务注册"><a href="#4-1-2-什么是服务注册" class="headerlink" title="4.1.2 什么是服务注册"></a>4.1.2 什么是服务注册</h4><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</p>
<p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p>
<h4 id="4-1-3-Eureka两组件"><a href="#4-1-3-Eureka两组件" class="headerlink" title="4.1.3 Eureka两组件"></a>4.1.3 Eureka两组件</h4><p>Eureka包含两个组件：<code>Eureka Server</code>和<code>Eureka Client</code></p>
<ul>
<li><p><strong>Eureka Server提供服务注册服务</strong><br>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p>
</li>
<li><p><strong>EurekaClient通过注册中心进行访问</strong><br>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p>
</li>
</ul>
<h3 id="4-2-单机Eureka构建"><a href="#4-2-单机Eureka构建" class="headerlink" title="4.2 单机Eureka构建"></a>4.2 单机Eureka构建</h3><h4 id="4-2-1-cloud-eureka-server7001"><a href="#4-2-1-cloud-eureka-server7001" class="headerlink" title="4.2.1 cloud-eureka-server7001"></a>4.2.1 cloud-eureka-server7001</h4><p>注册中心</p>
<ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-server--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--boot web actuator--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--一般通用配置--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7001

eureka:
  instance:
    hostname: localhost #eureka服务端的实例名称
  client:
    #false表示不向注册中心注册自己。
    register-with-eureka: false
    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    fetch-registry: false
    service-url:
    #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
</code></pre>
</li>
<li><p>主启动</p>
<p>额外添加<code>@EnableEurekaServer</code></p>
</li>
<li><p>测试</p>
<p><a href="http://localhost:7001/">http://localhost:7001/</a></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101213819483.png" alt="image-20211101213819483"></p>
</li>
</ol>
<h4 id="4-2-2-cloud-provider-payment8001"><a href="#4-2-2-cloud-provider-payment8001" class="headerlink" title="4.2.2 cloud-provider-payment8001"></a>4.2.2 cloud-provider-payment8001</h4><ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--eureka-client--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.star.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--mysql-connector-java--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--jdbc--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 8001
spring:
  application:
    name: cloud-payment-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包 org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    username: root
    password: jaqen
eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版

mybatis:
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包
</code></pre>
</li>
<li><p>主启动类 <code>@EnableEurekaCient</code></p>
</li>
<li><p>测试</p>
<p>1.启动EurekaServer–&gt;2.<a href="http://localhost7001/">http://localhost7001/</a></p>
</li>
<li><p>自我保护机制</p>
</li>
</ol>
<h4 id="4-2-3-cloud-consumer-order81"><a href="#4-2-3-cloud-consumer-order81" class="headerlink" title="4.2.3 cloud-consumer-order81"></a>4.2.3 cloud-consumer-order81</h4><p><strong>消费者</strong></p>
<ol>
<li><p>pom</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>yml</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 80

spring:
    application:
        name: cloud-order-service

eureka:
  client:
    #表示是否将自己注册进EurekaServer默认为true。
    register-with-eureka: true
    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:7001/eureka
</code></pre>
</li>
<li><p>主启动 <code>@EnableEurekaClient</code></p>
</li>
<li><p>测试</p>
<p>Server7001 -&gt; provider8001 -&gt; <a href="http://localhost:81/consumer/payment/get/31">http://localhost:81/consumer/payment/get/31</a></p>
</li>
</ol>
<h3 id="4-3-集群Eureka构建"><a href="#4-3-集群Eureka构建" class="headerlink" title="4.3 集群Eureka构建"></a>4.3 集群Eureka构建</h3><h4 id="4-3-1-原理"><a href="#4-3-1-原理" class="headerlink" title="4.3.1 原理"></a>4.3.1 原理</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101215114958.png" alt="image-20211101215114958"></p>
<p>问题：微服务RPC远程服务调用最核心的是什么 ?</p>
<p>高可用，试想你的注册中心只有一个only one， 它出故障了那就呵呵(￣▽￣)”了，会导致整个为服务环境不可用.</p>
<p>　　解决办法：搭建Eureka注册中心集群 ，实现负载均衡+故障容错</p>
<h4 id="4-3-2-搭建步骤7001-7002"><a href="#4-3-2-搭建步骤7001-7002" class="headerlink" title="4.3.2 搭建步骤7001/7002"></a>4.3.2 搭建步骤7001/7002</h4><ol>
<li><p>参考cloud-eureka-server7001 新建 cloud-eureka-server7002</p>
</li>
<li><p>修改映射配置，找到C:\Windows\System32\drivers\etc路径下的hosts文件</p>
<p>添加127.0.0.1 eureka7001.com</p>
<p>​          127.0.0.1 eureka7002.com</p>
</li>
<li><p>修改yml (互相引用)</p>
<p>7001</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7001

eureka:
  instance:
    hostname: eureka7001.com #eureka服务端的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://eureka7002.com:7002/eureka/
</code></pre>
<p>7002</p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 7002
  
eureka:
  instance:
    hostname: eureka7002.com #eureka服务端的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/
</code></pre>
</li>
<li><p>主启动<code>@EnableEurekaServer</code></p>
</li>
</ol>
<h4 id="4-3-3-将8001注册"><a href="#4-3-3-将8001注册" class="headerlink" title="4.3.3 将8001注册"></a>4.3.3 将8001注册</h4><p>修改pom</p>
<pre class=" language-yml"><code class="language-yml">#替换掉原来的单机版
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
<h4 id="4-3-4-将80注册"><a href="#4-3-4-将80注册" class="headerlink" title="4.3.4 将80注册"></a>4.3.4 将80注册</h4><p>修改pom</p>
<pre class=" language-yml"><code class="language-yml">#替换掉原来的单机版
        defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  # 集群版
</code></pre>
<h4 id="4-3-5-测试"><a href="#4-3-5-测试" class="headerlink" title="4.3.5 测试"></a>4.3.5 测试</h4><ol>
<li>先要启动EurekaServer，7001/7002服务</li>
<li>再要启动服务提供者provider，8001</li>
<li>再要启动消费者，80</li>
<li><a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></li>
</ol>
<h4 id="4-3-6-支付提供者集群8002"><a href="#4-3-6-支付提供者集群8002" class="headerlink" title="4.3.6 支付提供者集群8002"></a>4.3.6 支付提供者集群8002</h4><p>修改8001/8002的Controller</p>
<pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//获取application中端口数据</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-3-7-负载均衡"><a href="#4-3-7-负载均衡" class="headerlink" title="4.3.7 负载均衡"></a>4.3.7 负载均衡</h4><ul>
<li>订单访问地址不能写死</li>
</ul>
<pre class=" language-java"><code class="language-java"> 
<span class="token comment" spellcheck="true">//public static final String PAYMENT_SRV = "http://localhost:8001";</span>
 
<span class="token comment" spellcheck="true">// 通过在eureka上注册过的微服务名称调用</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_SRV <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextBean</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment" spellcheck="true">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>
    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>负载均衡效果达到,8001/8002端口交替出现</p>
<h4 id="4-3-8-Eureka自我保护"><a href="#4-3-8-Eureka自我保护" class="headerlink" title="4.3.8 Eureka自我保护"></a>4.3.8 Eureka自我保护</h4><blockquote>
<p>故障</p>
</blockquote>
<p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，<br>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101221037399.png" alt="image-20211101221037399"></p>
<blockquote>
<p>原因</p>
</blockquote>
<p>一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存</p>
<blockquote>
<p>怎么禁止自我保护</p>
</blockquote>
<ul>
<li>注册中心eureakeServer端7001</li>
</ul>
<p>使用<code>eureka.server.enable-self-preservation = false</code> 可以禁用自我保护模式</p>
<ul>
<li>生产者客户端eurekaClient端8001</li>
</ul>
<pre class=" language-yml"><code class="language-yml">#心跳检测与续约时间
#开发时设置小些，保证服务关闭后注册中心能即使剔除服务
  instance:
  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)
    lease-renewal-interval-in-seconds: 1
  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务
    lease-expiration-duration-in-seconds: 2
 
</code></pre>
<h2 id="5-Zookeeper服务注册与发现"><a href="#5-Zookeeper服务注册与发现" class="headerlink" title="5.Zookeeper服务注册与发现"></a>5.Zookeeper服务注册与发现</h2><h3 id="5-1-Zookeeper概念"><a href="#5-1-Zookeeper概念" class="headerlink" title="5.1 Zookeeper概念"></a>5.1 Zookeeper概念</h3><p>它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
<h3 id="5-2-zk安装"><a href="#5-2-zk安装" class="headerlink" title="5.2 zk安装"></a>5.2 zk安装</h3><p>下载zk到linux的<code>/usr/local/software/</code></p>
<p>解压<code>tar -zxvf zookeeper-3.6.3.tar.gz</code>后进入到<code>conf</code>目录</p>
<p>拷贝<code>cp zoo_simple.cfg zoo.cfg</code>,进入到<code>cd bin/</code>目录下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>
./zkServer.sh start
<span class="token comment" spellcheck="true">#停止</span>
./zkServer.sh stop
<span class="token comment" spellcheck="true">#重启</span>
./zkServer.sh reload
<span class="token comment" spellcheck="true">#查看</span>
./zkServer.sh status

<span class="token comment" spellcheck="true">#联通</span>
./zkCli.sh -server 127.0.0.1:2181
<span class="token comment" spellcheck="true">#查看实例</span>
<span class="token function">ls</span> /services
</code></pre>
<h3 id="5-3-流程图"><a href="#5-3-流程图" class="headerlink" title="5.3 流程图"></a>5.3 流程图</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101222233077.png" alt="image-20211101222233077"></p>
<h2 id="6-Consul服务注册与发现"><a href="#6-Consul服务注册与发现" class="headerlink" title="6.Consul服务注册与发现"></a>6.Consul服务注册与发现</h2><h3 id="6-1-Consul概念"><a href="#6-1-Consul概念" class="headerlink" title="6.1 Consul概念"></a>6.1 Consul概念</h3><blockquote>
<p>是什么</p>
</blockquote>
<p>Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。</p>
<p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p>
<p>它具有很多优点。包括： 基于 raft 协议，比较简洁； 支持健康检查, 同时支持 HTTP 和 DNS 协议 支持跨数据中心的 WAN 集群 提供图形界面 跨平台，支持 Linux、Mac、Windows</p>
<blockquote>
<p>能干嘛</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223225099.png" alt="image-20211101223225099"></p>
<h3 id="6-2-下载和安装"><a href="#6-2-下载和安装" class="headerlink" title="6.2 下载和安装"></a>6.2 下载和安装</h3><blockquote>
<p>WindowsX64</p>
</blockquote>
<p>在下载目录通过cmd启动</p>
<p>查看版本</p>
<pre class=" language-bash"><code class="language-bash">consul --version
</code></pre>
<p>执行</p>
<pre class=" language-bash"><code class="language-bash">consul agent -dev
</code></pre>
<p>通过以下地址可以访问Consul的首页：<a href="http://localhost:8500/">http://localhost:8500</a></p>
<blockquote>
<p>结果</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223518905.png" alt="image-20211101223518905"></p>
<h3 id="6-3流程图"><a href="#6-3流程图" class="headerlink" title="6.3流程图"></a>6.3流程图</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223551145.png" alt="image-20211101223551145"></p>
<h2 id="7-三个注册中心异同点"><a href="#7-三个注册中心异同点" class="headerlink" title="7.三个注册中心异同点"></a>7.三个注册中心异同点</h2><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101223646833.png" alt="image-20211101223646833"></p>
<h3 id="7-1-CAP"><a href="#7-1-CAP" class="headerlink" title="7.1 CAP"></a>7.1 CAP</h3><ul>
<li>C:Consistency（强一致性）</li>
<li>A:Availability（可用性）</li>
<li>P:Partition tolerance（分区容错性）</li>
</ul>
<p>CAP理论关注粒度是数据，而不是整体系统设计的策略</p>
<h3 id="7-2-经典CAP图"><a href="#7-2-经典CAP图" class="headerlink" title="7.2 经典CAP图"></a>7.2 经典CAP图</h3><p><strong>最多只能同时较好的满足两个。</strong><br> CAP理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，</strong><br>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：<br>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。<br>CP - 满足一致性，分区容错性的系统，通常性能不是特别高。<br>AP - 满足可用性，分区容错性的系统，通常可能对一致性要求低一些。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211101224204456.png" alt="image-20211101224204456"></p>
<h3 id="7-3-AP-Eureka"><a href="#7-3-AP-Eureka" class="headerlink" title="7.3 AP(Eureka)"></a>7.3 AP(Eureka)</h3><p><strong>AP架构</strong><br>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。<br>结论：违背了一致性C的要求，只满足可用性和分区容错，即AP</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211101224302664.png" alt="image-20211101224302664" style="zoom: 80%;">

<h3 id="7-4-CP-Zookeeper-Consul"><a href="#7-4-CP-Zookeeper-Consul" class="headerlink" title="7.4 CP(Zookeeper/Consul)"></a>7.4 CP(Zookeeper/Consul)</h3><p><strong>CP架构</strong><br>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性<br>结论：违背了可用性A的要求，只满足一致性和分区容错，即CP</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211101224406506.png" alt="image-20211101224406506" style="zoom:80%;">

<h2 id="8-Ribbon负载均衡服务调用"><a href="#8-Ribbon负载均衡服务调用" class="headerlink" title="8.Ribbon负载均衡服务调用"></a>8.Ribbon负载均衡服务调用</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><h4 id="8-1-1-ribbon是什么"><a href="#8-1-1-ribbon是什么" class="headerlink" title="8.1.1 ribbon是什么"></a>8.1.1 ribbon是什么</h4><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡</strong>的工具。</p>
<p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p>
<h4 id="8-1-2-LB负载均衡"><a href="#8-1-2-LB负载均衡" class="headerlink" title="8.1.2 LB负载均衡"></a>8.1.2 LB负载均衡</h4><blockquote>
<p>LB负载均衡(Load Balance)是什么?</p>
</blockquote>
<p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。<br>常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p>
<blockquote>
<p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</p>
</blockquote>
<ul>
<li>Ribbon<strong>本地负载均衡</strong>，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</li>
<li>Nginx<strong>服务器负载均衡</strong>，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</li>
</ul>
<h4 id="8-1-3-集中式LB"><a href="#8-1-3-集中式LB" class="headerlink" title="8.1.3 集中式LB"></a>8.1.3 集中式LB</h4><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</p>
<h4 id="8-1-4-进程内LB"><a href="#8-1-4-进程内LB" class="headerlink" title="8.1.4 进程内LB"></a>8.1.4 进程内LB</h4><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p>
<p>Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>
<h3 id="8-2-Ribbon负载均衡演示"><a href="#8-2-Ribbon负载均衡演示" class="headerlink" title="8.2 Ribbon负载均衡演示"></a>8.2 Ribbon负载均衡演示</h3><h4 id="8-2-1-架构说明"><a href="#8-2-1-架构说明" class="headerlink" title="8.2.1 架构说明"></a>8.2.1 架构说明</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103205530988.png" alt="image-20211103205530988"></p>
<p><strong>总结：</strong></p>
<p>Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p>
<h4 id="8-2-2-使用"><a href="#8-2-2-使用" class="headerlink" title="8.2.2 使用"></a>8.2.2 使用</h4><p>引入pom依赖，<code>spring-cloud-starter-netflix-eureka-client</code>自带了<code>spring-cloud-starter-ribbon</code>引用</p>
<p>通过RestTemplate调用</p>
<ul>
<li>getForObject方法/getForEntity方法</li>
<li>postForObject/postForEntity</li>
</ul>
<p>消费者81：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//public static final String PAYMENT_URL = "http://localhost:8001";</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PAYMENT_URL <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/insert"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//客户端用浏览器是get请求，但是底层实质发送post调用服务端8001</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">insert</span><span class="token punctuation">(</span>Payment payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/insert"</span><span class="token punctuation">,</span> payment<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//http://localhost:81/consumer/payment/get/30</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL <span class="token operator">+</span> <span class="token string">"/payment/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="8-3-Ribbon核心组件IRule"><a href="#8-3-Ribbon核心组件IRule" class="headerlink" title="8.3 Ribbon核心组件IRule"></a>8.3 Ribbon核心组件IRule</h3><h4 id="8-3-1-IRule"><a href="#8-3-1-IRule" class="headerlink" title="8.3.1 IRule"></a>8.3.1 IRule</h4><p>IRule：根据特定算法中从服务列表中选取一个要访问的服务</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103210228260.png" alt="image-20211103210228260"></p>
<h4 id="8-3-2-分类"><a href="#8-3-2-分类" class="headerlink" title="8.3.2 分类"></a>8.3.2 分类</h4><ul>
<li><code>com.netflix.loadbalancer.RoundRobinRule</code>轮询</li>
<li><code>com.netflix.loadbalancer.RandomRule</code> 随机</li>
<li><code>com.netflix.loadbalancer.RetryRule</code> 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li>
<li><code>WeightedResponseTimeRule</code> 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li>
<li><code>BestAvailableRule</code> 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li>
<li><code>AvailabilityFilteringRule</code> 先过滤掉故障实例，再选择并发较小的实例</li>
<li><code>ZoneAvoidanceRule</code> 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li>
</ul>
<h4 id="8-3-3-如何选择"><a href="#8-3-3-如何选择" class="headerlink" title="8.3.3 如何选择"></a>8.3.3 如何选择</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103210637847.png" alt="image-20211103210637847"></p>
<h3 id="8-4-Ribbon负载均衡算法"><a href="#8-4-Ribbon负载均衡算法" class="headerlink" title="8.4 Ribbon负载均衡算法"></a>8.4 Ribbon负载均衡算法</h3><h4 id="8-4-1-原理"><a href="#8-4-1-原理" class="headerlink" title="8.4.1 原理"></a>8.4.1 原理</h4><p>负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。</p>
<p>List<serviceinstance> instances = discoveryClient.getInstances(“CLOUD-PAYMENT-SERVICE”);</serviceinstance></p>
<p>如：   List [0] instances = 127.0.0.1:8002<br>　　　List [1] instances = 127.0.0.1:8001</p>
<p>8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理：</p>
<p>当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001<br>当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002<br>当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001<br>当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002<br>如此类推……</p>
<h4 id="8-4-2-手写算法"><a href="#8-4-2-手写算法" class="headerlink" title="8.4.2 手写算法"></a>8.4.2 手写算法</h4><p><strong>LoadBalancer接口</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span>
<span class="token punctuation">{</span>
    ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>MyLB</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Componet</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLB</span> <span class="token keyword">implements</span> <span class="token class-name">loadBalancer</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> current<span class="token punctuation">;</span>
        <span class="token keyword">int</span> next<span class="token punctuation">;</span>
        <span class="token keyword">do</span><span class="token punctuation">{</span>
            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">>=</span> <span class="token number">2147483647</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span> <span class="token operator">:</span> current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"next:"</span> <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Ovrride</span>
    <span class="token keyword">public</span> ServiceInstance <span class="token function">instances</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ServicesInstance<span class="token operator">></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> serviceInstance<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idnex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>OderController:</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> LoadBalancer loadBalancer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/lb"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> null <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">instances</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="9-OpenFeign服务接口调用"><a href="#9-OpenFeign服务接口调用" class="headerlink" title="9.OpenFeign服务接口调用"></a>9.OpenFeign服务接口调用</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><h4 id="9-1-1-OpenFeign是什么"><a href="#9-1-1-OpenFeign是什么" class="headerlink" title="9.1.1 OpenFeign是什么"></a>9.1.1 OpenFeign是什么</h4><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。</p>
<p>它的使用方法是<strong>定义一个服务接口然后在上面添加注解</strong>。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p>
<h4 id="9-1-2-能干嘛"><a href="#9-1-2-能干嘛" class="headerlink" title="9.1.2 能干嘛"></a>9.1.2 能干嘛</h4><blockquote>
<p>Feign能干什么</p>
</blockquote>
<p>Feign旨在使编写Java Http客户端变得更容易。<br>前面在使用<code>Ribbon+RestTemplate</code>时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们<strong>只需创建一个接口并使用注解的方式来配置它</strong>(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可<strong>完成对服务提供方的接口绑定</strong>，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p>
<blockquote>
<p>Feign集成了Ribbon</p>
</blockquote>
<p>利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p>
<h4 id="9-1-3-Feign和OpenFeign的区别"><a href="#9-1-3-Feign和OpenFeign的区别" class="headerlink" title="9.1.3 Feign和OpenFeign的区别"></a>9.1.3 Feign和OpenFeign的区别</h4><table>
<thead>
<tr>
<th align="center">Feign</th>
<th align="center">OpenFeign</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端<br>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td>
<td align="center">OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
<tr>
<td align="center">spring-cloud-starter-feign</td>
<td align="center">spring-cloud-starter-openfeign</td>
</tr>
</tbody></table>
<h3 id="9-2-OpenFeign使用步骤"><a href="#9-2-OpenFeign使用步骤" class="headerlink" title="9.2 OpenFeign使用步骤"></a>9.2 OpenFeign使用步骤</h3><ol>
<li><p>新建cloud-consumer-feign-order80</p>
</li>
<li><p>pom</p>
</li>
<li><p>yml</p>
</li>
<li><p>主启动 <code>@EnableFeignClients</code> //开启</p>
</li>
<li><p>业务类</p>
<p>业务逻辑接口+@FeignClient配置调用provider服务</p>
<p>service：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/get/{id}"</span><span class="token punctuation">)</span>
    CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>controller：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFeignController</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> PaymentFeignService paymentFeignService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/get/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> paymentFeignService<span class="token punctuation">.</span><span class="token function">getPaymentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
</ol>
<h3 id="9-3-OpenFeign超时控制"><a href="#9-3-OpenFeign超时控制" class="headerlink" title="9.3 OpenFeign超时控制"></a>9.3 OpenFeign超时控制</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103212921380.png" alt="image-20211103212921380"></p>
<pre class=" language-java"><code class="language-java">TimeUtil<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p> 默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。</p>
<p>为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制,在yml配置文件中进行设置</p>
<pre class=" language-yml"><code class="language-yml">#设置feign客户端超时时间(OpenFeign默认支持ribbon)
ribbon:
  #指的是建立连接后从服务器读取到可用资源所用的时间
  ReadTimeout: 5000
  #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
  ConnectTimeout: 5000
</code></pre>
<h3 id="9-4-OpenFeign日志打印功能"><a href="#9-4-OpenFeign日志打印功能" class="headerlink" title="9.4 OpenFeign日志打印功能"></a>9.4 OpenFeign日志打印功能</h3><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。<br>就是对Feign接口的调用情况进行监控和输出.</p>
<blockquote>
<p>日志级别</p>
</blockquote>
<ul>
<li><code>NONE</code>：默认的，不显示任何日志；</li>
<li><code>BASIC</code>：仅记录请求方法、URL、响应状态码及执行时间；</li>
<li><code>HEADERS</code>：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</li>
<li><code>FULL</code>：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。</li>
</ul>
<p>配置日志类:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    Logger<span class="token punctuation">.</span>Level <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>开启Feign客户端：</p>
<pre class=" language-yml"><code class="language-yml">logging:
  level:
    # feign日志以什么级别监控哪个接口
    com.atguigu.springcloud.service.PaymentFeignService: debug
</code></pre>
<h2 id="10-Hystrix断路器"><a href="#10-Hystrix断路器" class="headerlink" title="10.Hystrix断路器"></a>10.Hystrix断路器</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><h4 id="10-1-1-分布式系统面临的问题"><a href="#10-1-1-分布式系统面临的问题" class="headerlink" title="10.1.1 分布式系统面临的问题"></a>10.1.1 分布式系统面临的问题</h4><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p>
<p><strong>服务雪崩</strong></p>
<p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.</p>
<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。<br>所以<br>通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生<strong>级联故障</strong>，或者叫雪崩。</p>
<h4 id="10-1-2-Hystrix是什么"><a href="#10-1-2-Hystrix是什么" class="headerlink" title="10.1.2 Hystrix是什么"></a>10.1.2 Hystrix是什么</h4><p>Hystrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</strong></p>
<p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h4 id="10-1-3-Hystrix作用"><a href="#10-1-3-Hystrix作用" class="headerlink" title="10.1.3 Hystrix作用"></a>10.1.3 Hystrix作用</h4><ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>接近实时的监控</li>
</ul>
<h3 id="10-2-Hystrix重要概念"><a href="#10-2-Hystrix重要概念" class="headerlink" title="10.2 Hystrix重要概念"></a>10.2 Hystrix重要概念</h3><h4 id="10-2-1-服务降级"><a href="#10-2-1-服务降级" class="headerlink" title="10.2.1 服务降级"></a>10.2.1 服务降级</h4><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，<code>fallback</code></p>
<blockquote>
<p>1.哪些情况会出发降级？</p>
</blockquote>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满也会导致</li>
</ul>
<p><font>解决办法:增加异常处理方法</font></p>
<blockquote>
<ol start="2">
<li>单个业务：</li>
</ol>
</blockquote>
<p>一旦调用服务方法失败并抛出了错误信息后，<br>会自动调用<code>@HystrixCommand</code>标注好的fallbackMethod调用类中的指定方法</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103220508176.png" alt="image-20211103220508176"></p>
<blockquote>
<p>3.全局业务：</p>
</blockquote>
<p><code>@DefaultProperties(defaultFallback = "")</code></p>
<p>除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaultFallback = “”)  统一跳转到统一处理结果页面</p>
<p>  通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量</p>
<blockquote>
<p>4.与业务逻辑分离</p>
</blockquote>
<p>根据cloud-consumer-feign-hystrix-order80已经有的<code>PaymentHystrixService</code>接口，<br>重新新建一个类<code>PaymentFallbackService</code>实现该接口，统一为接口里面的方法进行异常处理.</p>
<p>PaymentHystrixService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> PaymentFallbackService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClientService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>PaymentFallbackService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentFeignClientService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getPaymentInfo</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"服务调用失败，提示来自：cloud-consumer-feign-order80"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="10-2-2-服务熔断"><a href="#10-2-2-服务熔断" class="headerlink" title="10.2.2 服务熔断"></a>10.2.2 服务熔断</h4><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。</p>
<blockquote>
<p>1.解决方案</p>
</blockquote>
<p>PaymentService:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启熔断器</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//多少次请求</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//10s内</span>
        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//达到60%错误熔断</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"******id 不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    String serialNumber <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"调用成功，流水号: "</span> <span class="token operator">+</span> serialNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> String <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: "</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>服务的降级-&gt;进而熔断-&gt;恢复调用链路</strong></p>
<p><font>熔断状态</font></p>
<ul>
<li>熔断打开</li>
<li>熔断关闭</li>
<li>熔断半开 ： 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>
</ul>
<blockquote>
<p>3.断路器条件</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103221255475.png" alt="image-20211103221255475"></p>
<blockquote>
<p>4.断路器打开后</p>
</blockquote>
<p>1：再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p>
<p>2：原来的主逻辑要如何恢复呢？<br>对于这一问题，hystrix也为我们实现了自动恢复功能。<br>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，<br>当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，<br>主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p>
<h4 id="10-2-3-服务限流"><a href="#10-2-3-服务限流" class="headerlink" title="10.2.3 服务限流"></a>10.2.3 服务限流</h4><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p>
<p>详见<code>springcloud alibaba setninel</code></p>
<h3 id="10-3-hystrix工作流程"><a href="#10-3-hystrix工作流程" class="headerlink" title="10.3 hystrix工作流程"></a>10.3 hystrix工作流程</h3><ul>
<li>图例：</li>
</ul>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103222641143.png" alt="image-20211103222641143"></p>
<ul>
<li>步骤说明</li>
</ul>
<ol>
<li><p>创建 <code>HystrixCommand</code>（用在依赖的服务返回单个操作结果的时候） 或 <code>HystrixObserableCommand</code>（用在依赖的服务返回多个操作结果的时候） 对象。</p>
</li>
<li><p>命令执行。其中 HystrixComand 实现了下面前两种执行方式:</p>
<ul>
<li><code>execute()</code>：同步执行，从依赖的服务返回一个单一的结果对象， 或是在发生错误的时候抛出异常。</li>
<li><code>queue()</code>：异步执行， 直接返回 一个Future对象， 其中包含了服务执行结束时要返回的单一结果对象。</li>
</ul>
<p>HystrixObservableCommand 实现了后两种执行方式：</p>
<ul>
<li><code>observe()</code>：返回 Observable 对象，它代表了操作的多个结果，它是一个 Hot Obserable（不论 “事件源” 是否有 “订阅者”，都会在创建后对事件进行发布，所以对于 Hot Observable 的每一个 “订阅者” 都有可能是从 “事件源” 的中途开始的，并可能只是看到了整个操作的局部过程）。</li>
<li><code>toObservable()</code>： 同样会返回 Observable 对象，也代表了操作的多个结果，但它返回的是一个Cold Observable（没有 “订阅者” 的时候并不会发布事件，而是进行等待，直到有 “订阅者” 之后才发布事件，所以对于 Cold Observable 的订阅者，它可以保证从一开始看到整个操作的全部过程）。</li>
</ul>
</li>
<li><p>若当前命令的请求缓存功能是被启用的， 并且该命令缓存命中， 那么缓存的结果会立即以 Observable 对象的形式 返回。</p>
</li>
<li><p>检查断路器是否为打开状态。如果断路器是打开的，那么Hystrix不会执行命令，而是转接到 fallback 处理逻辑（第 8 步）；如果断路器是关闭的，检查是否有可用资源来执行命令（第 5 步）。</p>
</li>
<li><p>线程池/请求队列/信号量是否占满。如果命令依赖服务的专有线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满， 那么 Hystrix 也不会执行命令， 而是转接到 fallback 处理逻辑（第8步）。</p>
</li>
<li><p>Hystrix 会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。HystrixCommand.run() ：返回一个单一的结果，或者抛出异常。HystrixObservableCommand.construct()： 返回一个Observable 对象来发射多个结果，或通过 onError 发送错误通知。</p>
</li>
<li><p>Hystrix会将 “成功”、”失败”、”拒绝”、”超时” 等信息报告给断路器， 而断路器会维护一组计数器来统计这些数据。断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行 “熔断/短路”。</p>
</li>
<li><p>当命令执行失败的时候， Hystrix 会进入 fallback 尝试回退处理， 我们通常也称该操作为 “服务降级”。而能够引起服务降级处理的情况有下面几种：第4步： 当前命令处于”熔断/短路”状态，断路器是打开的时候。第5步： 当前命令的线程池、 请求队列或 者信号量被占满的时候。第6步：HystrixObservableCommand.construct() 或 HystrixCommand.run() 抛出异常的时候。</p>
</li>
<li><p>当Hystrix命令执行成功之后， 它会将处理结果直接返回或是以Observable 的形式返回。</p>
</li>
</ol>
<p><strong>tips：</strong>如果我们没有为命令实现降级逻辑或者在降级处理逻辑中抛出了异常， Hystrix 依然会返回一个 Observable 对象， 但是它不会发射任何结果数据， 而是通过 onError 方法通知命令立即中断请求，并通过onError()方法将引起命令失败的异常发送给调用者。</p>
<h3 id="10-4-服务监控hystrixDashboard"><a href="#10-4-服务监控hystrixDashboard" class="headerlink" title="10.4 服务监控hystrixDashboard"></a>10.4 服务监控hystrixDashboard</h3><h4 id="10-4-1-概述"><a href="#10-4-1-概述" class="headerlink" title="10.4.1 概述"></a>10.4.1 概述</h4><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p>
<h4 id="10-4-2-仪表盘步骤"><a href="#10-4-2-仪表盘步骤" class="headerlink" title="10.4.2 仪表盘步骤"></a>10.4.2 仪表盘步骤</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223247617.png" alt="image-20211103223247617"></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223258680.png" alt="image-20211103223258680"></p>
<h4 id="10-4-3-监控窗口"><a href="#10-4-3-监控窗口" class="headerlink" title="10.4.3 监控窗口"></a>10.4.3 监控窗口</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223425924.png" alt="image-20211103223425924"></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223459404.png" alt="image-20211103223459404"></p>
<h2 id="11-zuul路由网关"><a href="#11-zuul路由网关" class="headerlink" title="11.zuul路由网关"></a>11.zuul路由网关</h2><h3 id="11-1-概述简介"><a href="#11-1-概述简介" class="headerlink" title="11.1 概述简介"></a>11.1 概述简介</h3><ul>
<li>Zuul是一种提供动态路由、监视、弹性、安全性等功能的边缘服务。</li>
<li>Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。</li>
</ul>
<p>API网关为微服务架构中的服务提供了统一的访问入口，客户端通过API网关访问相关服务。API网关的定义类似于设计模式中的门面模式，它相当于整个微服务架构中的门面，所有客户端的访问都通过它来进行路由及过滤。它实现了请求路由、负载均衡、校验过滤、服务容错、服务聚合等功能。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223706350.png" alt="image-20211103223706350"></p>
<p>Zuul包含了如下最主要的功能：</p>
<p><font>代理+路由+过滤三大功能</font></p>
<h3 id="11-2-作用"><a href="#11-2-作用" class="headerlink" title="11.2 作用"></a>11.2 作用</h3><ul>
<li><p>路由</p>
</li>
<li><p>过滤</p>
</li>
<li><p>负载均衡</p>
</li>
<li><p>灰度发布（or 金丝雀发布）</p>
<p>起源是，矿井工人发现，金丝雀对瓦斯气体很敏感，矿工会在下井之前，先放一只金丝雀到井中，如果金丝雀不叫了，就代表瓦斯浓度高。</p>
</li>
</ul>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103223913156.png" alt="image-20211103223913156"></p>
<p>在灰度发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。新版本没什么问题，那么逐步扩大范围、流量，把所有用户都迁移到新版本上面来。</p>
<h2 id="12-Gateway新一代网关"><a href="#12-Gateway新一代网关" class="headerlink" title="12.Gateway新一代网关"></a>12.Gateway新一代网关</h2><h3 id="12-1-概述简介"><a href="#12-1-概述简介" class="headerlink" title="12.1 概述简介"></a>12.1 概述简介</h3><h4 id="12-1-1-是什么？"><a href="#12-1-1-是什么？" class="headerlink" title="12.1.1 是什么？"></a>12.1.1 是什么？</h4><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。<br>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p>
<h4 id="12-1-2-能干嘛？"><a href="#12-1-2-能干嘛？" class="headerlink" title="12.1.2 能干嘛？"></a>12.1.2 能干嘛？</h4><ul>
<li>反向代理</li>
<li>鉴权 ：是指验证用户是否拥有访问系统的权利</li>
<li>流量控制</li>
<li>熔断</li>
<li>日志监控</li>
</ul>
<h4 id="10-1-3-网关所处位置"><a href="#10-1-3-网关所处位置" class="headerlink" title="10.1.3 网关所处位置"></a>10.1.3 网关所处位置</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103224324410.png" alt="image-20211103224324410"></p>
<h4 id="10-1-4-为什么选择Gateway"><a href="#10-1-4-为什么选择Gateway" class="headerlink" title="10.1.4 为什么选择Gateway"></a>10.1.4 为什么选择Gateway</h4><blockquote>
<p>1.neflix不太靠谱，zuul2.0一直跳票，迟迟不发布</p>
</blockquote>
<blockquote>
<p>SpringCloud Gateway具有如下特性</p>
</blockquote>
<ul>
<li>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建；</li>
<li>动态路由：能够匹配任何请求属性；</li>
<li>可以对路由指定 Predicate（断言）和 Filter（过滤器）；</li>
<li>集成Hystrix的断路器功能；</li>
<li>集成 Spring Cloud 服务发现功能；</li>
<li>易于编写的 Predicate（断言）和 Filter（过滤器）；</li>
<li>请求限流功能；</li>
<li>支持路径重写。</li>
</ul>
<blockquote>
<p>SpringCloud Gateway 与 Zuul的区别</p>
</blockquote>
<ul>
<li>1、Zuul 1.x，是一个基于<strong>阻塞 I/ O</strong> 的 API Gateway</li>
<li>2、Zuul 1.x 基于<strong>Servlet 2. 5使用阻塞架构它不支持任何长连接</strong>(如 WebSocket) Zuul 的设计模式和Nginx较像，每次 I/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++ 实现，Zuul 用 Java 实现，而 JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</li>
<li>3、Zuul 2.x理念更先进，想<strong>基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合</strong>。 Zuul 2.x的性能较 Zuul 1.x 有较大提升。在性能方面，根据官方提供的基准测试， Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。</li>
<li>4、Spring Cloud Gateway 建立 在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上， 使用<strong>非阻塞 API</strong>。</li>
<li>5、Spring Cloud Gateway 还 支持 WebSocket， 并且与<strong>Spring紧密集成</strong>拥有更好的开发体验</li>
</ul>
<h3 id="12-2-三大核心概念"><a href="#12-2-三大核心概念" class="headerlink" title="12.2 三大核心概念"></a>12.2 三大核心概念</h3><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。<br><code>predicate</code>就是我们的匹配条件；<br>而<code>filter</code>，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的<code>route</code>路由了</p>
<h4 id="12-2-1-Route-路由"><a href="#12-2-1-Route-路由" class="headerlink" title="12.2.1 Route(路由)"></a>12.2.1 Route(路由)</h4><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p>
<h4 id="12-2-2-Predicate-断言"><a href="#12-2-2-Predicate-断言" class="headerlink" title="12.2.2 Predicate(断言"></a>12.2.2 Predicate(断言</h4><p>开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由</p>
<h4 id="12-2-3-Filter-过滤"><a href="#12-2-3-Filter-过滤" class="headerlink" title="12.2.3 Filter(过滤)"></a>12.2.3 Filter(过滤)</h4><p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p>
<h3 id="12-3-入门配置"><a href="#12-3-入门配置" class="headerlink" title="12.3 入门配置"></a>12.3 入门配置</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103225335954.png" alt="image-20211103225335954"></p>
<p><font>yml网关配置</font></p>
<pre class=" language-yml"><code class="language-yml">server:
  port: 9527

spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      routes:
        - id: payment_routh #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2 #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         # 断言，路径相匹配的进行路由

eureka:
  instance:
    hostname: cloud-gateway-service
  client: #服务提供者provider注册进eureka服务列表内
    service-url:
      register-with-eureka: true
      fetch-registry: true
      defaultZone: http://eureka7001.com:7001/eureka
</code></pre>
<h3 id="12-4-通过微服务名实现动态路由"><a href="#12-4-通过微服务名实现动态路由" class="headerlink" title="12.4 通过微服务名实现动态路由"></a>12.4 通过微服务名实现动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p>
<p>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p>
<p>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</p>
<p>修改yml</p>
<pre class=" language-yml"><code class="language-yml">spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: payment_routh               #路由的ID，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:8001    #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAYMENT-SERVICE #动态匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         # 断言，路径相匹配的进行路由

        - id: payment_routh2             
          # uri: http://localhost:8001         
          uri: lb://cloud-payment-service 
          predicates:
            - Path=/payment/lb/**        
</code></pre>
<h3 id="12-5-Predicate断言的使用"><a href="#12-5-Predicate断言的使用" class="headerlink" title="12.5 Predicate断言的使用"></a>12.5 Predicate断言的使用</h3><p>Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p>
<pre class=" language-yml"><code class="language-yml">
- Path=/payment/get/**  

- After=2020-02-05T15:10:03.685+08:00[Asia/Shanghai]  # 在此时间之后才可以

- Before=2020-02-05T15:10:03.685+08:00[Asia/Shanghai] # 之前

- Between=2020-02-02T17:45:06.206+08:00[Asia/Shanghai],2020-03-25T18:59:06.206+08:00[Asia/Shanghai]                     # 之间

- Cookie=username,zzyy            #必须携带cookie

- Header=X-Request-Id, \d+      # 请求头要有X-Request-Id属性并且值为整数的正则表达式

- Host=**.atguigu.com

- Method=GET                    #请求方式为Get

- Query=username, \d+              # 要有参数名username并且值还要是整数才能路由

</code></pre>
<h3 id="12-6-Filter的使用"><a href="#12-6-Filter的使用" class="headerlink" title="12.6 Filter的使用"></a>12.6 Filter的使用</h3><h4 id="12-6-1-基础过滤器"><a href="#12-6-1-基础过滤器" class="headerlink" title="12.6.1 基础过滤器"></a>12.6.1 基础过滤器</h4><blockquote>
<p>Filter是什么</p>
</blockquote>
<p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p>
<blockquote>
<p>常用的GatewayFilter</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211103230937100.png" alt="image-20211103230937100"></p>
<pre class=" language-yml"><code class="language-yml">  routes:
        - id: payment_routh 
          uri: lb://cloud-provider-payment 
          filters:
            - AddRequestParameter=X-Request-Id,1024 
            #过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024
</code></pre>
<h4 id="12-6-2-自定义过滤器"><a href="#12-6-2-自定义过滤器" class="headerlink" title="12.6.2 自定义过滤器*"></a>12.6.2 自定义过滤器*</h4><p>自定义全局<code>GlobalFilter</code></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span>Ordered<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 执行了自定义的全局过滤器: "</span><span class="token operator">+</span><span class="token string">"MyLogGateWayFilter"</span><span class="token operator">+</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****用户名为null，无法登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>访问的时候必须加上<code>uname</code>参数，如：</p>
<p><a href="http://localhost:9527/payment/lb?uname=XXX">http://localhost:9527/payment/lb?uname=XXX</a>    </p>
<h2 id="13-SpringCloud-Config分布式配置中心"><a href="#13-SpringCloud-Config分布式配置中心" class="headerlink" title="13.SpringCloud Config分布式配置中心"></a>13.SpringCloud Config分布式配置中心</h2><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><h4 id="13-1-1-分布式系统面临的—配置问题"><a href="#13-1-1-分布式系统面临的—配置问题" class="headerlink" title="13.1.1  分布式系统面临的—配置问题"></a>13.1.1  分布式系统面临的—配置问题</h4><p> 微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p>
<p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理……</p>
<h4 id="13-1-2-是什么"><a href="#13-1-2-是什么" class="headerlink" title="13.1.2 是什么"></a>13.1.2 是什么</h4><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214421743.png" alt="image-20211105214421743"></p>
<p>SpringCloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p>
<p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p>
<p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p>
<h4 id="13-1-3-能干嘛"><a href="#13-1-3-能干嘛" class="headerlink" title="13.1.3 能干嘛"></a>13.1.3 能干嘛</h4><ul>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ul>
<h4 id="13-1-4-与github整合"><a href="#13-1-4-与github整合" class="headerlink" title="13.1.4 与github整合"></a>13.1.4 与github整合</h4><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，<br>但最推荐的还是Git，而且使用的是http/https访问的形式</p>
<h3 id="13-2-Config服务端配置与测试"><a href="#13-2-Config服务端配置与测试" class="headerlink" title="13.2 Config服务端配置与测试"></a>13.2 Config服务端配置与测试</h3><h4 id="13-2-1-配置github"><a href="#13-2-1-配置github" class="headerlink" title="13.2.1 配置github"></a>13.2.1 配置github</h4><ol>
<li><p>用你自己的账号在GitHub上新建一个名为springcloud-config的新Repository</p>
</li>
<li><p>获得配置的仓库地址</p>
</li>
<li><p>在D盘下建立本地仓库，并clone</p>
</li>
<li><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>

<span class="token function">git</span> commit -m <span class="token string">"xxxx"</span>

<span class="token function">git</span> push origin master
</code></pre>
</li>
</ol>
<h4 id="13-2-2-新建cloud-config-center-3344"><a href="#13-2-2-新建cloud-config-center-3344" class="headerlink" title="13.2.2 新建cloud-config-center-3344"></a>13.2.2 新建cloud-config-center-3344</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214827916.png" alt="image-20211105214827916"></p>
<h4 id="13-2-3-配置读取规则"><a href="#13-2-3-配置读取规则" class="headerlink" title="13.2.3 配置读取规则"></a>13.2.3 配置读取规则</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105214943979.png" alt="image-20211105214943979"></p>
<h3 id="13-3-Config客户端配置与测试"><a href="#13-3-Config客户端配置与测试" class="headerlink" title="13.3 Config客户端配置与测试"></a>13.3 Config客户端配置与测试</h3><blockquote>
<p>新建cloud-config-client-3355</p>
</blockquote>
<p>建立<code>bootstrap.yml</code></p>
<p><strong>bootstrap.yml是什么?</strong></p>
<p>applicaiton.yml是用户级的资源配置项<br>bootstrap.yml是系统级的，优先级更加高</p>
<p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p>
<p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p>
<p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，<br>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p>
<blockquote>
<p>测试</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105215902239.png" alt="image-20211105215902239"></p>
<h3 id="13-4-Config客户端之动态刷新"><a href="#13-4-Config客户端之动态刷新" class="headerlink" title="13.4 Config客户端之动态刷新"></a>13.4 Config客户端之动态刷新</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220056339.png" alt="image-20211105220056339"></p>
<h2 id="14-SpringCloud-Bus动态刷新全局广播"><a href="#14-SpringCloud-Bus动态刷新全局广播" class="headerlink" title="14.SpringCloud Bus动态刷新全局广播"></a>14.SpringCloud Bus动态刷新全局广播</h2><h3 id="14-1-概述"><a href="#14-1-概述" class="headerlink" title="14.1 概述"></a>14.1 概述</h3><h4 id="14-1-1-是什么"><a href="#14-1-1-是什么" class="headerlink" title="14.1.1 是什么"></a>14.1.1 是什么</h4><p>Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220332912.png" alt="image-20211105220332912"></p>
<p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，<br>它整合了Java的事件处理机制和消息中间件的功能。<br>Spring Clud Bus目前支持RabbitMQ和Kafka。</p>
<h4 id="14-1-2-能干嘛"><a href="#14-1-2-能干嘛" class="headerlink" title="14.1.2 能干嘛"></a>14.1.2 能干嘛</h4><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220451461.png" alt="image-20211105220451461"></p>
<h4 id="14-1-3-总线是什么"><a href="#14-1-3-总线是什么" class="headerlink" title="14.1.3 总线是什么"></a>14.1.3 总线是什么</h4><p><strong>什么是总线</strong><br>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p>
<p><strong>基本原理</strong><br>ConfigClient实例都监听MQ中同一个topic(默认是springCloudBus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p>
<h3 id="14-2-RabbitMQ环境配置"><a href="#14-2-RabbitMQ环境配置" class="headerlink" title="14.2 RabbitMQ环境配置"></a>14.2 RabbitMQ环境配置</h3><p>见本博客Rabbitmq文章</p>
<h3 id="14-3-Bus动态刷新全局广播"><a href="#14-3-Bus动态刷新全局广播" class="headerlink" title="14.3 Bus动态刷新全局广播"></a>14.3 Bus动态刷新全局广播</h3><h4 id="14-3-1-cloud-config-client-3366"><a href="#14-3-1-cloud-config-client-3366" class="headerlink" title="14.3.1 cloud-config-client-3366"></a>14.3.1 cloud-config-client-3366</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220739955.png" alt="image-20211105220739955"></p>
<h4 id="14-3-2-设计思想"><a href="#14-3-2-设计思想" class="headerlink" title="14.3.2 设计思想"></a>14.3.2 设计思想</h4><blockquote>
<p>1）利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置(不推荐)</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220807264.png" alt="image-20211105220807264"></p>
<blockquote>
<p>2）利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，而刷新所有客户端的配置(推荐)</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105220905238.png" alt="image-20211105220905238"></p>
<p>图二的架构显然更加适合，图一不适合的原因如下:</p>
<ol>
<li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li>
<li>破坏了微服务各节点的对等性。</li>
<li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li>
</ol>
<h4 id="14-3-3-修改配置"><a href="#14-3-3-修改配置" class="headerlink" title="14.3.3 修改配置"></a>14.3.3 修改配置</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221103350.png" alt="image-20211105221103350"></p>
<h4 id="14-3-4-测试"><a href="#14-3-4-测试" class="headerlink" title="14.3.4 测试"></a>14.3.4 测试</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221131398.png" alt="image-20211105221131398"></p>
<h3 id="14-4-Bus动态刷新定点通知"><a href="#14-4-Bus动态刷新定点通知" class="headerlink" title="14.4 Bus动态刷新定点通知"></a>14.4 Bus动态刷新定点通知</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221221929.png" alt="image-20211105221221929"></p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#只通知3355，不通知3366</span>
curl -X POST <span class="token string">"http://localhost:3344/actuator/bus-refresh/config-client:3355"</span>
</code></pre>
<h2 id="15-SpringCloud-Stream消息驱动"><a href="#15-SpringCloud-Stream消息驱动" class="headerlink" title="15.SpringCloud Stream消息驱动"></a>15.SpringCloud Stream消息驱动</h2><p>中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/</a></p>
<h3 id="15-1-消息驱动概述"><a href="#15-1-消息驱动概述" class="headerlink" title="15.1 消息驱动概述"></a>15.1 消息驱动概述</h3><blockquote>
<p>SpringCloudStream是什么</p>
</blockquote>
<p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p>
<p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream中binder对象交互。<br>通过我们配置来binding(绑定) ，而 Spring Cloud Stream 的 binder对象负责与消息中间件交互。<br>所以，我们只需要搞清楚如何与 Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p>
<p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。<br>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p>
<p>目前仅支持RabbitMQ、Kafka。</p>
<p>总结：<font>屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型</font></p>
<h3 id="15-2-设计思想"><a href="#15-2-设计思想" class="headerlink" title="15.2 设计思想"></a>15.2 设计思想</h3><h4 id="15-2-1-标准MQ"><a href="#15-2-1-标准MQ" class="headerlink" title="15.2.1 标准MQ"></a>15.2.1 标准MQ</h4><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105221822546.png" alt="image-20211105221822546"></p>
<h4 id="15-2-2-为什么用Cloud-Stream"><a href="#15-2-2-为什么用Cloud-Stream" class="headerlink" title="15.2.2 为什么用Cloud Stream"></a>15.2.2 为什么用Cloud Stream</h4><p>比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，<br>像RabbitMQ有exchange，kafka有Topic和Partitions分区。</p>
<p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了<strong>一种解耦合</strong>的方式。</p>
<blockquote>
<p>stream凭什么可以统一底层差异？</p>
</blockquote>
<p>在没有<strong>绑定器</strong>这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性<br>通过定义绑定器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。<br>通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</p>
<p><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222117356.png" alt="image-20211105222117356"></p>
<p>Binder可以生成Binding，Binding用来绑定消息容器的生产者和消费者，它有两种类型，<code>INPUT</code>和<code>OUTPUT</code>，INPUT对应于消费者，OUTPUT对应于生产者。</p>
<blockquote>
<p>发布-订阅模式</p>
</blockquote>
<p>Stream中的消息通信方式遵循了发布-订阅模式</p>
<p>Topic主题进行广播:</p>
<ul>
<li>在RabbitMQ就是Exchange</li>
<li>在Kakfa中就是Topic</li>
</ul>
<h3 id="15-3-Stream标准流程套路"><a href="#15-3-Stream标准流程套路" class="headerlink" title="15.3 Stream标准流程套路"></a>15.3 Stream标准流程套路</h3><p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222324954.png" alt="image-20211105222324954"></p>
<p><code>binder</code>:很方便的连接中间件，屏蔽差异</p>
<p><code>Channel</code>:通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p>
<p><code>Source和Sink</code>:简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105222453582.png" alt="image-20211105222453582"></p>
<h3 id="15-4-模块构建"><a href="#15-4-模块构建" class="headerlink" title="15.4 模块构建"></a>15.4 模块构建</h3><ol>
<li>cloud-stream-rabbitmq-provider8801， 作为生产者进行发消息模块</li>
<li>cloud-stream-rabbitmq-consumer8802，作为消息接收模块1</li>
<li>cloud-stream-rabbitmq-consumer8803  作为消息接收模块2</li>
</ol>
<p>启动7001-&gt;8801-&gt;8802-&gt;8803</p>
<p>运行后有两个问题:</p>
<ul>
<li>有重复消费问题</li>
<li>消息持久化问题</li>
</ul>
<h3 id="15-5-分组消费与持久化"><a href="#15-5-分组消费与持久化" class="headerlink" title="15.5 分组消费与持久化"></a>15.5 分组消费与持久化</h3><blockquote>
<p> 重复消费问题</p>
</blockquote>
<p>目前是8802/8803同时都收到了，存在重复消费问题<img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223034102.png" alt="image-20211105223034102"></p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>分组和持久化属性group</p>
<p>如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息，<br>那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。<br>这时我们就可以使用Stream中的消息分组来解决</p>
<img src="../images/2021-10-31-springcloud学习笔记/image-20211105223226628.png" alt="image-20211105223226628" style="zoom:67%;">

<p>注意在Stream中处于<strong>同一个group中的多个消费者是竞争关系</strong>，就能够保证消息只会被其中一个应用消费一次。<br>不同组是可以全面消费的(重复消费)，<br>同一组内会发生竞争关系，只有其中一个可以消费。</p>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223316082.png" alt="image-20211105223316082"></p>
<blockquote>
<p>持久化</p>
</blockquote>
<p><img src="/../images/2021-10-31-springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211105223350659.png" alt="image-20211105223350659"></p>
</body></html>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud Alibaba</title>
    <url>/2021/11/06/springcloud%20Alibaba/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="1-入门简介"><a href="#1-入门简介" class="headerlink" title="1.入门简介"></a>1.入门简介</h2><p>官网:<a href="https://spring.io/projects/spring-cloud-alibaba#overview">https://spring.io/projects/spring-cloud-alibaba#overview</a></p>
<p>中文：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<p>英文：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p>
<h3 id="1-1-为什么会出现SpringCloud-alibaba？"><a href="#1-1-为什么会出现SpringCloud-alibaba？" class="headerlink" title="1.1 为什么会出现SpringCloud alibaba？"></a>1.1 为什么会出现SpringCloud alibaba？</h3><p>Spring Cloud Netflix项目进入维护模式。</p>
<p>spring Cloud Netflix 将不再开发新的组件。<br>我们都知道Spring Cloud 版本迭代算是比较快的，因而出现了很多重大ISSUE都还来不及Fix就又推另一个Release了。进入维护模式意思就是目前一直以后一段时间Spring Cloud Netflix提供的服务和功能就这么多了，不在开发新的组件和功能了。以后将以维护和Merge分支Full Request为主。</p>
<p>新组件功能将以其他替代平代替的方式实现。</p>
<h3 id="1-2-SpringCloud-alibaba带来了什么"><a href="#1-2-SpringCloud-alibaba带来了什么" class="headerlink" title="1.2 SpringCloud alibaba带来了什么"></a>1.2 SpringCloud alibaba带来了什么</h3><blockquote>
<p>1.是什么</p>
</blockquote>
<p><code>SpringCloud Alibaba</code>,它是由一些阿里巴巴的开源组件和云产品组成的。这个项目的目的是为了让大家所熟知的Spring框架，其优秀的设计模式和抽象理念，以给使用阿里巴巴产品的Java开发者带来使用<code>SpringBoot</code>和<code>SpringCloud</code>的更多便利。</p>
<blockquote>
<p>2.能干嘛</p>
</blockquote>
<ul>
<li><p>服务限流降级：默认支持 <code>Servlet</code>、<code>Feign</code>、<code>RestTemplate</code>、<code>Dubbo</code> 和 <code>RocketMQ</code> 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p>
</li>
<li><p>服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 <code>Ribbon</code>的支持。</p>
</li>
<li><p>分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。</p>
</li>
<li><p>消息驱动能力：基于 <code>Spring Cloud Stream</code> 为微服务应用构建消息驱动能力。</p>
</li>
<li><p>阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
</li>
<li><p>分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 <code>Cron</code> 表达式）任</p>
<p>务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（<code>schedulerx-client</code>）上执行。</p>
</li>
</ul>
<blockquote>
<p>3.下载地址</p>
</blockquote>
<p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<blockquote>
<p>4.怎么用</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106181103003.png" alt="image-20211106181103003"></p>
<h2 id="2-Nacos-服务注册和配置中心"><a href="#2-Nacos-服务注册和配置中心" class="headerlink" title="2.Nacos 服务注册和配置中心"></a>2.Nacos 服务注册和配置中心</h2><p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107221105102.png" alt="image-20211107221105102"></p>
<h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><blockquote>
<p>1.为什么叫Nacos</p>
</blockquote>
<p>前四个字母分别为<code>Naming</code>和<code>Configuration</code>的前两个字母，最后的s为<code>Service</code>。</p>
<p>Nacos: Dynamic Naming and Configuration Service</p>
<blockquote>
<p>2.是什么</p>
</blockquote>
<p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p>Nacos就是注册中心 + 配置中心的组合</p>
<p>等价于 </p>
<p>Nacos = Eureka+Config +Bus </p>
<blockquote>
<p>3.能干嘛</p>
</blockquote>
<ul>
<li>替代Eureka做服务注册中心</li>
<li>替代Config做服务配置中心</li>
</ul>
<blockquote>
<p>4.去哪下</p>
</blockquote>
<p>下载地址：<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p>
<p>官网文档:<a href="https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/index.html</a></p>
<blockquote>
<p>5.各种注册中心比较</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106185450229.png" alt="image-20211106185450229"></p>
<p>Nacos 在阿里巴巴内部有超过 10 万的实例运行，已经过了类似双十一等各种大型流量的考验</p>
<h3 id="2-2-安装并运行"><a href="#2-2-安装并运行" class="headerlink" title="2.2 安装并运行"></a>2.2 安装并运行</h3><blockquote>
<p>1.下载</p>
</blockquote>
<p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>可选<code>Windows</code>版和<code>Linux</code>版</p>
<blockquote>
<p>2.Windows版</p>
</blockquote>
<p>下载到本地，解压安装包，从bin目录直接运行cmd,输入命令启动</p>
<pre class=" language-bash"><code class="language-bash">startup.cmd -m standalone
</code></pre>
<p>命令运行成功后直接访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p>
<p>默认账号密码都是<code>nacos</code></p>
<p>进入如下界面<img src="../images/2021-11-06-springcloud-Alibaba/image-20211106191932963.png" alt="image-20211106191932963" style="zoom:80%;"></p>
<h3 id="2-4-服务注册中心"><a href="#2-4-服务注册中心" class="headerlink" title="2.4 服务注册中心"></a>2.4 服务注册中心</h3><blockquote>
<p>1.基于Nacos的服务提供者</p>
</blockquote>
<p>创建<code>moudle</code>:</p>
<ul>
<li>cloudalibaba-provider-payment9001</li>
<li>cloudalibaba-provider-payment9002</li>
</ul>
<ol>
<li><p>向父pom添加</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>本模块pom</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--SpringCloud ailibaba nacos --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
</li>
<li><p>yml</p>
</li>
<li><p>主启动 + <code>@EnableDiscoveryClient</code></p>
</li>
<li><p>业务类</p>
</li>
<li><p>测试:<a href="http://localhost:9001/payment/nacos/1">http://localhost:9001/payment/nacos/1</a></p>
</li>
</ol>
<blockquote>
<p>2.基于Nacos的服务消费者</p>
</blockquote>
<p><code>moudle</code>:cloudalibaba-consumer-nacos-order83</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106192913393.png" alt="image-20211106192913393"></p>
<p>测试：<a href="http://localhost:83/consumer/payment/nacos/13">http://localhost:83/consumer/payment/nacos/13</a></p>
<blockquote>
<p>3.服务注册中心对比</p>
</blockquote>
<p><strong>Nacos全景图：</strong></p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106193107843.png" alt="image-20211106193107843"></p>
<p><strong>Nacos和CAP：</strong></p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106193216590.png" alt="image-20211106193216590"></p>
<h3 id="2-5-配置服务中心"><a href="#2-5-配置服务中心" class="headerlink" title="2.5 配置服务中心"></a>2.5 配置服务中心</h3><h4 id="2-5-1-基础配置"><a href="#2-5-1-基础配置" class="headerlink" title="2.5.1 基础配置"></a>2.5.1 基础配置</h4><blockquote>
<p>1.cloudalibaba-config-nacos-client3377</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106193433836.png" alt="image-20211106193433836"></p>
<blockquote>
<p>2.在nacos中添加配置</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106193537120.png" alt="image-20211106193537120"></p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106193607156.png" alt="image-20211106193607156"></p>
<ul>
<li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值</li>
<li><code>spring.profile.active</code> 即为当前环境对应的 profile，可以通过配置项 <code>spring.profile.active</code> 来配置。</li>
<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置</li>
</ul>
<blockquote>
<p>3.历史配置</p>
</blockquote>
<p>Nacos会记录配置文件的历史版本默认保留30天，此外还有一键回滚功能，回滚操作将会触发配置更新</p>
<blockquote>
<p>4.测试</p>
</blockquote>
<ol>
<li>运行cloud-config-nacos-client3377的主启动类</li>
<li><a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></li>
</ol>
<p>调用接口查看配置信息</p>
<p><font>自带动态刷新</font></p>
<p>修改下Nacos中的yaml配置文件，再次调用查看配置的接口，就会发现配置已经刷新</p>
<h4 id="2-5-2-分类配置"><a href="#2-5-2-分类配置" class="headerlink" title="2.5.2 分类配置"></a>2.5.2 分类配置</h4><blockquote>
<p>1.多环境多项目管理</p>
</blockquote>
<p><strong>问题1：</strong><br>实际开发中，通常一个系统会准备<br>dev开发环境<br>test测试环境<br>prod生产环境。<br>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢？*</p>
<p><strong>问题2：</strong><br>一个大型分布式微服务系统会有很多微服务子项目，<br>每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境……<br>那怎么对这些微服务配置进行管理呢？</p>
<blockquote>
<p>Namespace+Group+Data ID</p>
</blockquote>
<p><strong>1 是什么</strong><br>   类似Java里面的package名和类名<br>   最外层的namespace是可以用于区分部署环境的，Group和DataID逻辑上区分两个目标对象。</p>
<p><strong>可以通过三个限定定位到任何一个所存在的配置文件</strong></p>
<p><strong>2 三者情况</strong><br>    <img src="/../images/2021-11-06-springcloud-Alibaba/image-20211106194442726.png" alt="image-20211106194442726"><br>默认情况：<br><code>Namespace=public，Group=DEFAULT_GROUP, 默认Cluster是DEFAULT</code></p>
<p>Nacos默认的命名空间是public，Namespace主要用来实现隔离。<br>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p>
<p>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去</p>
<p>Service就是微服务；一个Service可以包含多个Cluster（集群），Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。</p>
<p>比方说为了容灾，将Service微服务分别部署在了杭州机房和广州机房，<br>这时就可以给杭州机房的Service微服务起一个集群名称（HZ），<br>给广州机房的Service微服务起一个集群名称（GZ），还可以尽量让同一个机房的微服务互相调用，以提升性能。</p>
<p>最后是Instance，就是微服务的实例。</p>
<h4 id="2-5-3-yaml"><a href="#2-5-3-yaml" class="headerlink" title="2.5.3 yaml"></a>2.5.3 yaml</h4><p><code>bootstrap.yaml</code>:</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># nacos注册中心</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#Nacos服务注册中心地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true">#Nacos作为配置中心地址</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true">#这里我们获取的yaml格式的配置</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 5da1dccc<span class="token punctuation">-</span>ee26<span class="token punctuation">-</span>49e0<span class="token punctuation">-</span>b8e5<span class="token punctuation">-</span>7d9559b95ab0
        <span class="token comment" spellcheck="true">#group: DEV_GROUP</span>
        <span class="token key atrule">group</span><span class="token punctuation">:</span> TEST_GROUP
</code></pre>
<p><code>application.yaml</code>:</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Nacos注册配置，application.yml</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#active: test</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
    <span class="token comment" spellcheck="true">#active: info</span>
</code></pre>
<h3 id="2-6-Nacos集群和持久化配置"><a href="#2-6-Nacos集群和持久化配置" class="headerlink" title="2.6 Nacos集群和持久化配置*"></a>2.6 Nacos集群和持久化配置*</h3><h4 id="2-6-1-架构图"><a href="#2-6-1-架构图" class="headerlink" title="2.6.1 架构图"></a>2.6.1 架构图</h4><p>官网架构：</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107213610674.png" alt="image-20211107213610674"></p>
<p>实际架构：</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107213639542.png" alt="image-20211107213639542"></p>
<h4 id="2-6-2-Nacos持久化配置解释"><a href="#2-6-2-Nacos持久化配置解释" class="headerlink" title="2.6.2 Nacos持久化配置解释"></a>2.6.2 Nacos持久化配置解释</h4><p>Nacos默认自带的是嵌入式数据库derby</p>
<p>我们需要将数据库从<code>derby</code>切换到<code>mysql</code></p>
<ol>
<li>nacos-server-1.1.4\nacos\conf目录下找到sql脚本 —-&gt;执行脚本</li>
<li>nacos-server-1.1.4\nacos\conf目录下找到application.properties –&gt;添加数据库连接</li>
</ol>
<p>预计需要，1个Nginx+3个nacos注册中心+1个mysql</p>
<h4 id="2-6-3-集群搭建"><a href="#2-6-3-集群搭建" class="headerlink" title="2.6.3 集群搭建"></a>2.6.3 集群搭建</h4><p>Linux服务器上mysql数据库配置</p>
<ul>
<li>1.开启数据库，进入数据库</li>
</ul>
<pre class=" language-bash"><code class="language-bash">mysql -u root -p

create database nacos_config

<span class="token comment" spellcheck="true">#复制粘贴nacos中的nacos-mysql.sql脚本</span>
</code></pre>
<ul>
<li>2.修改<code>/nacos/conf/application.properties</code> 配置(Mysql8.0以上及得加上ServerTimeZone=UTC)</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span>
 
<span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span>
<span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">jaqen</span>
</code></pre>
<ul>
<li><p>3.Linux服务器上nacos的集群配置cluster.conf</p>
<p>复制<code>cluster.conf</code>原始文件</p>
</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> cluster.conf.example cluster.conf
<span class="token comment" spellcheck="true">#编辑</span>
vim cluster.conf
<span class="token comment" spellcheck="true">#这个IP不能写127.0.0.1，必须是Linux命令hostname -i能够识别的IP</span>
<span class="token comment" spellcheck="true">#注释掉里边的内容，并添加</span>
192.168.111.144:3333
192.168.111.144:4444
192.168.111.144:5555
</code></pre>
<ul>
<li>4.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端口</li>
</ul>
<img src="../images/2021-11-06-springcloud-Alibaba/image-20211107215431975.png" alt="image-20211107215431975" style="zoom:67%;">

<img src="../images/2021-11-06-springcloud-Alibaba/image-20211107215438779.png" alt="image-20211107215438779" style="zoom:67%;">

<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#执行方式</span>
<span class="token punctuation">[</span>root@Linux bin<span class="token punctuation">]</span> ./startup.sh -p 3333
</code></pre>
<ul>
<li>5.Nginx的配置，由它作为负载均衡器</li>
</ul>
<pre class=" language-conf"><code class="language-conf">#修改添加nginx.conf
upstream cluster{
        server 47.113.221.239:3333;
        server 47.113.221.239:4444;
        server 47.113.221.239:5555;
    }
server {
        listen       1111;
        server_name  localhost;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
            #root   html;
            #index  index.html index.htm;
            proxy_pass http://cluster;
        }
</code></pre>
<img src="../images/2021-11-06-springcloud-Alibaba/image-20211107215850640.png" alt="image-20211107215850640" style="zoom:67%;">

<p>按照指定方式启动</p>
<pre class=" language-bash"><code class="language-bash">./nginx -c /usr/local/nginx/conf/nginx.conf
</code></pre>
<ul>
<li>6.截止到此处，1个Nginx+3个nacos注册中心+1个mysql</li>
</ul>
<ol>
<li><p>测试通过nginx访问nacos:<a href="http://192.168.111.144:1111/nacos/#/login">http://192.168.111.144:1111/nacos/#/login</a></p>
</li>
<li><p>新建一个配置测试:</p>
<img src="../images/2021-11-06-springcloud-Alibaba/image-20211107220041949.png" alt="image-20211107220041949" style="zoom: 67%;"></li>
<li><p>如果linux服务器的mysql插入一条记录则成功</p>
</li>
</ol>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107220212519.png" alt="image-20211107220212519"></p>
<h2 id="3-Sentinel实现熔断与限流"><a href="#3-Sentinel实现熔断与限流" class="headerlink" title="3.Sentinel实现熔断与限流"></a>3.Sentinel实现熔断与限流</h2><p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107221122322.png" alt="image-20211107221122322"></p>
<h3 id="3-1-Sentinel-简介"><a href="#3-1-Sentinel-简介" class="headerlink" title="3.1 Sentinel 简介"></a>3.1 Sentinel 简介</h3><blockquote>
<p>官网</p>
</blockquote>
<p>英文：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p>
<p>中文：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p>
<blockquote>
<p>是什么</p>
</blockquote>
<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>类似于Hystrix（豪猪哥）。</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107220634267.png" alt="image-20211107220634267"></p>
<blockquote>
<p>服务使用中的各种问题</p>
</blockquote>
<ul>
<li>服务雪崩</li>
<li>服务降级</li>
<li>服务熔断</li>
<li>服务限流</li>
</ul>
<h3 id="3-2-下载与安装"><a href="#3-2-下载与安装" class="headerlink" title="3.2 下载与安装"></a>3.2 下载与安装</h3><blockquote>
<p>下载地址</p>
</blockquote>
<p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p>
<blockquote>
<p>安装步骤</p>
</blockquote>
<p>前提条件：java8环境OK &amp;&amp; 8080端口不能被占用</p>
<p>下载到本地，直接通过cmd启动输入：</p>
<pre class=" language-bash"><code class="language-bash">java -jar sentinel-dashboard-1.8.2.jar
</code></pre>
<blockquote>
<p>访问sentinel管理界面</p>
</blockquote>
<p><a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>登录账号密码均为sentinel</p>
<h3 id="3-3-初始化演示工程"><a href="#3-3-初始化演示工程" class="headerlink" title="3.3 初始化演示工程"></a>3.3 初始化演示工程</h3><p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107221225142.png" alt="image-20211107221225142"></p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107221248001.png" alt="image-20211107221248001"></p>
<h3 id="3-4详细规则使用"><a href="#3-4详细规则使用" class="headerlink" title="3.4详细规则使用"></a>3.4详细规则使用</h3><p>参考官方使用文档：<a href="https://sentinelguard.io/zh-cn/docs/introduction.html">https://sentinelguard.io/zh-cn/docs/introduction.html</a></p>
<blockquote>
<p>流控规则</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107222731744.png" alt="image-20211107222731744"></p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107222839375.png" alt="image-20211107222839375"></p>
<blockquote>
<p>降级规则</p>
</blockquote>
<p>Sentinel 提供以下几种熔断策略：</p>
<ul>
<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>
<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li>
<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
<p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>
<table>
<thead>
<tr>
<th align="center">Field</th>
<th align="left">说明</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">resource</td>
<td align="left">资源名，即规则的作用对象</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">grade</td>
<td align="left">熔断策略，支持慢调用比例/异常比例/异常数策略</td>
<td align="left">慢调用比例</td>
</tr>
<tr>
<td align="center">count</td>
<td align="left">慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">timeWindow</td>
<td align="left">熔断时长，单位为 s</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">minRequestAmount</td>
<td align="left">熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>
<td align="left">5</td>
</tr>
<tr>
<td align="center">statIntervalMs</td>
<td align="left">统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>
<td align="left">1000 ms</td>
</tr>
<tr>
<td align="center">slowRatioThreshold</td>
<td align="left">慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>热点规则</p>
</blockquote>
<p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>
<ul>
<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>
<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>
</ul>
<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211107223556271.png" alt="image-20211107223556271"></p>
<p>限流模式只支持QPS模式，固定写死了。（这才叫热点）<br>@SentinelResource注解的方法参数索引，0代表第一个参数，1代表第二个参数，以此类推<br>单机阀值以及统计窗口时长表示在此窗口时间超过阀值就限流。<br>上面的抓图就是第一个参数有值的话，1秒的QPS为1，超过就限流，限流后调用<code>dealHandler_testHotKey</code>支持兜底方法。</p>
<p><font>参数例外项</font></p>
<img src="../images/2021-11-06-springcloud-Alibaba/image-20211107223748576.png" alt="image-20211107223748576" style="zoom:67%;">

<blockquote>
<p>@SentinelResource</p>
</blockquote>
<p><strong>客户自定义限流处理逻辑</strong></p>
<ul>
<li>创建CustomerBlockHandler类用于自定义限流处理逻辑</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handleException1</span><span class="token punctuation">(</span>BlockException e<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token string">"自定义的限流处理信息1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
                                               
   <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handleException2</span><span class="token punctuation">(</span>BlockException e<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token string">"自定义的限流处理信息2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>RateLimitController</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span><span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/customerBlockHandler"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span>blockHandlerClass <span class="token operator">=</span> CustomerBlockHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"handleException2"</span><span class="token punctuation">)</span>
    
    <span class="token keyword">public</span> CommonResult <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"正常业务流程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>服务熔断</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-payment-provider"</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//1.没有兜底方案，返回界面不友好</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//2.fallback负责业务异常   </span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//3.blockHandler负责在sentinel里面配置的降级限流</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">//4.都配置，且添加忽略规则</span>
    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">,</span> exceptionsToIgnore <span class="token operator">=</span> <span class="token punctuation">{</span>IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//忽略非法异常</span>

    <span class="token keyword">public</span> CommonResult <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        CommonResult result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL <span class="token operator">+</span> <span class="token string">"/paymentSQL/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录,空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//本例是fallback，处理业务异常</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span>  Long id<span class="token punctuation">,</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Payment payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"fallback,无此流水,exception  "</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//本例是blockHandler，处理配置规则</span>
    <span class="token keyword">public</span> CommonResult <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span>  Long id<span class="token punctuation">,</span> BlockException blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Payment payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span><span class="token string">"blockHandler-sentinel限流,无此流水: blockException  "</span><span class="token operator">+</span>blockException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h2 id="4-Seata处理分布式事务"><a href="#4-Seata处理分布式事务" class="headerlink" title="4.Seata处理分布式事务"></a>4.Seata处理分布式事务</h2><p>官网：<a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p>
<h3 id="4-1-Seate简介"><a href="#4-1-Seate简介" class="headerlink" title="4.1 Seate简介"></a>4.1 Seate简介</h3><blockquote>
<p> 1.分布式事务</p>
</blockquote>
<p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，<br>业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题没法保证。</p>
<p><strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108205815232.png" alt="image-20211108205815232"></p>
<blockquote>
<p>2.是什么</p>
</blockquote>
<p>Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p>
<p><strong>分布式事务处理过程的ID+三组件模型</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>Transaction ID （XID）</td>
<td>全局唯一的事务ID</td>
</tr>
<tr>
<td>Transaction Coordinator (TC)</td>
<td>事务协调器，维护<strong>全局事务</strong>的运行状态，负责协调并驱动全局事务的提交或回滚；</td>
</tr>
<tr>
<td>Transaction Manager (TM)</td>
<td>控制全局事务的边界，负责<strong>开启一个全局事务</strong>，并最终发起全局提交或全局回滚的决议；</td>
</tr>
<tr>
<td>Resource Manager (RM)</td>
<td><strong>控制分支事务</strong>，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</td>
</tr>
</tbody></table>
<p>处理过程：</p>
<ol>
<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</li>
<li>XID 在微服务调用链路的上下文中传播；</li>
<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li>
<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li>
<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li>
</ol>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108210419209.png" alt="image-20211108210419209"></p>
<blockquote>
<p>咋么用</p>
</blockquote>
<p>本地<code>@Transactional</code></p>
<p>全局<code>@GlobalTransactional</code></p>
<h3 id="4-2-Seata-Server安装"><a href="#4-2-Seata-Server安装" class="headerlink" title="4.2  Seata-Server安装"></a>4.2  Seata-Server安装</h3><blockquote>
<p>下载地址</p>
</blockquote>
<p><a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p>
<p>下载的是seata-server-1.0.0.zip</p>
<blockquote>
<p>安装</p>
</blockquote>
<ol>
<li><p>下载并解压到指定目录</p>
</li>
<li><p>备份<code>file.conf</code>和<code>registry.conf</code></p>
</li>
<li><p>主要修改：<code>file.conf</code>自定义事务组名称+事务日志存储模式为db+数据库连接信息</p>
<p>   <code>registry.conf</code> 配置nacos注册中心，并指定端口号serverAddr=”localhost:8848”</p>
</li>
<li><p>mysql下新建数据库<code>seata</code>,并键表<code>branch_table</code>,<code>global_table</code>,<code>lock_table</code></p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- the table to store GlobalSession data</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">tinyint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>
  <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">key</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">key</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment" spellcheck="true">-- the table to store BranchSession data</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>lock_key<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>
  <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">key</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment" spellcheck="true">-- the table to store lock data</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> long <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> long<span class="token punctuation">,</span>
  <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>pk<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token punctuation">,</span>
  <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>
  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>先启动Nacos:<code>startup.cmd -m standalone</code></p>
</li>
<li><p>再启动seata-server:<code>.\seata-server.bat -p 8091 -h 127.0.0.1 -m db</code></p>
</li>
</ol>
<h3 id="4-3-订单-库存-账户业务数据库准备"><a href="#4-3-订单-库存-账户业务数据库准备" class="headerlink" title="4.3 订单/库存/账户业务数据库准备"></a>4.3 订单/库存/账户业务数据库准备</h3><blockquote>
<p>分布式事务业务说明</p>
</blockquote>
<p>创建三个服务，一个订单服务，一个库存服务，一个账户服务。</p>
<ol>
<li>当用户下单时，会在订单服务中创建一个订单，</li>
<li>然后通过远程调用库存服务来扣减下单商品的库存，</li>
<li>再通过远程调用账户服务来扣减用户账户里面的余额，</li>
<li>最后在订单服务中修改订单状态为已完成。</li>
</ol>
<p>下订单—&gt;扣库存—&gt;减账户(余额)</p>
<p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p>
<blockquote>
<p>创建业务数据库</p>
</blockquote>
<ul>
<li><code>seata_order</code>：存储订单的数据库，并建t_order表</li>
</ul>
<pre class=" language-sql"><code class="language-sql">REATE <span class="token keyword">TABLE</span> t_order <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>count<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>money<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'金额'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态：0：创建中；1：已完结'</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre>
<ul>
<li><code>seata_storage</code>：存储库存的数据库，并建t_storage 表</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_storage <span class="token punctuation">(</span>
 <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
 <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'产品id'</span><span class="token punctuation">,</span>
 <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总库存'</span><span class="token punctuation">,</span>
 <span class="token punctuation">`</span>used<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用库存'</span><span class="token punctuation">,</span>
 <span class="token punctuation">`</span>residue<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余库存'</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
 
 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> seata_storage<span class="token punctuation">.</span>t_storage<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li><code>seata_account</code>：存储账户信息的数据库，并建t_account 表</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_account <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总额度'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>used<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用余额'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>residue<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余可用额度'</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> seata_account<span class="token punctuation">.</span>t_account<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span><span class="token punctuation">)</span>  <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>分别建立回滚日志</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_account <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>total<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'总额度'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>used<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'已用余额'</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>residue<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'剩余可用额度'</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> seata_account<span class="token punctuation">.</span>t_account<span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>total<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>used<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>residue<span class="token punctuation">`</span><span class="token punctuation">)</span>  <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-4-订单-库存-账户业务微服务建立"><a href="#4-4-订单-库存-账户业务微服务建立" class="headerlink" title="4.4 订单/库存/账户业务微服务建立"></a>4.4 订单/库存/账户业务微服务建立</h3><p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108212054871.png" alt="image-20211108212054871"></p>
<p>重点说明：<code>OrderServiceImpl</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>OrderDao<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Order<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrderService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>StorageService<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GlobalTransactional<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
 * @author Jaqen
 * @create 2021-11-08-15:05
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> OrderDao orderDao<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> StorageService  storageService<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 创建订单->调用库存服务扣减库存->调用账户服务扣减账户余额->修改订单状态
     * 简单说：
     * 下订单->减库存->减余额->改状态
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"star-create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->下单开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//本应用创建订单</span>
        orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//远程调用库存服务扣减库存</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中扣减库存开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中扣减库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//远程调用账户服务扣减余额</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中扣减余额开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中扣减余额结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//修改订单状态为已完成</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->order-service中修改订单状态结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->下单结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>参考<code>seata-order-service2001</code>建立<code>seata-storage-service2002</code>和<code>seata-account-service2003</code></p>
</blockquote>
<h3 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h3><blockquote>
<p>正常下单</p>
</blockquote>
<p><a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p>
<ul>
<li>添加超时异常，没加@GlobalTransactional</li>
</ul>
<p>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1</p>
<p>而且由于feign的重试机制，账户余额还有可能被多次扣减</p>
<ul>
<li>超时异常，添加@GlobalTransactional</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"自定义"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">{</span>
。。。。。。
<span class="token punctuation">}</span>
</code></pre>
<p>下单后数据库数据并没有任何改变，记录都添加不进来</p>
<h3 id="4-6-补充"><a href="#4-6-补充" class="headerlink" title="4.6 补充"></a>4.6 补充</h3><blockquote>
<p>分布式事务的执行流程</p>
</blockquote>
<ol>
<li>TM 开启分布式事务（TM 向 TC 注册全局事务记录）；</li>
<li>按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；</li>
<li>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；</li>
<li>TC 汇总事务信息，决定分布式事务是提交还是回滚；</li>
<li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li>
</ol>
<blockquote>
<p>AT模式如何做到对业务的无侵入</p>
</blockquote>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108212953865.png" alt="image-20211108212953865"></p>
<blockquote>
<p>一阶段</p>
</blockquote>
<p>在一阶段，Seata 会拦截“业务 SQL”，<br>1  解析 SQL 语义，找到“业务 SQL”要更新的业务数据，在业务数据被更新前，将其保存成“before image”，<br>2  执行“业务 SQL”更新业务数据，在业务数据更新之后，<br>3  其保存成“after image”，最后生成行锁。<br>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108213014677.png" alt="image-20211108213014677"></p>
<blockquote>
<p>二阶段提交</p>
</blockquote>
<p>二阶段如是顺利提交的话，<br>因为“业务 SQL”在一阶段已经提交至数据库，所以Seata框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108213036396.png" alt="image-20211108213036396"></p>
<blockquote>
<p>二阶段回滚</p>
</blockquote>
<p>二阶段回滚：<br>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL”，还原业务数据。<br>回滚方式便是用“before image”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “after image”，<br>如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理。</p>
<p><img src="/../images/2021-11-06-springcloud-Alibaba/image-20211108213105322.png" alt="image-20211108213105322"></p>
</body></html>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>springcloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus知识点</title>
    <url>/2021/12/03/mybatis-plus%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h1><h2 id="1-Mybatis-plus入门"><a href="#1-Mybatis-plus入门" class="headerlink" title="1.Mybatis-plus入门"></a>1.Mybatis-plus入门</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p>官方文档地址：<a href="https://mp.baomidou.com/guide">https://mp.baomidou.com/guide</a></p>
<h3 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h3><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h3 id="1-3-支持数据库"><a href="#1-3-支持数据库" class="headerlink" title="1.3 支持数据库"></a>1.3 支持数据库</h3><p>任何能使用 <code>mybatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p>
<ul>
<li>mysql，oracle，db2，h2，hsql，sqlite，postgresql，sqlserver，Phoenix，Gauss ，clickhouse，Sybase，OceanBase，Firebird，cubrid，goldilocks，csiidb</li>
</ul>
<h3 id="1-4-框架结构"><a href="#1-4-框架结构" class="headerlink" title="1.4 框架结构"></a>1.4 框架结构</h3><p><img src="/../images/2021-12-03-mybatis-plus%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211203224656210.png" alt="image-20211203224656210"></p>
<h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2 环境配置"></a>2 环境配置</h2><h3 id="2-1-maven"><a href="#2-1-maven" class="headerlink" title="2.1 maven"></a>2.1 maven</h3><pre class=" language-xml"><code class="language-xml">            <span class="token comment" spellcheck="true">&lt;!--mybatis-plus 持久层--></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

            <span class="token comment" spellcheck="true">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="2-2-代码生成器"><a href="#2-2-代码生成器" class="headerlink" title="2.2 代码生成器"></a>2.2 代码生成器</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author
 * @since 2018/12/13
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 1、创建代码生成器</span>
        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 2、全局配置</span>
        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"D:\\idea_collection\\guli-parent\\service\\service_edu"</span> <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Jaqen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者署名</span>
        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成后是否打开资源管理器</span>
        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重新生成时文件是否覆盖</span>
        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去掉Service接口的首字母I</span>
        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键策略</span>
        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义生成的实体类中日期类型</span>
        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启Swagger2模式</span>

        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 3、数据源配置</span>
        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"jaqen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 4、包配置</span>
        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.star"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"edu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//模块名</span>
        <span class="token comment" spellcheck="true">//com.star.edu</span>
        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 5、策略配置</span>
        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"edu_teacher"</span><span class="token punctuation">,</span><span class="token string">"edu_student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择要生成的数据库表名</span>
        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表映射到实体的命名策略</span>
        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成实体时去掉表前缀</span>

        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表字段映射到实体的命名策略</span>
        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lombok 模型 @Accessors(chain = true) setter链式操作</span>

        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//restful api风格控制器</span>
        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url中驼峰转连字符</span>

        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 6、执行</span>
        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-3-xml的pom配置"><a href="#2-3-xml的pom配置" class="headerlink" title="2.3 xml的pom配置"></a>2.3 xml的pom配置</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="2-4-数据库设计"><a href="#2-4-数据库设计" class="headerlink" title="2.4 数据库设计"></a>2.4 数据库设计</h3><p><img src="/../images/2021-12-03-mybatis-plus%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211203231831233.png" alt="image-20211203231831233"></p>
<h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><h3 id="3-1-entity"><a href="#3-1-entity" class="headerlink" title="3.1 entity"></a>3.1 entity</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"edu_teacher"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Teacher对象"</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"讲师"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"讲师ID"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span>
    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"讲师姓名"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"乐观锁"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Version</span>
    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"逻辑删除 1（true）已删除， 0（false）未删除"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableLogic</span>
    <span class="token keyword">private</span> Boolean isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date gmtCreate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date gmtModified<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-2-mapper"><a href="#3-2-mapper" class="headerlink" title="3.2 mapper"></a>3.2 mapper</h3><blockquote>
<p>1.mapper</p>
</blockquote>
<p><img src="/../images/2021-12-03-mybatis-plus%E7%9F%A5%E8%AF%86%E7%82%B9/image-20211203230401220.png" alt="image-20211203230401220"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>Teacher<span class="token operator">></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>2.xml</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.edu.mapper.TeacherMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="3-3-service"><a href="#3-3-service" class="headerlink" title="3.3 service"></a>3.3 service</h3><blockquote>
<p>接口：Service</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>Teacher<span class="token operator">></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>接口实现类：ServiceImpl</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>IPage<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>Page<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Teacher<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TeacherMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>star<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TeacherService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ServiceImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>TeacherMapper<span class="token punctuation">,</span> Teacher<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">TeacherService</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-4-controller"><a href="#3-4-controller" class="headerlink" title="3.4 controller"></a>3.4 controller</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiOperation<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"讲师管理"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/eduService/teacher"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TeacherService teacherService<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-5-config"><a href="#3-5-config" class="headerlink" title="3.5 config"></a>3.5 config</h3><p><code>MyBatisPlusConfig</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
* 基于旧版 3.0.5
* 新版3.3.1以上 有所改变
*/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.star.edu.mapper"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 逻辑删除插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 分页插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token comment" spellcheck="true">/**
     * 乐观锁插件
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-6-handler"><a href="#3-6-handler" class="headerlink" title="3.6 handler"></a>3.6 handler</h3><p><code>MyMetaObjectHandler</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>


<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//属性名称，不是字段名称</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtCreate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-7-application-yml"><a href="#3-7-application-yml" class="headerlink" title="3.7 application.yml"></a>3.7 application.yml</h3><pre class=" language-yml"><code class="language-yml">spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test?useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: jaqen
#配置日志
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  #逻辑删除
  global-config:
    db-config:
      logic-delete-value: 1 # 逻辑已删除(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除(默认为 0)
</code></pre>
</body></html>]]></content>
      <categories>
        <category>mybatis-plus</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC高并发编程</title>
    <url>/2021/12/29/JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<html><head></head><body><h1 id="JUC高并发编程"><a href="#JUC高并发编程" class="headerlink" title="JUC高并发编程"></a>JUC高并发编程</h1><h2 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1.什么是JUC"></a>1.什么是JUC</h2><h3 id="1-1-JUC简介"><a href="#1-1-JUC简介" class="headerlink" title="1.1 JUC简介"></a>1.1 JUC简介</h3><p>在 Java 中，线程部分是一个重点。JUC 就是 java.util .concurrent 工具包的简称。这是一个处理线程的工具包，JDK  1.5 开始出现的</p>
<h3 id="1-2-进程与线程"><a href="#1-2-进程与线程" class="headerlink" title="1.2  进程与线程"></a>1.2  进程与线程</h3><p><code>进程(Process)</code>是计算机中的程序关于某数据集合上的一次运行活动，是系统进行分配资源和调度的基本单位，是操作系统结构的基础。在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>
<p><code>线程(Thread)</code>是操作系统能够进行运算调度的最小单位。他被包含在进程之中，是进程的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<p><strong>总结来说:</strong></p>
<ul>
<li>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程— —<code>资源分配的最小单位</code>。</li>
<li>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个 单元执行流。线程——<code>程序执行的最小单位</code>。</li>
</ul>
<h3 id="1-3-线程的状态"><a href="#1-3-线程的状态" class="headerlink" title="1.3 线程的状态"></a>1.3 线程的状态</h3><ol>
<li><code>初始(NEW)</code>：新创建了一个线程对象，但还没有调用start()方法。</li>
<li><code>运行(RUNNABLE)</code>：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li>
<li><code>阻塞(BLOCKED)</code>：表示线程阻塞于锁。</li>
<li><code>等待(WAITING)</code>：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li>
<li><code>超时等待(TIMED_WAITING)</code>：该状态不同于WAITING，它可以在指定的时间后自行返回。</li>
<li><code>终止(TERMINATED)</code>：表示该线程已经执行完毕。</li>
</ol>
<p><strong>线程的状态图</strong></p>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20211229222956023.png" alt="image-20211229222956023"></p>
<h3 id="1-4-线程的方法"><a href="#1-4-线程的方法" class="headerlink" title="1.4 线程的方法"></a>1.4 线程的方法</h3><ul>
<li><p><code>Thread.sleep(long millis)</code>，一定是当前线程调用此方法，当前线程进入TIMED_WAITING状态，但不释放对象锁，millis后线程自动苏醒进入就绪状态。作用：给其它线程执行机会的最佳方式。</p>
</li>
<li><p><code>Thread.yield()</code>，一定是当前线程调用此方法，当前线程放弃获取的CPU时间片，但不释放锁资源，由运行状态变为就绪状态，让OS再次选择线程。作用：让相同优先级的线程轮流执行，但并不保证一定会轮流执行。实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。Thread.yield()不会导致阻塞。该方法与sleep()类似，只是不能由用户指定暂停多长时间。</p>
</li>
<li><p><code>thread.join()/thread.join(long millis)</code>，当前线程里调用其它线程t的join方法，当前线程进入WAITING/TIMED_WAITING状态，当前线程不会释放已经持有的对象锁。线程t执行完毕或者millis时间到，当前线程一般情况下进入RUNNABLE状态，也有可能进入BLOCKED状态（因为join是基于wait实现的）。</p>
</li>
<li><p><code>obj.wait()</code>，当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。依靠notify()/notifyAll()唤醒或者wait(long timeout) timeout时间到自动唤醒。</p>
</li>
<li><p><code>obj.notify()</code>唤醒在此对象监视器上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象监视器上等待的所有线程。</p>
</li>
<li><p><code>LockSupport.park()/LockSupport.parkNanos(long nanos),</code></p>
<p><code>LockSupport.parkUntil(long deadlines)</code>, 当前线程进入WAITING/TIMED_WAITING状态。对比wait方法,不需要获得锁就可以让线程进入WAITING/TIMED_WAITING状态，需要通过LockSupport.unpark(Thread thread)唤醒。</p>
</li>
</ul>
<blockquote>
<p>wait/sleep 的区别 </p>
</blockquote>
<p>（1）sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用。 </p>
<p>（2）sleep 不会释放锁，它也不需要占用锁。wait 会释放锁，但调用它的前提是当前线程占有            锁(即代码要在 synchronized 中)。 </p>
<p>（3）它们都可以被 interrupted 方法中断。</p>
<h3 id="1-5-并发与并行"><a href="#1-5-并发与并行" class="headerlink" title="1.5 并发与并行"></a>1.5 并发与并行</h3><blockquote>
<p> 1.串行</p>
</blockquote>
<p>串行表示所有任务都一一按先后顺序进行。</p>
<p>串行是一次只能取得一个任务，并执行这个任务。</p>
<blockquote>
<p>2.并发</p>
</blockquote>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20211229231727840.png" alt="image-20211229231727840"></p>
<ol>
<li><code>Concurrency</code>，是并发的意思。并发的实质是<code>一个物理CPU(也可以多个物理CPU) 在若干道程序（或线程）之间多路复用</code>，并发性是对有限物理资源强制行使多用户共享以提高效率。</li>
<li>微观角度：所有的并发处理都有排队等候，唤醒，执行等这样的步骤，在微观上他们都是序列被处理的，如果是同一时刻到达的请求（或线程）也会根据优先级的不同，而先后进入队列排队等候执行。</li>
<li>宏观角度：多个几乎同时到达的请求（或线程）在宏观上看就像是同时在被处理。</li>
<li>通俗点讲，<code>并发就是只有一个CPU资源，程序（或线程）之间要竞争得到执行机会</code>。图中的第一个阶段，在A执行的过程中B，C不会执行，因为这段时间内这个CPU资源被A竞争到了，同理，第二个阶段只有B在执行，第三个阶段只有C在执行。其实，并发过程中，A，B，C并不是同时在进行的（微观角度）。但又是同时进行的（宏观角度）。</li>
</ol>
<blockquote>
<p>3.并行</p>
</blockquote>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20211229231623804.png" alt="image-20211229231623804"></p>
<ol>
<li>Parallelism，即并行，指两个或两个以上事件（或线程）在同一时刻发生，是<code>真正意义上的不同事件或线程在同一时刻，在不同CPU资源上（多核），同时执行</code>。</li>
<li>并行，不存在像并发那样竞争，等待的概念。</li>
<li>图中，A，B，C都在同时运行（微观，宏观）。</li>
</ol>
<blockquote>
<p>4通过多线程实现并发、并行</p>
</blockquote>
<ul>
<li>java中的Thread类定义了多线程，通过多线程可以实现并发或并行。</li>
<li>在CPU比较繁忙，资源不足的时候（开启了很多进程），操作系统只为一个含有多线程的进程分配仅有的CPU资源，这些线程就会为自己尽量多抢时间片，这就是通过多线程实现并发，线程之间会竞争CPU资源争取执行机会。</li>
<li>在CPU资源比较充足的时候，一个进程内的多线程，可以被分配到不同的CPU资源，这就是通过多线程实现并行。</li>
</ul>
<h3 id="1-6-管程"><a href="#1-6-管程" class="headerlink" title="1.6 管程"></a>1.6 管程</h3><p><code>管程(monitor)</code>是保证了同一时刻只有一个进程在管程内活动,即管程内定义的操作<code>在同一时刻只被一个进程调用</code>(由编译器实现).但是这样并不能保证进程以设计的顺序执行。</p>
<p>JVM 中同步是基于进入和退出管程(monitor)对象实现的，每个对象都会有一个管程 (monitor)对象，管程(monitor)会随着 java 对象一同创建和销毁</p>
<p>执行线程首先要持有管程对象，然后才能执行方法，当方法完成之后会释放管程，方法在执行时候会持有管程，其他线程无法再获取同一个管程</p>
<h3 id="1-7-用户线程和守护线程"><a href="#1-7-用户线程和守护线程" class="headerlink" title="1.7 用户线程和守护线程"></a>1.7 用户线程和守护线程</h3><ul>
<li><code>用户线程(User Thread)</code>:平时用到的普通线程,自定义线程 </li>
<li><code>守护线程(Daemon Thread)</code>:运行在后台,是一种特殊的线程,比如垃圾回收 </li>
</ul>
<p>当主线程结束后,用户线程还在运行,JVM 存活 </p>
<p>如果没有用户线程,都是守护线程,JVM 结束</p>
<p>守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。用户可以用Thread的<code>setDaemon（true）</code>方法设置当前线程为守护线程。</p>
<h2 id="2-Lock接口"><a href="#2-Lock接口" class="headerlink" title="2.Lock接口"></a>2.Lock接口</h2><h3 id="2-1-Synchronized"><a href="#2-1-Synchronized" class="headerlink" title="2.1 Synchronized"></a>2.1 Synchronized</h3><blockquote>
<p>1.Synchronized 关键字回顾</p>
</blockquote>
<p>synchronized 是 Java 中的关键字，是一种同步锁。它修饰的对象有以下几种：</p>
<ol>
<li><p>修饰一个代码块，被修饰的代码块称为<code>同步语句块</code>，其作用的范围是大括号{} 括起来的代码，作用的对象是调用这个代码块的对象；</p>
</li>
<li><p>修饰一个方法，被修饰的方法称为<code>同步方法</code>，其作用的范围是整个方法，作用 的对象是调用这个方法的对象；</p>
<ul>
<li>​        虽然可以使用 synchronized 来定义方法，但 synchronized 并不属于方法定义的一部分，因此，<code>synchronized 关键字不能被继承</code>。如果在父类中的某个方 法使用了 synchronized 关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上 synchronized 关键字才可以。当然，还可以在子类方法中调用父类中相应的方 法，这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此， 子类的方法也就相当于同步了。</li>
</ul>
</li>
<li><p>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</p>
</li>
<li><p>修改一个类，其作用的范围是 synchronized 后面括号括起来的部分，作用主要的对象是这个类的所有对象。</p>
</li>
</ol>
<blockquote>
<p>2.售票案例</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Ticket</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> " <span class="token operator">:</span> 
<span class="token string">"+(number--)+"</span> "<span class="token operator">+</span>number<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果一个代码块被 synchronized 修饰了，<code>当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待</code>，等待获取锁的线程释放锁，而这里 获取锁的线程释放锁只会有两种情况：</p>
<ul>
<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有； </li>
<li>线程执行发生异常，此时 JVM 会让线程自动释放锁</li>
</ul>
<p>那么如果这个获取锁的线程由于要等待 IO 或者其他原因（比如调用 sleep 方法）被<code>阻塞</code>了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一 下，这多么影响程序执行效率。</p>
<p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等 待一定的时间或者能够响应中断），通过 Lock 就可以办到。</p>
<h3 id="2-2-什么是-Lock"><a href="#2-2-什么是-Lock" class="headerlink" title="2.2 什么是 Lock"></a>2.2 什么是 Lock</h3><p>Lock 锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对 象。Lock 提供了比 synchronized 更多的功能。</p>
<blockquote>
<p>1.Lock 与的 Synchronized 区别</p>
</blockquote>
<ul>
<li>Lock 不是 Java 语言内置的，synchronized 是 Java 语言的关键字，因此是内置特性。Lock 是一个类，通过这个类可以实现同步访问；</li>
<li> Lock 和 synchronized 有一点非常大的不同，采用 <code>synchronized 不需要用户去手动释放锁</code>，当 synchronized 方法或者 synchronized 代码块执行完之后， 系统会自动让线程释放对锁的占用；而 <code>Lock 则必须要用户去手动释放锁</code>，如 果没有主动释放锁，就有可能导致出现死锁现象。</li>
</ul>
<blockquote>
<p>2.Lock 接口</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>3.lock方法</p>
</blockquote>
<p><code>lock()</code>方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他 线程获取，则进行等待。</p>
<p>采用 Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一 般来说，<code>使用 Lock 必须在 try{}catch{}块中进行</code>，并且将<code>释放锁的操作放在 finally 块中进行</code>，以保证锁一定被被释放，防止死锁的发生。通常使用 Lock 来进行同步的话，是以下面这种形式去使用的：</p>
<pre class=" language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取锁</span>
lock<span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//处理任务</span>
<span class="token punctuation">}</span><span class="token function">catcg</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//释放锁</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>3.newCondition</p>
</blockquote>
<p>关键字 synchronized 与 <code>wait()/notify()</code>这两个方法一起使用可以实现等待/通知模式， Lock 锁的 newContition()方法返回 Condition 对象，Condition 类 也可以实现等待/通知模式。</p>
<p>用 <code>notify()通知时，JVM 会随机唤醒某个等待的线程</code>， 使用 <code>Condition 类可以进行选择性通知</code>， Condition 比较常用的两个方法：</p>
<ul>
<li><code> await()会使当前线程等待,同时会释放锁</code>,当其他线程调用 signal()时,线程会重 新获得锁并继续执行。</li>
<li> <code>signal()用于唤醒一个等待的线程</code>。</li>
</ul>
<p><font>注意</font>：在调用 Condition 的 <code>await()/signal()</code>方法前，也需要线程持有相关 的 Lock 锁，调用 await()后线程会释放这个锁，在 singal()调用后会从当前 Condition 对象的等待队列中，唤醒 一个线程，唤醒的线程尝试获得锁， 一旦 获得锁成功就继续执行。</p>
<h3 id="2-3-ReentrantLock"><a href="#2-3-ReentrantLock" class="headerlink" title="2.3 ReentrantLock"></a>2.3 ReentrantLock</h3><blockquote>
<p>1.什么是ReentrantLock</p>
</blockquote>
<p>ReentrantLock<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%85%A5%E9%94%81">重入锁</a>，是实现Lock接口的一个类，也是在实际编程中使用频率很高的一个锁，<strong>支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞</strong>。</p>
<p><code>什么是 “可重入”，可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁</code></p>
<p><code>synchronized</code>隐式支持重入性,通过获取自增，释放自减的方式实现重入.</p>
<p>ReentrantLock还支持<code>公平锁和非公平锁</code>两种方式</p>
<p>使用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// ignored</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>重入性的实现原理</p>
</blockquote>
<p>要想支持重入性，就要解决两个问题：<strong>1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。</strong></p>
<blockquote>
<p>公平锁和非公平锁</p>
</blockquote>
<p><strong>公平锁</strong>和<strong>非公平锁</strong>。<strong>何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO</strong></p>
<h3 id="2-4-ReadWriteLock"><a href="#2-4-ReadWriteLock" class="headerlink" title="2.4 ReadWriteLock"></a>2.4 ReadWriteLock</h3><p>ReadWriteLock管理一组锁，一个是只读的锁，一个是写锁。<code>读锁可以在没有写锁的时候被多个线程同时持有，写锁是独占的</code>。<br>所有读写锁的实现必须确保写操作对读操作的内存影响。换句话说，一个获得了读锁的线程必须能看到前一个释放的写锁所更新的内容。<br>读写锁比互斥锁允许对于共享数据更大程度的并发。每次只能有一个写线程，但是同时可以有多个线程并发地读数据。ReadWriteLock适用于读多写少的并发情况。</p>
<ol>
<li>线程进入读锁的前提条件：</li>
</ol>
<ul>
<li>没有其他线程的写锁 </li>
<li>没有写请求, 或者==有写请求，但调用线程和持有锁的线程是同一个(可重入锁)。</li>
</ul>
<ol>
<li>线程进入写锁的前提条件：</li>
</ol>
<ul>
<li>没有其他线程的读锁 </li>
<li>没有其他线程的写锁</li>
</ul>
<p>ReadWriteLock 也是一个接口，在它里面只定义了两个方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadWriteLock</span><span class="token punctuation">{</span>
    Lock <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Lock <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>readLock()用来获取读锁</code>，<code>writeLock()用来获取写锁</code>。也就是说将文件的读写操作分开，分 成 2 个锁来分配给线程，从而使得多个线程可以同时进行读操作。下</p>
<p>面的 ReentrantReadWriteLock 实现了 ReadWriteLock 接口。</p>
<p>ReentrantReadWriteLock 里面提供了很多丰富的方法，不过最主要的有两个 方法：readLock()和 writeLock()用来获取读锁和写锁。</p>
<p><strong>case 1:假如有多个线程要同时进行读操作的话，先看一下 synchronized 达到的效果</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">final</span> Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">}</span> 
 
 <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在进行读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读操作完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>case 2:改成用读写锁的话</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span> ReentrantReadWriteLock rwl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">final</span> Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token punctuation">}</span> 

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
     <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">while</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在进行读操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读操作完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
             rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><font>注意<br></font></p>
<ul>
<li>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。 </li>
<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</li>
</ul>
<h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>Lock 和 synchronized 有以下几点不同：</p>
<ul>
<li><p><code>Lock 是一个接口</code>，而 s<code>ynchronized是Java 中的关键字</code>，synchronized 是内置的语言实现； </p>
</li>
<li><p>synchronized 在发生异常时，会<code>自动释放线程占有的锁，因此不会导致死锁现象发生</code>；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁； </p>
</li>
<li><p>Lock 可以让<code>等待锁的线程响应中断</code>，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断； </p>
</li>
<li><p>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。 </p>
</li>
<li><p>Lock 可以<code>提高多个线程进行读操作的效率</code>。 在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时 Lock 的性能要远远优于 synchronized。</p>
</li>
</ul>
<h2 id="3-线程间通信"><a href="#3-线程间通信" class="headerlink" title="3.线程间通信"></a>3.线程间通信</h2><p>线程间通信的模型有两种：<code>共享内存</code>和<code>消息传递</code>，以下方式都是基本这两种模型来实现的。</p>
<p>通过一道面试常见的题目来分析：</p>
<p><strong>题目：有两个线程A、B， A线程向一个集合里面依次添加元素”abc”字符串，一共添加十次，当添加到第五次的时候，希望B线程能够收到A线程的通知，然后B线程执行相关的业务操作</strong>。</p>
<h3 id="方式一：使用-volatile-关键字"><a href="#方式一：使用-volatile-关键字" class="headerlink" title="方式一：使用 volatile 关键字"></a>方式一：使用 <em>volatile</em> 关键字</h3><p>基于<code>volatile</code> 关键字来实现线程间相互通信是使用共享内存的思想，大致意思就是多个线程同时监听一个变量，当这个变量发生变化的时候 ，线程能够感知并执行相应的业务。这也是最简单的一种实现方式</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSync</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 定义一个共享变量来实现通信，它需要是volatile修饰，否则线程不能及时感知</span>
    <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> notice <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程A</span>
        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程A向list中添加一个元素，此时list中的元素个数为："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    notice <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程B</span>
        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>notice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B收到通知，开始执行自己的业务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//　需要先启动线程B</span>
        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 再启动线程A</span>
        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="方式二：使用Object类的wait-和-notify-方法"><a href="#方式二：使用Object类的wait-和-notify-方法" class="headerlink" title="方式二：使用Object类的wait() 和 notify() 方法"></a>方式二：使用Object类的wait() 和 notify() 方法</h3><p>众所周知，<em>Object</em>类提供了线程间通信的方法：*wait()<em>、</em>notify()<em>、</em>notifyaAl()*，它们是<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>通信的基础，而这种实现方式的思想自然是线程间通信。</p>
<p><strong>注意</strong>： wait和 notify必须配合synchronized使用;</p>
<p>定制化通信：</p>
<p><a href="https://blog.csdn.net/myjess/article/details/119032059?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164102254316780269867983%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164102254316780269867983&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119032059.pc_search_all_es&amp;utm_term=%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%AE%9A%E5%88%B6%E5%8C%96%E9%80%9A%E4%BF%A1&amp;spm=1018.2226.3001.4187">点击我前往参考案例</a></p>
<h3 id="方式三：使用JUC工具类-CountDownLatch"><a href="#方式三：使用JUC工具类-CountDownLatch" class="headerlink" title="方式三：使用JUC工具类 CountDownLatch"></a>方式三：使用JUC工具类 CountDownLatch</h3><p>jdk1.5之后在<em>java.util.concurrent</em>包下提供了很多并发编程相关的工具类，简化了我们的并发编程代码的书写，<em><strong>CountDownLatch</strong></em>基于AQS框架，相当于也是维护了一个线程间共享变量state</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSync</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程A</span>
        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程A向list中添加一个元素，此时list中的元素个数为："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程B</span>
        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B收到通知，开始执行自己的业务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//　需要先启动线程B</span>

        <span class="token comment" spellcheck="true">// 再启动线程A</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="方式四：使用-ReentrantLock-结合-Condition"><a href="#方式四：使用-ReentrantLock-结合-Condition" class="headerlink" title="方式四：使用 ReentrantLock 结合 Condition"></a>方式四：使用 ReentrantLock 结合 Condition</h3><h3 id="方式五：基本LockSupport实现线程间的阻塞和唤醒"><a href="#方式五：基本LockSupport实现线程间的阻塞和唤醒" class="headerlink" title="方式五：基本LockSupport实现线程间的阻塞和唤醒"></a>方式五：基本LockSupport实现线程间的阻塞和唤醒</h3><p><em><strong>LockSupport</strong></em> 是一种非常灵活的实现线程间阻塞和唤醒的工具，使用它不用关注是等待线程先进行还是唤醒线程先运行，但是得知道线程的名字。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSync</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程B</span>
        <span class="token keyword">final</span> Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B收到通知，开始执行自己的业务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现线程A</span>
        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程A向list中添加一个元素，此时list中的元素个数为："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>
                    LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>threadB<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="4-集合的线程安全"><a href="#4-集合的线程安全" class="headerlink" title="4.集合的线程安全"></a>4.集合的线程安全</h2><h3 id="4-1-集合操作-Demo"><a href="#4-1-集合操作-Demo" class="headerlink" title="4.1 集合操作 Demo"></a>4.1 集合操作 Demo</h3><p><strong>NoSafeDemo:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotSafeDemo</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * 多个线程同时对集合进行修改
    * @param args
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>异常内容 java.util.ConcurrentModificationException</p>
<p><strong>问题: 为什么会出现并发修改异常?</strong></p>
<p>查看 ArrayList 的 add 方法源码:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Increments modCount!!</span>
    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>那么我们如何去解决 List 类型的线程安全问题?</strong></p>
<h3 id="4-2-Vector"><a href="#4-2-Vector" class="headerlink" title="4.2 Vector"></a>4.2 Vector</h3><p><code>Vector 是矢量队列</code>，它是 JDK1.0 版本添加的类。继承于 AbstractList，实现 了 List, RandomAccess, Cloneable 这些接口。 Vector 继承了 AbstractList， 实现了 List；所以，<code>它是一个队列，支持相关的添加、删除、修改、遍历</code>等功能。 Vector 实现了 RandmoAccess 接口，即<code>提供了随机访问功能</code>。 RandmoAccess 是 java 中用来被 List 实现，为 List 提供快速访问功能的。在 Vector 中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访 问。 Vector 实现了 Cloneable 接口，即实现 clone()函数。它能被克隆。</p>
<p><code>和 ArrayList 不同，Vector 中的操作是线程安全的。</code></p>
<p><strong>SafeDemo:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeDemo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span>randomUUID<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>现在没有运行出现并发异常</strong></p>
<p>查看 Vector 的 add 方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>add 方法被<code> synchronized</code> 同步修辞,线程安全!因此没有并发异常</p>
<h3 id="4-3-Collections"><a href="#4-3-Collections" class="headerlink" title="4.3 Collections"></a>4.3 Collections</h3><p>Collections 提供了方法 synchronizedList 保证 list 是同步线程安全的</p>
<p><strong>NotSafeDemo 代码修改</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotSafeDemo</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * 多个线程同时对集合进行修改
    * @param args
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//Collections</span>
        List list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>也未出现异常</strong></p>
<p>查看源码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">synchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span> <span class="token operator">?</span>
        <span class="token keyword">new</span> <span class="token class-name">SynchronizedRandomAccessList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">:</span>
        <span class="token keyword">new</span> <span class="token class-name">SynchronizedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-4-CopyOnWriteArrayList"><a href="#4-4-CopyOnWriteArrayList" class="headerlink" title="4.4* CopyOnWriteArrayList"></a>4.4* CopyOnWriteArrayList</h3><p>CopyOnWriteArrayList相当于<code>线程安全</code>的 ArrayList。和 ArrayList 一样，它是个可变数组；但是和 ArrayList 不同的时，它具有以下特性：</p>
<ul>
<li>它最适合于具有以下特征的应用程序：List 大小通常保持很小，只<code>读操作远多于可变操作</code>，需要在遍历期间防止线程间的冲突。 </li>
<li>它是<code>线程安全</code>的。 </li>
<li>因为通常需要<code>复制整个基础数组</code>，所以可变操作（add()、set() 和 remove()  等等）的开销很大。 </li>
<li>迭代器支持 hasNext(), next()等不可变操作，但不支持可变 remove()等操作。 </li>
<li>使用迭代器进行遍历的<code>速度很快</code>，并且<code>不会与其他线程发生冲突</code>。在构造迭代 器时，迭代器依赖于不变的数组快照。</li>
</ul>
<p>即：</p>
<ul>
<li>独占锁效率低：采用读写分离思想解决 </li>
<li>写线程获取到锁，其他写线程阻塞 </li>
<li>复制思想：当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容 器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素 之后，再将原容器的引用指向新的容器。</li>
</ul>
<p>​                ：这时候会抛出来一个新的问题，也就是<code>数据不一致</code>的问题。如果写线程还没来 得及写会内存，其他的线程就会读到了脏数据。</p>
<p><strong>这就是 CopyOnWriteArrayList 的思想和原理。就是拷贝一份。</strong></p>
<p><strong>NotSafeDemo 代码修改</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotSafeDemo</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * 多个线程同时对集合进行修改
    * @param args
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// CopyOnWriteArrayList</span>
        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>没有线程安全问题</p>
<p>原因分析(重点):<code>动态数组与线程安全</code></p>
<blockquote>
<p>动态数组</p>
</blockquote>
<ul>
<li><p>它内部有个<code>volatile 数组(array)</code>来保持数据。在“添加/修改/删除”数据 时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该 数组赋值给“volatile 数组”, 这就是它叫做 CopyOnWriteArrayList 的原因 </p>
</li>
<li><p>由于它在“添加/修改/删除”数据时，都会新建数组，所以涉及到修改数据的操作，CopyOnWriteArrayList 效率很低；但是单单只是进行遍历查找的话， 效率比较高。</p>
<p>即：<code>修改效率低，查找效率高。</code></p>
</li>
</ul>
<blockquote>
<p>线程安全</p>
</blockquote>
<ul>
<li>通过<code> volatile 和互斥锁</code>来实现的。 </li>
<li>通过“volatile 数组”来保存数据的。一个线程读取 volatile 数组时，总能看到其它线程对该 volatile 变量最后的写入；就这样，通过 <code>volatile 提供了“读 取到的数据总是最新的</code>”这个机制的保证。 </li>
<li>通过<code>互斥锁来保护数据</code>。在“添加/修改/删除”数据时，会先“获取互斥锁”， 再修改完毕之后，先将数据更新到“volatile 数组”中，然后再“释放互斥 锁”，就达到了保护数据的目的。</li>
</ul>
<h3 id="4-5-小结-重点"><a href="#4-5-小结-重点" class="headerlink" title="4.5 小结(重点)"></a>4.5 小结(重点)</h3><blockquote>
<p>1.线程安全与线程不安全集合</p>
</blockquote>
<p>集合类型中存在线程安全与线程不安全的两种,常见例如:</p>
<table>
<thead>
<tr>
<th>不安全</th>
<th>安全</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td>Vector</td>
</tr>
<tr>
<td>HashMap</td>
<td>HashTable</td>
</tr>
</tbody></table>
<p>但是以上都是通过<code> synchronized 关键字实现</code>,效率较低</p>
<blockquote>
<p>2.Collections 构建的线程安全集合</p>
</blockquote>
<blockquote>
<p>3.java.util.concurrent 并发包下</p>
</blockquote>
<p>CopyOnWriteArrayList、CopyOnWriteArraySet 类型,通过动态数组与线程安 全个方面保证线程安全</p>
<h2 id="5-多线程锁"><a href="#5-多线程锁" class="headerlink" title="5.多线程锁"></a>5.多线程锁</h2><p><strong>结论:</strong></p>
<ul>
<li>对于普通同步方法，锁是当前实例对象。 </li>
<li>对于静态同步方法，锁是当前类的 Class 对象。 </li>
<li>对于同步方法块，锁是 Synchonized 括号里配置的对象</li>
</ul>
<h2 id="6-Callable-amp-Future-接口"><a href="#6-Callable-amp-Future-接口" class="headerlink" title="6.Callable&amp;Future 接口"></a>6.Callable&amp;Future 接口</h2><h3 id="6-1-Callable-接口"><a href="#6-1-Callable-接口" class="headerlink" title="6.1 Callable 接口"></a>6.1 Callable 接口</h3><p>目前我们学习了有两种创建线程的方法-一种是通过<code>创建 Thread 类</code>，另一种是通过<code>使用 Runnable 创建线程</code>。但是，Runnable 缺少的一项功能是，当线程 终止时（即 run（）完成时），我们无法使线程返回结果。为了支持此功能， Java 中提供了 Callable 接口。</p>
<p><strong>创建线程的第三种方案—Callable 接口</strong></p>
<p>Callable 接口的特点:</p>
<ul>
<li>为了实现 Runnable，需要实现不返回任何内容的 run（）方法，而对于 <code>Callable，需要实现 在完成时返回结果的 call（）方法</code>。 </li>
<li>call（）方法可以引发异常，而 run（）则不能。</li>
<li>为实现 Callable 而必须重写 call 方法 </li>
<li>不能直接替换 runnable,因为 Thread 类的构造方法根本没有 Callable</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建新类MyThread1实现runnable接口</span>
<span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//创建新类MyThread2实现runnable接口</span>
<span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6-2-Future接口"><a href="#6-2-Future接口" class="headerlink" title="6.2 Future接口"></a>6.2 Future接口</h3><p>当 call（）方法完成时，结果必须存储在主线程已知的对象中，以便主线程可以知道该线程返回的结果。为此，可以使用 Future 对象。</p>
<p>将 Future 视为保存结果的对象–它可能暂时不保存结果，但将来会保存（一旦 Callable 返回）。Future 基本上是主线程可以跟踪进度以及其他线程的结果的 一种方式。要实现此接口，必须重写 5 种方法，这里列出了重要的方法,如下:</p>
<ul>
<li><p>• public<code> boolean cancel（boolean mayInterrupt）</code>：用于停止任务。 </p>
<p>如果尚未启动，它将停止任务。如果已启动，则仅在 mayInterrupt 为 true 时才会中断任务。</p>
</li>
<li><p>• public <code>Object get()</code>抛出 InterruptedException，ExecutionException：用于获取任务的结果。 </p>
<p>如果任务完成，它将立即返回结果，否则将等待任务完成，然后返回结果。</p>
</li>
<li><p>• public <code>boolean isDone()</code>：如果任务完成，则返回 true，否则返回 false </p>
<p>可以看到 Callable 和 Future 做两件事-Callable 与 Runnable 类似，因为它封 装了要在另一个线程上运行的任务，而 Future 用于存储从另一个线程获得的结 果。实际上，future 也可以与 Runnable 一起使用。 要创建线程，需要 Runnable。为了获得结果，需要 future。</p>
</li>
</ul>
<h3 id="6-3-FutureTask"><a href="#6-3-FutureTask" class="headerlink" title="6.3 FutureTask"></a>6.3 FutureTask</h3><p>Java 库具有具体的 FutureTask 类型，该类型实现 Runnable 和 Future，并方便地将两种功能组合在一起。 可以通过为其构造函数提供 Callable 来创建 FutureTask。然后，<code>将 FutureTask 对象提供给 Thread 的构造函数以创建 Thread 对象</code>。因此，间接地使用 Callable 创建线程。</p>
<p><strong>核心原理:(重点)</strong></p>
<p>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给 Future 对象在后台完成</p>
<p>当主线程将来需要时，就可以通过 Future 对象获得后台作业的计算结果或者执行状态 </p>
<ul>
<li> 一般 <code>FutureTask 多用于耗时的计算</code>，主线程可以在完成自己的任务后，再去 获取结果。 </li>
<li> 仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞 get 方法 </li>
<li> 一旦计算完成，就不能再重新开始或取消计算 </li>
<li> get 方法获取结果只有在<code>计算完成时获取</code>，否则会一直阻塞直到任务转入完 成状态，然后会返回结果或者抛出异常 </li>
<li> get 只计算一次,因此 get 方法放到最后</li>
</ul>
<h3 id="6-4-使用-Callable-和-Future"><a href="#6-4-使用-Callable-和-Future" class="headerlink" title="6.4 使用 Callable 和 Future"></a>6.4 使用 Callable 和 Future</h3><p><strong>CallableDemo 案例</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo</span> <span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">/**
     * 实现 runnable 接口
     */</span>
     <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">/**
         * run 方法
         */</span>
         <span class="token annotation punctuation">@Override</span>
         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">try</span> <span class="token punctuation">{</span>
                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程进入了 run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 实现 callable 接口
 */</span>
 <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">/**
     * call 方法
     * @return
     * @throws Exception
     */</span>
     <span class="token annotation punctuation">@Override</span>
     <span class="token keyword">public</span> Long <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
         <span class="token keyword">try</span> <span class="token punctuation">{</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程进入了 call方法,开始准备睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"睡醒了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
             <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//声明 runable</span>
 Runnable runable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
 <span class="token comment" spellcheck="true">//声明 callable</span>
 Callable callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">//future-callable</span>
 FutureTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> futureTask2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">//线程二</span>
 <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask2<span class="token punctuation">,</span> <span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     Long result1 <span class="token operator">=</span> futureTask2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//线程一</span>
 <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runable<span class="token punctuation">,</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6-5-小结-重点"><a href="#6-5-小结-重点" class="headerlink" title="6.5 小结(重点)"></a>6.5 小结(重点)</h3><p>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些 作业交给 Future 对象在后台完成, 当主线程将来需要时，就可以通过 Future 对象获得后台作业的计算结果或者执行状态</p>
<p> • 一般 FutureTask 多用于耗时的计算，主线程可以在完成自己的任务后，再去 获取结果 </p>
<p>• 仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞 get 方法。一旦计 算完成，就不能再重新开始或取消计算。get 方法而获取结果只有在计算完成 时获取，否则会一直阻塞直到任务转入完成状态，然后会返回结果或者抛出异 常。 </p>
<p>• 只计算一次</p>
<h2 id="7-JUC-三大辅助类"><a href="#7-JUC-三大辅助类" class="headerlink" title="7.JUC 三大辅助类"></a>7.JUC 三大辅助类</h2><p>JUC 中提供了三种常用的辅助类，通过这些辅助类可以很好的解决线程数量过多时 Lock 锁的频繁操作。这三种辅助类为：</p>
<ul>
<li>CountDownLatch: 减少计数 </li>
<li>CyclicBarrier: 循环栅栏 </li>
<li>Semaphore: 信号灯</li>
</ul>
<h3 id="7-1-CountDownLatch"><a href="#7-1-CountDownLatch" class="headerlink" title="7.1 CountDownLatch"></a>7.1 CountDownLatch</h3><p>CountDownLatch详解：<a href="https://blog.csdn.net/heihaozi/article/details/105738230?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164109620216780271573670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164109620216780271573670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105738230.pc_search_all_es&amp;utm_term=CountDownLatch&amp;spm=1018.2226.3001.4187">点击前往链接</a></p>
<p>CountDownLatch 类可以设置一个计数器，然后通过 countDown 方法来进行 减 1 的操作，使用 await 方法等待计数器不大于 0，然后继续执行 await 方法 之后的语句。</p>
<ul>
<li>CountDownLatch 主要有两个方法，当一个或多个线程调用 await 方法时，这 些线程会阻塞</li>
<li>其它线程调用 countDown 方法会将计数器减 1(调用 countDown 方法的线程 不会阻塞)</li>
<li>当计数器的值变为 0 时，因 await 方法阻塞的线程会被唤醒，继续执行</li>
</ul>
<pre class=" language-java"><code class="language-java">CountDownLatch latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当计数器为0时，才唤醒阻塞线程</span>

latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//阻塞三秒后唤醒</span>
</code></pre>
<p><strong>场景: 6 个同学陆续离开教室后值班同学才可以关门。</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span><span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//定义一个数值为 6 的计数器</span>
         CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment" spellcheck="true">//创建 6 个同学</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"同学 6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment" spellcheck="true">//计数器减一,不会阻塞</span>
                 countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"同学"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
         <span class="token comment" spellcheck="true">//主线程 await 休息</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//全部离开后自动唤醒主线程</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部离开了,现在的计数器为"</span> <span class="token operator">+</span> countDownLatch<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="7-2-CyclicBarrier"><a href="#7-2-CyclicBarrier" class="headerlink" title="7.2 CyclicBarrier"></a>7.2 CyclicBarrier</h3><p>CyclicBarrier详解：<a href="https://blog.csdn.net/qq_38293564/article/details/80558157?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164109801816780265442253%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164109801816780265442253&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80558157.pc_search_all_es&amp;utm_term=CyclicBarrier&amp;spm=1018.2226.3001.4187">点击前往链接</a></p>
<p>栅栏类似于闭锁，它能阻塞一组线程直到某个事件的发生。栅栏与闭锁的关键区别在于，所有的线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。</p>
<p><a href="https://so.csdn.net/so/search?q=CyclicBarrier">CyclicBarrier</a>可以使一定数量的线程反复地在栅栏位置处汇集。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达栅栏位置，那么栅栏将打开，此时所有的线程都将被释放，而栅栏将被重置以便下次使用。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUMBER <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建CyclicBarrier</span>
        CyclicBarrier cyclicBarrier <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>NUMBER<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集齐七颗龙珠就可以召唤神龙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//集齐七龙珠过程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"星龙珠已收集"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//等待</span>
                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="7-3-Semaphore"><a href="#7-3-Semaphore" class="headerlink" title="7.3 Semaphore"></a>7.3 Semaphore</h3><p>Semaphore详解：<a href="https://blog.csdn.net/heihaozi/article/details/105738267?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164112738616780255280189%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164112738616780255280189&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105738267.pc_search_all_es&amp;utm_term=Semaphore&amp;spm=1018.2226.3001.4187">点击前往链接</a></p>
<p>Semaphore 的构造方法中传入的第一个参数是最大信号量（可以看成最大线程池），每个信号量初始化为一个最多只能分发一个许可证。使用 acquire 方 法获得许可证，release 方法释放许可.</p>
<p>它通过维护<code>若干个许可证来控制线程对共享资源的访问</code>。 如果许可证剩余数量大于零时，线程则允许访问该共享资源；如果许可证剩余数量为零时，则拒绝线程访问该共享资源。 Semaphore所维护的许可证数量就是允许访问共享资源的最大线程数量。 所以，线程想要访问共享资源必须从Semaphore中获取到许可证。</p>
<p><strong>场景: 抢车位, 6 部汽车 3 个停车位</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//创建Semaphore，并设置许可数量</span>
        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">//抢占车位</span>
                        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"号车抢到了车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">//随机停车时间</span>
                        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"号离开了车位------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">//释放</span>
                        semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="8-阻塞队列"><a href="#8-阻塞队列" class="headerlink" title="8.阻塞队列"></a>8.阻塞队列</h2><h3 id="8-1-BlockingQueue-简介"><a href="#8-1-BlockingQueue-简介" class="headerlink" title="8.1 BlockingQueue 简介"></a>8.1 BlockingQueue 简介</h3><p>Concurrent 包中，BlockingQueue 很好的解决了多线程中，如何<code>高效安全“传输”数据</code>的问题。通过这些高效并且线程安全的队列类，为我们快速搭建高质量的多线程程序带来极大的便利。本文详细介绍了 BlockingQueue 家庭 中的所有成员，包括他们各自的功能以及常见使用场景。</p>
<p>阻塞队列，顾名思义，首先它是一个队列, 通过一个共享的队列，可以使得数据由队列的一端输入，从另外一端输出;</p>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220102205627260.png" alt="image-20220102205627260"></p>
<ul>
<li>当队列是空的，从队列中获取元素的操作将会被阻塞,直到其他线程往空的队列插入新的元素</li>
<li>当队列是满的，从队列中添加元素的操作将会被阻塞,直到其他线程从队列中移除一个或多 个元素或者完全清空，使队列变得空闲起来并后续新增</li>
</ul>
<p><strong>常用的队列主要有以下两种：</strong></p>
<p><code>先进先出（FIFO）</code>：先插入的队列的元素也最先出队列，类似于排队的功能。 从某种程度上来说这种队列也体现了一种公平性</p>
<p><code>后进先出（LIFO）</code>：后插入队列的元素最先出队列，这种队列优先处理最近发生的事件(栈)</p>
<p>在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起 的线程又会自动被唤起</p>
<p><strong>为什么需要 BlockingQueue？</strong></p>
<p>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切 BlockingQueue 都给你一手包办了</p>
<p>在 concurrent 包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细 节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p>
<p>多线程环境中，<code>通过队列可以很容易实现数据共享</code>，比如经典的<code>“生产者”和 “消费者”模型</code>中，通过队列可以很便利地实现两者之间的数据共享。假设我 们有若干生产者线程，另外又有若干个消费者线程。如果生产者线程需要把准 备好的数据共享给消费者线程，利用队列的方式来传递数据，就可以很方便地 解决他们之间的数据共享问题。但如果生产者和消费者在某个时间段内，万一 发生数据处理速度不匹配的情况呢？理想情况下，如果生产者产出数据的速度 大于消费者消费的速度，并且当生产出来的数据累积到一定程度的时候，那么生产者必须暂停等待一下（阻塞生产者线程），以便等待消费者线程把累积的 数据处理完毕，反之亦然。</p>
<ul>
<li>当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起）， 直到有数据放入队列</li>
<li>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起）， 直到队列中有空的位置，线程被自动唤醒</li>
</ul>
<h3 id="8-2-BlockingQueue-核心方法"><a href="#8-2-BlockingQueue-核心方法" class="headerlink" title="8.2 BlockingQueue 核心方法"></a>8.2 BlockingQueue 核心方法</h3><p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220102210826101.png" alt="image-20220102210826101"></p>
<p><strong>1.放入数据</strong></p>
<ul>
<li><code>offer(anObject)</code>:表示如果可能的话,将 anObject 加到 BlockingQueue 里,即 如果 BlockingQueue 可以容纳,则返回 true,否则返回 false.（本方法不阻塞当前执行方法的线程）</li>
<li><code>offer(E o, long timeout, TimeUnit unit)</code>：可以设定等待的时间，如果在指定 的时间内，还不能往队列中加入 BlockingQueue，则返回失败</li>
<li><code>put(anObject)</code>:把 anObject 加到 BlockingQueue 里,如果 BlockQueue 没有 空间,则调用此方法的线程被阻断直到 BlockingQueue 里面有空间再继续.</li>
</ul>
<p><strong>2.获取数据</strong></p>
<ul>
<li><code> poll(time)</code>: 取走 BlockingQueue 里排在首位的对象,若不能立即取出,则可以等 time 参数规定的时间,取不到时返回 null</li>
<li><code>poll(long timeout, TimeUnit unit)</code>：从 BlockingQueue 取出一个队首的对象， 如果在指定时间内，队列一旦有数据可取，则立即返回队列中的数据。否则知 道时间超时还没有数据可取，返回失败。</li>
<li><code>take()</code>: 取走 BlockingQueue 里排在首位的对象,若 BlockingQueue 为空,阻断 进入等待状态直到 BlockingQueue 有新的数据被加入</li>
<li><code>drainTo()</code>: 一次性从 BlockingQueue 获取所有可用的数据对象（还可以指定 获取数据的个数），通过该方法，可以提升获取数据效率；不需要多次分批加 锁或释放锁。</li>
</ul>
<h3 id="8-3-入门案例"><a href="#8-3-入门案例" class="headerlink" title="8.3 入门案例"></a>8.3 入门案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// List list = new ArrayList();</span>
        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//第一组</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.add("a"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.add("b"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.add("c"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.add("x")); </span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.remove());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.remove());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.remove());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.remove());</span>
        
        <span class="token comment" spellcheck="true">// 第二组</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.offer("a"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.offer("b"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.offer("c"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.offer("x"));</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.poll());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.poll());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.poll());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.poll());</span>
        
        <span class="token comment" spellcheck="true">// 第三组</span>
        <span class="token comment" spellcheck="true">// blockingQueue.put("a");</span>
        <span class="token comment" spellcheck="true">// blockingQueue.put("b");</span>
        <span class="token comment" spellcheck="true">// blockingQueue.put("c");</span>
        <span class="token comment" spellcheck="true">// //blockingQueue.put("x");</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.take());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.take());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.take());</span>
        <span class="token comment" spellcheck="true">// System.out.println(blockingQueue.take());</span>
        
        <span class="token comment" spellcheck="true">// 第四组</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>3L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="8-4-常见的-BlockingQueue"><a href="#8-4-常见的-BlockingQueue" class="headerlink" title="8.4 常见的 BlockingQueue"></a>8.4 常见的 BlockingQueue</h3><h4 id="8-4-1-ArrayBlockingQueue-常用"><a href="#8-4-1-ArrayBlockingQueue-常用" class="headerlink" title="8.4.1 ArrayBlockingQueue(常用)"></a>8.4.1 ArrayBlockingQueue(常用)</h4><p><code>基于数组的阻塞队列实现</code>，在 ArrayBlockingQueue 内部，维护了一个<code>定长数组</code>，以便缓存队列中的数据对象，这是一个常用的阻塞队列，除了一个定长数组外，ArrayBlockingQueue 内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。</p>
<p>ArrayBlockingQueue 在生产者放入数据和消费者获取数据，都是<code>共用同一个锁对象</code>，由此也意味着两者<code>无法真正并行运行</code>，这点尤其不同于 LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue 完全可 以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea 之 所以没这样去做，也许是因为 ArrayBlockingQueue 的数据写入和获取操作已 经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其 在性能上完全占不到任何便宜。 ArrayBlockingQueue 和 LinkedBlockingQueue 间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的 Node 对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于 GC 的影响还是存在一定的区别。而在创建 ArrayBlockingQueue 时，我们还可以控制对象的内部锁是否采用公平锁，<code>默认采用非公平锁</code>。</p>
<p>一句话总结: <code>由数组结构组成的有界阻塞队列。</code></p>
<h4 id="8-4-2-LinkedBlockingQueue-常用"><a href="#8-4-2-LinkedBlockingQueue-常用" class="headerlink" title="8.4.2 LinkedBlockingQueue(常用)"></a>8.4.2 LinkedBlockingQueue(常用)</h4><p><code>基于链表的阻塞队列</code>，同 ArrayListBlockingQueue 类似，其内部也维持着一 个<code>数据缓冲队列</code>（该队列由一个链表构成），当生产者往队列中放入一个数据 时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回； 只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue 可以通过 构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份 数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。 而 LinkedBlockingQueue 之所以能够高效的处理并发数据，还因为其对于生 产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发 的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列 的并发性能。</p>
<p>ArrayBlockingQueue 和 LinkedBlockingQueue 是两个最普通也是最常用 的阻塞队列，一般情况下，在处理多线程间的生产者消费者问题，使用这两个类足以。</p>
<p>一句话总结: <code>由链表结构组成的有界（但大小默认值为 integer.MAX_VALUE）阻塞队列</code>。</p>
<h4 id="8-4-3-DelayQueue"><a href="#8-4-3-DelayQueue" class="headerlink" title="8.4.3 DelayQueue"></a>8.4.3 DelayQueue</h4><p>DelayQueue 中的元素只有当其指定的<code>延迟时间</code>到了，才能够从队列中获取到 该元素。DelayQueue 是一个没有大小限制的队列，因此往队列中插入数据的 操作<code>（生产者）永远不会被阻塞</code>，而只有获取数据的操作（消费者）才会被阻塞。</p>
<p>一句话总结: <code>使用优先级队列实现的延迟无界阻塞队列</code>。</p>
<h4 id="8-4-4-PriorityBlockingQueue"><a href="#8-4-4-PriorityBlockingQueue" class="headerlink" title="8.4.4 PriorityBlockingQueue"></a>8.4.4 PriorityBlockingQueue</h4><p><code>基于优先级的阻塞队列</code>（优先级的判断通过构造函数传入的 Compator 对象来 决定），但需要注意的是 PriorityBlockingQueue 并不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。</p>
<p>因此使用的时候要特别注意，<code>生产者生产数据的速度绝对不能快于消费者消费数据的速度</code>，否则时间一长，会最终耗尽所有的可用堆内存空间。</p>
<p>在实现 PriorityBlockingQueue 时，内部控制线程同步的锁采用的是<code>公平锁</code>。</p>
<p>一句话总结: <code>支持优先级排序的无界阻塞队列</code>。</p>
<h4 id="8-4-5-SynchronousQueue"><a href="#8-4-5-SynchronousQueue" class="headerlink" title="8.4.5 SynchronousQueue"></a>8.4.5 SynchronousQueue</h4><p><code>一种无缓冲的等待队列</code>,但它的特别之处在于它内部没有容器，一个生产线程，当它生产产品（即put的时候），如果当前没有人想要消费产品(即当前没有线程执行take)，此生产线程必须阻塞，等待一个消费线程调用take操作，take操作将会唤醒该生产线程，同时消费线程会获取生产线程的产品（即数据传递），这样的一个过程称为一次配对过程(当然也可以先take后put,原理是一样的)。</p>
<p>经典的生产者-消费者模式，操作流程是这样的：</p>
<ul>
<li>有多个生产者，可以并发生产产品，把产品置入队列中，如果队列满了，生产者就会阻塞；</li>
<li>有多个消费者，并发从队列中获取产品，如果队列空了，消费者就会阻塞；</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronousQueueDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">final</span> SynchronousQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Thread putThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"put thread start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"put thread end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Thread takeThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"take thread start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"take from putThread: "</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"take thread end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        putThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        takeThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token operator">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
put thread start
take thread start
take from putThread<span class="token operator">:</span> <span class="token number">1</span>
put thread end
take thread end
</code></pre>
<p>从结果可以看出，put线程执行queue.put(1) 后就被阻塞了，只有take线程进行了消费，put线程才可以返回。可以认为这是一种线程与线程间一对一传递消息的模型。</p>
<hr>

<p>声明一个 SynchronousQueue 有两种不同的方式，它们之间有着不太一样的 行为。</p>
<p><strong>公平模式和非公平模式的区别:</strong></p>
<ul>
<li>公平模式：SynchronousQueue 会<code>采用公平锁</code>，并配合一个 FIFO 队列来阻塞 多余的生产者和消费者，从而体系整体的公平策略；</li>
<li>非公平模式（SynchronousQueue 默认）：SynchronousQueue <code>采用非公平锁</code>，同时配合一个 LIFO 队列来管理多余的生产者和消费者，而后一种模式， 如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有 某些生产者或者是消费者的数据永远都得不到处理。</li>
</ul>
<p>一句话总结: <code>不存储元素的阻塞队列，也即单个元素的队列。</code></p>
<h4 id="8-4-6-LinkedTransferQueue"><a href="#8-4-6-LinkedTransferQueue" class="headerlink" title="8.4.6 LinkedTransferQueue"></a>8.4.6 LinkedTransferQueue</h4><p>LinkedTransferQueue 是一个<code>由链表结构组成的无界阻塞 TransferQueue 队列</code>。相对于其他阻塞队列，LinkedTransferQueue 多了 tryTransfer 和 transfer 方法。</p>
<p>LinkedTransferQueue 采用一种<code>预占模式</code>。意思就是消费者线程取元素时，如果队列不为空，则直接取走数据，若队列为空，那就生成一个节点（节点元素 为 null）入队，然后消费者线程被等待在这个节点上，后面生产者线程入队时 发现有一个元素为 null 的节点，生产者线程就不入队了，直接就将元素填充到 该节点，并唤醒该节点等待的线程，被唤醒的消费者线程取走元素，从调用的 方法返回。</p>
<p>一句话总结:<code> 由链表组成的无界阻塞队列。</code></p>
<h4 id="8-4-7-LinkedBlockingDeque"><a href="#8-4-7-LinkedBlockingDeque" class="headerlink" title="8.4.7 LinkedBlockingDeque"></a>8.4.7 LinkedBlockingDeque</h4><p>LinkedBlockingDeque 是一个<code>由链表结构组成的双向阻塞队列</code>，即可以从队列的两端插入和移除元素。</p>
<p>对于一些指定的操作，在插入或者获取队列元素时如果队列状态不允许该操作 可能会阻塞住该线程直到队列状态变更为允许操作，这里的阻塞一般有两种情况:</p>
<ul>
<li>插入元素时: 如果当前队列已满将会进入阻塞状态，一直等到队列有空的位置时再将该元素插入，该操作可以通过设置超时参数，超时后返回 false 表示操作 失败，也可以不设置超时参数一直阻塞，中断后抛出 InterruptedException 异 常</li>
<li>读取元素时: 如果当前队列为空会阻塞住直到队列不为空然后返回元素，同样可 以通过设置超时参数</li>
</ul>
<p>一句话总结: <code>由链表组成的双向阻塞队列</code></p>
<h3 id="8-5-小结"><a href="#8-5-小结" class="headerlink" title="8.5 小结"></a>8.5 小结</h3><ul>
<li><p>在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤起</p>
</li>
<li><p>为什么需要 BlockingQueue?</p>
<p> 在 concurrent 包发布以前，在多线程环境下， 我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全， 而这会给我们的程序带来不小的复杂度。使用后我们不需要关心什么时候需要 阻塞线程，什么时候需要唤醒线程，因为这一切 BlockingQueue 都给你一手包办了</p>
</li>
</ul>
<h2 id="9-ThreadPool-线程池"><a href="#9-ThreadPool-线程池" class="headerlink" title="9. ThreadPool 线程池"></a>9. ThreadPool 线程池</h2><h3 id="9-1-线程池简介"><a href="#9-1-线程池简介" class="headerlink" title="9.1 线程池简介"></a>9.1 线程池简介</h3><p>线程池（英语：thread pool）：一种线程使用模式。线程过多会带来调度开销， 进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理 者分配可并发执行的任务。这避免了在处理短时间任务时创建与销毁线程的代价。<code>线程池不仅能够保证内核的充分利用，还能防止过分调度</code>。</p>
<p><strong>线程池的优势</strong>： 线程池做的工作只要是控制运行的线程数量，处理过程中将任 务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量， 超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p>
<p><strong>它的主要特点为：</strong></p>
<ul>
<li><code>降低资源消耗</code>: 通过重复利用已创建的线程降低线程创建和销毁造成的销耗。</li>
<li><code>提高响应速度:</code> 当任务到达时，任务可以不需要等待线程创建就能立即执行。</li>
<li><code>提高线程的可管理性</code>: 线程是稀缺资源，如果无限制的创建，不仅会销耗系统资 源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
<li>Java 中的线程池是通过 Executor 框架实现的，该框架中用到了 Executor，Executors， ExecutorService，ThreadPoolExecutor 这几个类</li>
</ul>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220102214634246.png" alt="image-20220102214634246"></p>
<h3 id="9-2-线程池参数说明"><a href="#9-2-线程池参数说明" class="headerlink" title="9.2  线程池参数说明"></a>9.2  线程池参数说明</h3><h4 id="9-2-1-常用参数-重点"><a href="#9-2-1-常用参数-重点" class="headerlink" title="9.2.1 常用参数(重点)"></a>9.2.1 常用参数(重点)</h4><ul>
<li> <code>corePoolSize</code> 线程池的核心线程数</li>
<li><code>maximumPoolSize</code> 能容纳的最大线程数</li>
<li><code>keepAliveTime</code> 空闲线程存活时间</li>
<li><code>unit</code> 存活的时间单位</li>
<li><code>workQueue</code> 存放提交但未执行任务的队列</li>
<li><code>threadFactory </code>创建线程的工厂类</li>
<li><code>handler</code> 等待队列满后的拒绝策略</li>
</ul>
<p>线程池中，有三个重要的参数，决定影响了拒绝策略：</p>
<ul>
<li>corePoolSize - 核心线程数，也即最小的线程数。</li>
<li>workQueue - 阻塞队列 。 </li>
<li>maximumPoolSize - 最大线程数</li>
</ul>
<p>当提交任务数大于 corePoolSize 的时候，会优先将任务放到 workQueue 阻 塞队列中。当阻塞队列饱和后，会扩充线程池中线程数，直到达到 maximumPoolSize 最大线程数配置。此时，再多余的任务，则会触发线程池的拒绝策略了。</p>
<p>总结起来，也就是一句话，<code>当提交的任务数大于（workQueue.size() + maximumPoolSize ），就会触发线程池的拒绝策略</code>。</p>
<h4 id="9-2-2-拒绝策略-重点"><a href="#9-2-2-拒绝策略-重点" class="headerlink" title="9.2.2 拒绝策略(重点)"></a>9.2.2 拒绝策略(重点)</h4><p><code>CallerRunsPolicy</code>: 当触发拒绝策略，只要线程池没有关闭的话，则使用调用线程直接运行任务。一般并发比较小，性能要求不高，不允许失败。但是，由 于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能效 率上必然的损失较大</p>
<p><code>AbortPolicy</code>: 丢弃任务，并抛出拒绝执行 RejectedExecutionException 异常 信息。<code>线程池默认的拒绝策略</code>。必须处理好抛出的异常，否则会打断当前的执 行流程，影响后续的任务执行。</p>
<p><code>DiscardPolicy</code>: 直接丢弃，其他啥都没有</p>
<p><code>DiscardOldestPolicy</code>: 当触发拒绝策略，只要线程池没有关闭的话，丢弃阻塞 队列 workQueue 中最老的一个任务，并将新任务加入</p>
<h3 id="9-3-线程池的种类与创建"><a href="#9-3-线程池的种类与创建" class="headerlink" title="9.3  线程池的种类与创建"></a>9.3  线程池的种类与创建</h3><h4 id="9-3-1-newCachedThreadPool-常用"><a href="#9-3-1-newCachedThreadPool-常用" class="headerlink" title="9.3.1 newCachedThreadPool(常用)"></a>9.3.1 newCachedThreadPool(常用)</h4><p><strong>作用：</strong>创建一个<code>可缓存线程池</code>，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程.</p>
<p><strong>特点:</strong></p>
<ul>
<li>线程池中数量没有固定，可达到最大值（Interger. MAX_VALUE） </li>
<li> 线程池中的线程可进行<code>缓存重复利用和回收</code>（回收默认时间为 1 分钟）</li>
<li> 当线程池中，没有可用线程，会重新创建一个线程</li>
</ul>
<p><strong>创建方式：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * corePoolSize 线程池的核心线程数
    * maximumPoolSize 能容纳的最大线程数
    * keepAliveTime 空闲线程存活时间
    * unit 存活的时间单位
    * workQueue 存放提交但未执行任务的队列
    * threadFactory 创建线程的工厂类:可以省略
    * handler 等待队列满后的拒绝策略:可以省略
    */</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>
        Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>
        60L<span class="token punctuation">,</span>
        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>场景:</strong> 适用于创建一个可无限扩大的线程池，服务器负载压力较轻，执行时间较 短，任务多的场景</p>
<h4 id="9-3-2-newFixedThreadPool-常用"><a href="#9-3-2-newFixedThreadPool-常用" class="headerlink" title="9.3.2 newFixedThreadPool(常用)"></a>9.3.2 newFixedThreadPool(常用)</h4><p><strong>作用：</strong>创建一个<code>可重用固定线程数的线程池</code>，以共享的无界队列方式来运行这 些线程。在任意点，在大多数线程会处于处理任务的活动状态。如果在所有线 程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中 等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线 程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池 中的线程将一直存在。</p>
<p><strong>特征：</strong></p>
<ul>
<li>线程池中的线程处于一定的量，可以很好的控制线程的并发量 </li>
<li>线程可以重复被使用，在显示关闭之前，都将一直存在 </li>
<li>超出一定量的线程被提交时候需在队列中等待</li>
</ul>
<p><strong>创建方式：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 固定长度线程池
* @return
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * corePoolSize 线程池的核心线程数
    * maximumPoolSize 能容纳的最大线程数
    * keepAliveTime 空闲线程存活时间
    * unit 存活的时间单位
    * workQueue 存放提交但未执行任务的队列
    * threadFactory 创建线程的工厂类:可以省略
    * handler 等待队列满后的拒绝策略:可以省略
    */</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token number">10</span><span class="token punctuation">,</span>
        0L<span class="token punctuation">,</span>
        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>场景:</strong> 适用于可以<code>预测线程数量的业务</code>中，或者服务器负载较重，对线程数有严 格限制的场景</p>
<h4 id="9-3-3-newSingleThreadExecutor-常用"><a href="#9-3-3-newSingleThreadExecutor-常用" class="headerlink" title="9.3.3 newSingleThreadExecutor(常用)"></a>9.3.3 newSingleThreadExecutor(常用)</h4><p><strong>作用：</strong>创建一个<code>使用单个 worker 线程的 Executor</code>，以无界队列方式来运行该 线程。（注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程， 那么如果需要，一个新线程将代替它执行后续的任务）。可保证顺序地执行各 个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的 newFixedThreadPool 不同，可保证无需重新配置此方法所返回的执行程序即 可使用其他的线程。</p>
<p> <strong>特征：</strong> 线程池中最多执行 1 个线程，之后提交的线程活动将会排在队列中以此执行 </p>
<p><strong>创建方式：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 单一线程池
* @return
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * corePoolSize 线程池的核心线程数
    * maximumPoolSize 能容纳的最大线程数
    * keepAliveTime 空闲线程存活时间
    * unit 存活的时间单位
    * workQueue 存放提交但未执行任务的队列
    * threadFactory 创建线程的工厂类:可以省略
    * handler 等待队列满后的拒绝策略:可以省略
    */</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token number">1</span><span class="token punctuation">,</span>
        0L<span class="token punctuation">,</span>
        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>场景:</strong> 适用于<code>需要保证顺序执行各个任务</code>，并且在任意时间点，不会同时有多个 线程的场景</p>
<h4 id="9-3-4-newScheduleThreadPool-了解"><a href="#9-3-4-newScheduleThreadPool-了解" class="headerlink" title="9.3.4 newScheduleThreadPool(了解)"></a>9.3.4 newScheduleThreadPool(了解)</h4><p><strong>作用:</strong> 线程池支持<code>定时以及周期性执行任务</code>，创建一个 corePoolSize 为传入参 数，最大线程数为整形的最大数的线程池</p>
<p><strong>特征:</strong></p>
<p>（1）线程池中具有指定数量的线程，即便是空线程也将保留 </p>
<p>（2）可定时或者 延迟执行线程活动</p>
<p><strong>创建方式:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService         <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span>intcorePoolSize<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>场景:</strong> 适用于<code>需要多个后台线程执行周期任务的场景</code></p>
<h4 id="9-3-5-newWorkStealingPool"><a href="#9-3-5-newWorkStealingPool" class="headerlink" title="9.3.5  newWorkStealingPool"></a>9.3.5  newWorkStealingPool</h4><p>jdk1.8 提供的线程池，底层使用的是 ForkJoinPool 实现，创建一个<code>拥有多个任务队列的线程池</code>，可以减少连接数，创建当前可用 cpu 核数的线程来并行执 行任务</p>
<p><strong>创建方式:</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> parallelism<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * parallelism：并行级别，通常默认为 JVM 可用的处理器个数
    * factory：用于创建 ForkJoinPool 中使用的线程。
    * handler：用于处理工作线程未处理的异常，默认为 null
    * asyncMode：用于控制 WorkQueue 的工作模式:队列---反队列
    */</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>parallelism<span class="token punctuation">,</span>
        ForkJoinPool<span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>场景:</strong> <code>适用于大耗时，可并行执行的场景</code></p>
<h3 id="9-4-线程池入门案例"><a href="#9-4-线程池入门案例" class="headerlink" title="9.4 线程池入门案例"></a>9.4 线程池入门案例</h3><p><strong>场景: 火车站 3 个售票口, 10 个用户买票</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo1</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">/**
* 火车站 3 个售票口, 10 个用户买票
* @param args
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//定时线程次:线程数量为 3---窗口数为 3</span>
        ExecutorService threadService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>
            <span class="token number">3</span><span class="token punctuation">,</span>
            60L<span class="token punctuation">,</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//10 个人买票</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threadService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"窗口,开始卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"窗口买票结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//完成后结束</span>
            threadService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="9-5-线程池底层工作原理-重要"><a href="#9-5-线程池底层工作原理-重要" class="headerlink" title="9.5  线程池底层工作原理(重要)"></a>9.5  线程池底层工作原理(重要)</h3><p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220102223311124.png" alt="image-20220102223311124"></p>
<ul>
<li>1.在创建了线程池后，线程池中的线程数为零 </li>
<li>2.当调用 execute()方法添加一个请求任务时，线程池会做出如下判断：<ul>
<li> 2.1 如 果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务； </li>
<li>2.2 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入 队列； </li>
<li>2.3 如果这个时候队列满了且正在运行的线程数量还小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务； 2.4 如 果队列满了且正在运行的线程数量大于或等于 maximumPoolSize，那么线程 池会启动饱和拒绝策略来执行。 </li>
</ul>
</li>
<li>3.当一个线程完成任务时，它会从队列中取下一个任务来执行 </li>
<li>4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断： <ul>
<li>4.1 如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。 </li>
<li>4.2  所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小</li>
</ul>
</li>
</ul>
<h3 id="9-6-注意事项-重要"><a href="#9-6-注意事项-重要" class="headerlink" title="9.6 注意事项(重要)"></a>9.6 注意事项(重要)</h3><ol>
<li><p>项目中创建多线程时，使用常见的三种线程池创建方式，单一、可变、定长都 有一定问题，原因是 FixedThreadPool 和 SingleThreadExecutor 底层都是用 LinkedBlockingQueue 实现的，这个队列最大长度为 Integer.MAX_VALUE， 容易导致 OOM。</p>
<p><code>所以实际生产一般自己通过 ThreadPoolExecutor 的 7 个参数，自定义线程池</code></p>
</li>
<li><p>创建线程池推荐适用 ThreadPoolExecutor 及其 7 个参数手动创建</p>
</li>
</ol>
<ul>
<li>corePoolSize 线程池的核心线程数 </li>
<li>maximumPoolSize 能容纳的最大线程数 </li>
<li>keepAliveTime 空闲线程存活时间 </li>
<li>o unit 存活的时间单位 </li>
<li>workQueue 存放提交但未执行任务的队列 </li>
<li>threadFactory 创建线程的工厂类</li>
<li>handler 等待队列满后的拒绝策略</li>
</ul>
<ol start="3">
<li>为什么不允许适用不允许 Executors.的方式手动创建线程池,如下图</li>
</ol>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220102223636358.png" alt="image-20220102223636358"></p>
<h2 id="10-Fork-Join"><a href="#10-Fork-Join" class="headerlink" title="10.Fork/Join"></a>10.Fork/Join</h2><p>Fork/Join详细介绍参考:<a href="https://blog.csdn.net/tyrroo/article/details/81390202?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164117634616780271515362%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164117634616780271515362&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81390202.pc_search_all_es&amp;utm_term=forkjoin&amp;spm=1018.2226.3001.4187">点击前往链接</a></p>
<h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h3><p>Fork/Join 它可以将一个大的任务拆分成多个子任务进行并行处理，最后将子 任务结果合并成最后的计算结果，并进行输出。Fork/Join 框架要完成两件事情：</p>
<ul>
<li>Fork：把一个复杂任务进行分拆，大事化小 </li>
<li>Join：把分拆任务的结果进行合并</li>
</ul>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220103104125410.png" alt="image-20220103104125410"></p>
<h3 id="10-2-入门案例"><a href="#10-2-入门案例" class="headerlink" title="10.2 入门案例"></a>10.2 入门案例</h3><p><strong>这里是一个简单的Fork/Join框架使用示例，在这个示例中我们计算了1-1001累加后的值，要求两数之间不能超过200：</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestForkJoinPool</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer MAX <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyForkJoinTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//子任务开始计算的值</span>
        <span class="token keyword">private</span> Integer startValue<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//子任务结束计算的值</span>
        <span class="token keyword">private</span> Integer endValue<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//构造函数</span>
        <span class="token keyword">public</span> <span class="token function">MyForkJoinTask</span><span class="token punctuation">(</span>Integer startValue<span class="token punctuation">,</span> Integer endValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>startValue <span class="token operator">=</span> startValue<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>endValue <span class="token operator">=</span> endValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> Integer <span class="token function">cpmpute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 如果条件成立，说明这个任务所需要计算的数值分为足够小了</span>
            <span class="token comment" spellcheck="true">// 可以正式进行累加计算了</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>endValue <span class="token operator">-</span> startValue <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始计算的部分：startValue = "</span> <span class="token operator">+</span> startValue <span class="token operator">+</span> <span class="token string">";endValue = "</span> <span class="token operator">+</span> endValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Integer totalValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startValue<span class="token punctuation">;</span>index <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endValue<span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    totalValue <span class="token operator">+=</span> index<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> totalValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//否则进行任务拆分成两个任务</span>
                MyForkJoinTask subTask1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyForkJoinTask</span><span class="token punctuation">(</span>startValue<span class="token punctuation">,</span> <span class="token punctuation">(</span>startValue <span class="token operator">+</span> endValue<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                subTask1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                MyForkJoinTask subTask2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyForkJoinTask</span><span class="token punctuation">(</span><span class="token punctuation">(</span>startValue <span class="token operator">+</span> endValue<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> endValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                subTask2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> subTask1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> subTask2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">static</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这是Fork/Join框架的线程池</span>
        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ForkJoinTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> taskFuture <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyForkJoinPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            Integer result <span class="token operator">=</span> taskFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>执行结果:</strong></p>
<pre class=" language-java"><code class="language-java">开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">126</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">251</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">252</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">376</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">377</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">501</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">502</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">626</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">627</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">751</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">752</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">876</span>
开始计算的部分：startValue <span class="token operator">=</span> <span class="token number">877</span><span class="token punctuation">;</span>endValue <span class="token operator">=</span> <span class="token number">1001</span>
result <span class="token operator">=</span> <span class="token number">501501</span>
</code></pre>
<h3 id="10-3-方法介绍"><a href="#10-3-方法介绍" class="headerlink" title="10.3 方法介绍"></a>10.3 方法介绍</h3><blockquote>
<p>ForkJoinPool构造函数</p>
</blockquote>
<p>ForkJoinPool有四个构造函数，其中参数最全的那个构造函数如下所示：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ForkJoinPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> parallelism<span class="token punctuation">,</span>
                        ForkJoinWorkerThreadFactory factory<span class="token punctuation">,</span>
                        UncaughtExceptionHandler handler<span class="token punctuation">,</span>
                        <span class="token keyword">boolean</span> asyncMode<span class="token punctuation">)</span>
</code></pre>
<ul>
<li><p><code>parallelism</code>：可并行级别，Fork/Join框架将依据这个并行级别的设定，决定框架内<code>并行执行的线程数量</code>。并行的每一个任务都会有一个线程进行处理，但是千万不要将这个属性理解成Fork/Join框架中最多存在的线程数量，也不要将这个属性和ThreadPoolExecutor线程池中的corePoolSize、maximumPoolSize属性进行比较，因为ForkJoinPool的组织结构和工作方式与后者完全不一样。而后续的讨论中，读者还可以发现Fork/Join框架中可存在的线程数量和这个参数值的关系并不是绝对的关联（有依据但并不全由它决定）。</p>
</li>
<li><p><code>factory</code>：当Fork/Join框架创建一个新的线程时，同样会用到<code>线程创建工厂</code>。只不过这个线程工厂不再需要实现ThreadFactory接口，而是需要实现ForkJoinWorkerThreadFactory接口。后者是一个函数式接口，只需要实现一个名叫newThread的方法。在Fork/Join框架中有一个默认的ForkJoinWorkerThreadFactory接口实现：DefaultForkJoinWorkerThreadFactory。</p>
</li>
<li><p><code>handler</code>：<code>异常捕获处理器</code>。当执行的任务中出现异常，并从任务中被抛出时，就会被handler捕获。</p>
</li>
<li><p><code>asyncMode</code>：这个参数也非常重要，从字面意思来看是指的异步模式，它并不是说Fork/Join框架是采用同步模式还是采用异步模式工作。Fork/Join框架中为每一个独立工作的线程准备了对应的待执行任务队列，这个任务队列是使用数组进行组合的双向队列。即是说存在于队列中的待执行任务，即可以使用先进先出的工作模式，也可以使用后进先出的工作模式。</p>
<p>当asyncMode设置为<code>ture的时候，队列采用先进先出方式工作</code>；反之则是采用后进先出的方式工作，该值默认为false</p>
</li>
</ul>
<p> ForkJoinPool还有另外两个构造函数，一个构造函数<code>只带有parallelism参数</code>，既是可以设定Fork/Join框架的最大并行任务数量；<code>另一个构造函数则不带有任何参数</code>，对于最大并行任务数量也只是一个默认值——当前操作系统可以使用的CPU内核数量。</p>
<p>如果你对Fork/Join框架没有特定的执行要求，可以直接使用不带有任何参数的构造函数。也就是说<code>推荐基于当前操作系统可以使用的CPU内核数作为Fork/Join框架内最大并行任务数量</code>，这样可以保证CPU在处理并行任务时，尽量少发生任务线程间的运行状态切换（实际上单个CPU内核上的线程间状态切换基本上无法避免，因为操作系统同时运行多个线程和多个进程）。</p>
<blockquote>
<p>fork方法和join方法</p>
</blockquote>
<p>Fork/Join框架中提供的fork方法和join方法，可以说是该框架中提供的最重要的两个方法，它们和parallelism“可并行任务数量”配合工作，可以导致拆分的子任务T1.1、T1.2甚至TX在Fork/Join框架中不同的运行效果。例如TX子任务或等待其它已存在的线程运行关联的子任务，或在运行TX的线程中“递归”执行其它任务，又或者启动一个新的线程运行子任务……</p>
<p><code>fork方法用于将新创建的子任务放入当前线程的work queue队列中</code>，Fork/Join框架将根据当前正在并发执行ForkJoinTask任务的ForkJoinWorkerThread线程状态，决定是让这个任务在队列中等待，还是创建一个新的ForkJoinWorkerThread线程运行它，又或者是唤起其它正在等待任务的ForkJoinWorkerThread线程运行它。</p>
<p>这里面有几个元素概念需要注意，ForkJoinTask任务是一种能在Fork/Join框架中运行的特定任务，也只有这种类型的任务可以在Fork/Join框架中被拆分运行和合并运行。ForkJoinWorkerThread线程是一种在Fork/Join框架中运行的特性线程，它除了具有普通线程的特性外，最主要的特点是<strong>每一个ForkJoinWorkerThread线程都具有一个独立的任务等待队列（work queue）</strong>，这个任务队列用于存储在本线程中被拆分的若干子任务。</p>
<p><img src="/../images/2021-12-29-JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220103112326526.png" alt="image-20220103112326526"></p>
<p><code>join方法用于让当前线程阻塞，直到对应的子任务完成运行并返回执行结果</code>。或者，如果这个子任务存在于当前线程的任务等待队列（work queue）中，则取出这个子任务进行“递归”执行。其目的是尽快得到当前子任务的运行结果，然后继续执行。</p>
</body></html>]]></content>
      <categories>
        <category>高并发</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>客户关系管理</title>
    <url>/2021/11/17/%E5%AE%A2%E6%88%B7%E5%85%B3%E7%B3%BB%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="客户关系管理"><a href="#客户关系管理" class="headerlink" title="客户关系管理"></a>客户关系管理</h1><h2 id="第一章-客户关系管理理念"><a href="#第一章-客户关系管理理念" class="headerlink" title="第一章 客户关系管理理念"></a>第一章 客户关系管理理念</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>潜在客户</code>是指对企业的产品或服务有需求和购买动机,有可能但还没有产生购买的人群。例如，已经怀孕的母亲很可能就是婴幼儿产品的潜在客户。</li>
<li><code>目标客户</code>是企业经过挑选后确定的力图开发为现实客户的人群。例如，劳斯莱斯就把具有很高地位的社会名流或取得巨大成就的人士作为自己的目标客户。</li>
<li><code>现实客户</code>是指已经购买了企业的产品或者服务的人群。</li>
<li><code>流失客户</code>是指曾经是企业的客户，但由于种种原因，现在不再购买企业的产品或服务的客户。</li>
<li><code>客户的终生价值</code>是指一个客户一生所能给企业带来的价值,它是以客户带来的收益减去企业为吸引、推销、维系和服务该客户所产生的成本来计算的，并且要将这个现金量折为现值。</li>
<li><code>客户关系管理</code>是建立在营销思想和信息技术基础之上的先进的管理理念与策略,是专门研究如何建立客户关系、如何维护客户关系、如何挽救客户关系的科学，它将管理的视野从企业的内部延伸、扩展到企业的外部，是企业管理理论发展的新领域。</li>
</ul>
<h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.简述客户关系管理产生的背景</p>
</blockquote>
<p>首先,客户关系管理的产生首先源于市场对客户关系管理的需求,这体现在两个方面上，一方面是客户的重要性，另一方面是客户关系的重要性。<br>其次,信息技术的迅猛发展使企业得以借助先进的技术手段去充分了解和掌握客户信息、发现与挖潜市场机会、规避风险，提高客户满意与忠诚度。<br>总之，在需求拉动、技术推动下，客户关系管理不断演变发展，逐渐形成了一套管理理论体系和应用技术体系。</p>
<blockquote>
<p>2.实施客户关系管理的意义何在?</p>
</blockquote>
<p>企业实施客户关系管理可以降低企业维系老客户和开发新客户的成本、降低企业与客户的交易成本、促进增量购买和交叉购买、给企业带来源源不断的利润,此外,好的客户关系，使客户对企业抱有好感，那么客户就会降低对产品价格或服务价格的敏感度，使企业能够获得较高的利润。<br>从某种意义上说，企业的命运是建立在与客户长远利益关系基础之上的。吸引和争取新客户、维系和保持老客户是企业生存和发展的使命。企业要想在激烈的市场竞争中保持优势，保持长久的竞争力，保证企业的稳定发展，就必须积极培养和建立客户关系，巩固和发展客户关系，并把良好的客户关系作为企业的宝贵资产和战略资源来进行有效的经营和管理。总之，客户关系管理意义重大。</p>
<blockquote>
<p>如何认识客户关系管理</p>
</blockquote>
<p>客户关系管理是建立在营销思想和信息技术基础之上的先进的的管理理念与策略，是专门研究如何建立客户关系、如何维护客户关系、如何挽救客户关系的科学，它将管理的视野从企业的内部延伸、扩展到企业的外部，是企业管理理论发展的新领域。<br>客户关系管理的目标是帮助企业拥有大量的、优质的、忠诚的客户。</p>
<blockquote>
<p>4.客户关系管理的思路是什么?</p>
</blockquote>
<p>首先，客户关系管理必须以营销思想与信息技术为两翼，为支撑;其次，企业应当主动地、有选择地建立客户关系;再次，企业应当积极地维护客户关系;最后，企业还应当及时地挽救客户关系。</p>
<h2 id="第二章-客户关系管理技术"><a href="#第二章-客户关系管理技术" class="headerlink" title="第二章 客户关系管理技术"></a>第二章 客户关系管理技术</h2><h3 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户关系管理系统</code>是以客户数据的管理为核心，利用现代信息技术、网络技术、电子商务、智能管理、系统集成等多种技术，记录企业在市场营销与销售过程中和客户发生的各种交互行为，以及各类有关活动的状态，提供各类数据模型，从而建立一个客户信息的收集、管理、分析、利用的系统，帮助企业实现以客户为中心的管理模式。</li>
<li><code>数据挖掘</code>是从大型数据库中提取人们感兴趣的知识，这些知识是隐含的、未知的、有用的信息，提取的知识表示为概念、规则、规律、模式等。</li>
<li><code>客户数据库</code>可以帮助企业了解客户过去的消费行为,而客户过去的购买行为是未来购买模式的最好指示器，因此，企业可通过客户数据库来推测客户未来的消费行为。客户数据库还能反映出每个客户的购买频率、购买量等重要信息，并保存每次交易的记录及客户的反馈情况，通过对客户进行定期跟踪，可使企业对客户的资料有详细全面的了解，利用“数据挖掘技术”和“智能分析”可以发现赢利机会,继而采取相应的营销策略，这就是<code>数据库营销</code>。</li>
<li><code>呼叫中心</code>，又称客户服务中心，起源于20世纪30年代，最初是把用户的呼叫转接到应答台或者专家处。此后，随着要转接的呼叫和应答增多，开始建立起交互式语音应答系统，这种系统能把客户部分常见问题的应答实现由机器“自动话务员”来应答和处理。</li>
<li>呼叫中心同互联网结合起来，就形成了<code>互联网呼叫中心</code>，它能够通过互联网实现语音呼叫、文本交谈、电子邮件和回呼等功能，给客户提供方便、快捷的个性化服务，增强业务代表为客户提供帮助的能力。</li>
</ul>
<h3 id="简答题-1"><a href="#简答题-1" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.客户关系管理系统的主要功能有哪些?</p>
</blockquote>
<ul>
<li>接触功能</li>
<li>业务功能</li>
<li>技术功能</li>
<li>数据库功能</li>
</ul>
<blockquote>
<p>2.数据管理技术在客户关系管理中是如何应用的?</p>
</blockquote>
<ul>
<li>首先，客户画像。</li>
<li>其次，精准营销和个性化推荐。</li>
<li>再次，客户生命周期管理。</li>
</ul>
<blockquote>
<p>3．呼叫中心技术在客户关系管理中是如何应用的?</p>
</blockquote>
<ul>
<li>首先，协调内部管理，为客户提供一站式服务;</li>
<li>其次，高科技提高企业运作效率，降低企业成本;</li>
<li>再次，个性化服务提高客户满意度，强化客户忠诚;最后，多种功能提升企业商机，优化资源配置。</li>
</ul>
<p>4.移动互联网技术在客户关系管理中是如何应用的?</p>
<ul>
<li>首先，移动互联网具有可识别性。</li>
<li>其次，移动互联网具有可定位性。</li>
<li>再次，移动互联网具有可移动性。</li>
</ul>
<h2 id="第三章-客户的选择"><a href="#第三章-客户的选择" class="headerlink" title="第三章 客户的选择"></a>第三章 客户的选择</h2><h3 id="名词解释-2"><a href="#名词解释-2" class="headerlink" title="名词解释"></a>名词解释</h3><p><code>“好客户”</code>指的是客户本身的“素质”好，能够给企业带来的利润多、价值多、贡献大，而占用企业的资源少、给企业带来的风险小的客户。</p>
<p><code>“坏客户”</code>就是:只向企业购买很少一部分产品或者服务，但要求却很多，花费了企业高额的服务费用，使企业为其消耗的成本远远超过他们给企业带来的收入;不讲信誉，给企业带来呆账、坏账、死账以及诉讼等，给企业带来负效益，让企业做不擅长或做不了的事，分散企业的注意力，使企业改变方向，与自身的战略和计划相脱离。</p>
<p>购买量大的客户被称为<code>大客户</code>。</p>
<p>购买量小的则为<code>小客户</code>。</p>
<h3 id="简答题-2"><a href="#简答题-2" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.企业为什么要选择客户?</p>
</blockquote>
<p>不是所有的购买者都会是企业的客户，也不是所有的客户都能够给企业带来收益，不加选择地建立客户关系可能造成企业定位模糊不清，相反，正确选择客户是成功开发客户、实现客户忠诚的前提，选择正确的客户还能增加企业的赢利能力。</p>
<blockquote>
<p>2.为什么大客户不等于“好客户”?</p>
</blockquote>
<p>许多大客户可能存在:财务风险大、利润风险大、管理风险大、流失风险大、竞争风险大等缺点。</p>
<blockquote>
<p>3.为什么小客户可能是“好客户”?</p>
</blockquote>
<p>有些小客户能够给企业带来较多的利润和较大的贡献，而占用企业的资源较少、给企业带来的风险也较小，所以小客户可能是“好客户”。</p>
<blockquote>
<p>4.关系客户选择的指导思想是什么?</p>
</blockquote>
<p>首先，选择与企业定位一致的客户;其次，选择“好客户”;再次，选择有潜力的客户;第四，选择“门当户对”的客户;最后，选择与“忠诚客户”具有相似特征的客户。</p>
<h2 id="第四章-客户的开发"><a href="#第四章-客户的开发" class="headerlink" title="第四章 客户的开发"></a>第四章 客户的开发</h2><h3 id="名词解释-3"><a href="#名词解释-3" class="headerlink" title="名词解释"></a>名词解释</h3><p><code>逐户访问法</code>又被称为“地毯式寻找法”，指推销人员在所选择的目标客户群的活动区域内，对目标客户进行挨家挨户的访问，然后进行说服的方法。</p>
<p><code>咨询寻找法</code>是指利用信息服务机构所提供的有偿咨询服务来寻找目标客户的方法。</p>
<p><code>猎犬法</code>又称委托助手法,指委托与目标客户有联系的人士协助寻找目标客户的方法。</p>
<p><code>中心开花</code>法是指在某一特定的目标客户群中选择有影响的人物或组织，并使其成为自己的客户，借助其帮助和协作，将该目标客户群中的其他对象转化为现实客户的方法。</p>
<h3 id="简答题-3"><a href="#简答题-3" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.什么是营销导向的客户开发策略?</p>
</blockquote>
<p>所谓营销导向的开发策略，就是企业通过有吸引力的产品策略、价格策略、分销策略和促销策略，吸引目标客户和潜在客户产生购买行动的过程。营销导向的开发策略特点是“不求人”，是由客户自己主动和自愿地被开发，还很可能是满心欢喜、感激涕零、心花怒放地被开发,所以,营销导向的开发策略是客户开发策略的最高境界,也是获得客户的理想途径。</p>
<blockquote>
<p>2．什么是推销导向的客户开发策略?</p>
</blockquote>
<p>所谓推销导向的开发策略，就是企业在自己的产品、价格、分销渠道和促销手段没有明显特色或者缺乏吸引力的情况下，通过人员推销的形式，引导或者劝说客户购买，从而将目标客户开发为现实客户的过程。推销导向的开发策略，首先要能够寻找到目标客户，其次是要想办法说服目标客户采取购买行动。</p>
<blockquote>
<p>3．寻找客户有哪些途径?说服客户的技巧有哪些?</p>
</blockquote>
<p>寻找客户有的途径有:</p>
<p>​    逐户访问法、咨询寻找法、“猎犬”法、“中心开花”法、会议寻找法、俱乐部寻找法、在亲朋故旧中寻找、资料查询法、电话寻找法、信函寻找法、短信微信寻找法、网络(博客、微博)寻找法、挖对手的客户等。</p>
<p>说服客户的技巧有：介绍到位，善于倾听，换位思考，投其所好</p>
<h2 id="第五章-客户的信息"><a href="#第五章-客户的信息" class="headerlink" title="第五章 客户的信息"></a>第五章 客户的信息</h2><h3 id="名词解释-4"><a href="#名词解释-4" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户的基本信息</code>包括企业的名称、地址、电话、创立时间、组织方式、业种、资产等。</li>
<li><code>客户特征</code>指客户的规模、服务区域、经营观念、经营方向、经营特点、企业形象、声誉等。</li>
<li><code>业务状况</code>指客户的销售能力、销售业绩、发展潜力与优势、存在的问题及未来的对策等。</li>
<li><code>交易状况</code>指客户的订单记录、交易条件、信用状况及出现过的信用问题、与客户的关系及合作态度、客户对企业及其竞争对手的产品或服务的评价、客户建议与意见等。</li>
</ul>
<h3 id="简答题-4"><a href="#简答题-4" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.客户信息的重要性体现在哪些方面?</p>
</blockquote>
<p>客户信息是企业决策的基础，是对客户进行分级管理的基础，是与客户沟通的基础，也是实现客户满意的基础，因此，企业应当重视和掌握客户的信息。</p>
<blockquote>
<p>2.对个人客户应掌握哪些信息?</p>
</blockquote>
<p>个人客户的信息应当包括:基本信息、消费情况、事业情况、家庭情况、生活情况、教育情况、个性情况、人际情况等。</p>
<blockquote>
<p>3.对企业客户应掌握哪些信息?</p>
</blockquote>
<p>企业客户的信息内容应当包括:基本信息、客户特征、业务状况、交易状况、负责人信息等。</p>
<blockquote>
<p>4.收集客户信息有哪些渠道?</p>
</blockquote>
<p>收集客户的信息只能从点点滴滴做起，可通过直接渠道和间接渠道来完成。</p>
<h2 id="第六章-客户的分级"><a href="#第六章-客户的分级" class="headerlink" title="第六章 客户的分级"></a>第六章 客户的分级</h2><h3 id="名词解释-5"><a href="#名词解释-5" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户分级</code>是企业依据客户的不同价值，将客户区分为不同的层级，然后分别对不同级别的客户进行管理与服务的过程。</li>
<li><code>客户分级管理</code>是指企业在依据客户带来价值的多少对客户进行分级的基础上,不是对所有客户平等对待，而是区别对待不同贡献的客户;同时，积极提升各级客户在客户金字塔中的级别。</li>
<li><code>关键客户</code>是企业的核心客户，一般占企业客户总数的20%，企业80%的利润靠他们贡献，是企业的重点保护对象。关键客户由重要客户和次重要客户构成。</li>
<li><code>普通客户</code>是除重要客户与次要客户之外的为企业创造最大价值的前50%的客户，一般占客户总数的30%。</li>
<li><code>小客户</code>是客户金字塔中最底层的客户，指除了上述三种客户外，剩下的后50%的客户。</li>
</ul>
<h3 id="简答题-5"><a href="#简答题-5" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.为什么要对客户进行分级?</p>
</blockquote>
<p>客户之间的价值是有差别的，企业的资源是有限的，为此，必须对客户进行分级，这样才能为企业合理分配资源提供依据，从而牢牢地抓住有价值的客户。</p>
<blockquote>
<p>2.如何对客户分级?</p>
</blockquote>
<p>我们将根据客户金字塔模型进行三层级划分,这三层是:关键客户、普通客户和小客户。</p>
<blockquote>
<p>3．如何管理各级客户?</p>
</blockquote>
<ul>
<li>关键客户管理的目标是提高关键客户的忠诚度，并且在“保持关系”的基础上，进一步提升关键客户给企业带来的价值。为此，要成立为关键客户服务的专门机构、集中优势资源服务于关键客户、通过沟通和感情交流，密切双方的关系。</li>
<li>对普通客户的管理,主要强调提升级别和控制成本两个方面——针对有升级潜力的普通客户，要努力培养其成为关键客户;针对没有升级潜力的普通客户，可减少服务、降低服务成本。</li>
<li>对小客户的管理主要是——针对有升级潜力的“小客户”，要努力培养其成为“普通客户”甚至“关键客户”;针对没有升级潜力的“小客户”，可提高服务价格、降低服务成本。</li>
</ul>
<blockquote>
<p>4.什么是客户分级管理的理想境界?</p>
</blockquote>
<p>企业针对不同级别的客户采取分级管理和差异化的激励措施,可以使关键客户自豪地享受企业提供的特殊待遇，并激励他们努力保持这种尊贵地位;同时，刺激有潜力的普通客户向关键客户看齐，鞭策有潜力的小客户向普通客户甚至关键客户看齐，坚决淘汰劣质客户。</p>
<h2 id="第七章-客户额沟通"><a href="#第七章-客户额沟通" class="headerlink" title="第七章 客户额沟通"></a>第七章 客户额沟通</h2><h3 id="名词解释-6"><a href="#名词解释-6" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>信息沟通</code>是企业把产品或服务的信息传递给客户,也包括客户将其需求或者要求的信息反映给企业。</li>
<li><code>情感沟通</code>指企业主动采取相关措施，加强与客户的情感交流，加深客户对企业的感情依恋所采取的行动。</li>
<li><code>理念沟通</code>指企业把其宗旨、理念介绍给客户，并使客户认同和接受所采取的行动。意见沟通指企业主动向客户征求意见，或者客户主动将对企业的意见(包括投诉)反映给企业的行动。</li>
</ul>
<h3 id="简答题-6"><a href="#简答题-6" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>客户沟通的作用与内容是什么？</p>
</blockquote>
<p>客户沟通是实现客户满意的基础、是维护客户关系的基础。企业通过与客户沟通，可把企业的产品或服务的信息传递给客户，把企业的宗旨、理念介绍给客户，使客户知晓企业的经营意图，还可以把有关的政策向客户传达、宣传，并主动向客户征求对企业产品或服务及其他方面的意见和建议，理解他们的期望，加强与他们的情感交流。<br>沟通的内容主要是信息沟通、情感沟通、理念沟通、意见沟通，有时还要有政策沟通。</p>
<blockquote>
<p>2.企业与客户沟通的途径有哪些?</p>
</blockquote>
<p>通过人员与客户沟通、通过活动与客户沟通、通过信函、电话、网络、电邮、微信、博客、呼叫中心等方式与客户沟通、通过广告与客户沟通、通过公共宣传及企业的自办宣传物与客户沟通、通过包装与客户沟通。</p>
<blockquote>
<p>3．客户与企业沟通的途径有哪些?</p>
</blockquote>
<p>开通免费投诉电话、24小时投诉热线或者网上投诉等、设置意见箱、建议箱、电子邮箱及微信公众号等。</p>
<blockquote>
<p>4.处理客户投诉的四步曲</p>
</blockquote>
<p>让客户发泄、记录投诉要点判断投诉是否成立、提出并实施可以令客户接受的方案、跟踪服务。</p>
<h2 id="第八章-客户的满意度"><a href="#第八章-客户的满意度" class="headerlink" title="第八章 客户的满意度"></a>第八章 客户的满意度</h2><h3 id="名词解释-7"><a href="#名词解释-7" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户满意</code>是一种心理活动，是客户的需求被满足后形成的愉悦感或状态，是客户的主观感受。当客户的感知没有达到期望时，客户就会不满、失望;当感知与期望一致时，客户是满意的;当感知超出期望时，客户就感到“物超所值”，就会很满意。</li>
<li><code>客户预期</code>是指客户在购买、消费产品或服务之前对产品或服务的价值、品质、服务、价格等方面的主观认识或预期。</li>
<li><code>客户感知价值</code>是客户在购买或者消费过程中,企业提供的产品或服务给客户的感觉价值。客户感知价值实际上就是客户的让渡价值,它等于客户购买产品或服务所获得的总价值与客户为购买该产品或服务所付出的总成本之间的差额。</li>
</ul>
<h3 id="简答题-7"><a href="#简答题-7" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.影响客户满意的因素有哪些?</p>
</blockquote>
<ul>
<li>客户预期</li>
<li>客户感知价值。</li>
</ul>
<blockquote>
<p>2.影响客户预期的因素有哪些?</p>
</blockquote>
<p>客户的价值观、需求、习惯、偏好、消费阶段;</p>
<p>客户以往的消费经历、消费经验、消费阅历;他人的介绍;</p>
<p>企业的宣传;价格、包装、有形展示的线索等。</p>
<blockquote>
<p>3．影响客户感知价值的因素有哪些?</p>
</blockquote>
<p>客户感知价值受到产品价值、服务价值、人员价值、形象价值、货币成本、时间成本、精神成本、体力成本八个因素的影响。</p>
<blockquote>
<p>4.如何让客户满意?</p>
</blockquote>
<p>首先，把握客户的预期,其次，让客户感知价值超出客户预期，就能够获得客户的满意。</p>
<h2 id="第九章-客户的忠诚"><a href="#第九章-客户的忠诚" class="headerlink" title="第九章 客户的忠诚"></a>第九章 客户的忠诚</h2><h3 id="名词解释-8"><a href="#名词解释-8" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户忠诚</code>是指客户一再重复购买,而不是偶尔重复购买同一企业的产品或者服务的行为。转换成本指的是客户从一个企业转向另一个企业需要面临多大的障碍或增加多大的成本，是客户为更换企业所需付出的各种代价的总和。</li>
<li><code>信赖忠诚</code>是指客户在完全满意的基础上,对使其从中受益的一个或几个品牌的产品或者服务情有独钟，并且长期、指向性地重复购买。</li>
<li><code>势利忠诚</code>是客户为了能够得到某个(些)好处或者害怕有某个(些)损失，而长久地重复购买某一产品或服务的行为。</li>
<li><code>惰性忠诚</code>是指客户尽管对产品或者服务不满，但是由于本身的惰性而不愿意去寻找其他供应商或者服务商。对于这种忠诚，如果其他企业主动出击，让惰性忠诚者得到更多的实惠，还是容易将他们挖走的。</li>
<li><code>垄断忠诚</code>是指在卖方占主导地位的市场条件下，或者在不开放的市场条件下，尽管客户不满却因为别无选择，找不到其他替代品，不得已，只能忠诚。</li>
</ul>
<h3 id="简答题-8"><a href="#简答题-8" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.客户忠诚的概念是什么?有哪些重要意义?</p>
</blockquote>
<p>客户忠诚是指客户一再重复购买,而不是偶尔重复购买同一企业的产品或者服务的行为。</p>
<p>客户忠诚能确保企业的长久收益、使企业收入增长并获得溢价收益、节省开发成本交易成本和服务成本、降低经营风险并提高效率、获得良好的口碑效应及客户队伍的壮大、为企业发展带来良性循环，保证了企业的可持续发展。可以这么说，忠诚客户的数量决定了企业的生存与发展，忠诚的质量，即忠诚度的高低，决定着企业竞争能力的强弱。</p>
<blockquote>
<p>2.影响客户忠诚的因素有哪些?</p>
</blockquote>
<p>一般来说，影响客户忠诚的因素有:客户满意度、客户因忠诚能够获得多少利益、客户的信任和情感、客户是否有归属感、客户的转换成本、企业与客户业务联系的紧密程度、员工对企业的忠诚度、企业对客户的忠诚度、客户自身因素等。影响客户忠诚有时是单一因素作用的结果，有些是多个因素共同作用的结果。</p>
<blockquote>
<p>3．实现客户忠诚的策略有哪些?</p>
</blockquote>
<p>努力实现客户满意、奖励客户的忠诚、增强客户的信任与感情、建立客户组织、提高客户的转换成本、加强业务联系提高不可(易)替代性、加强员工管理、以自己的忠诚换取客户的忠诚。</p>
<h2 id="第十章-客户的挽回"><a href="#第十章-客户的挽回" class="headerlink" title="第十章 客户的挽回"></a>第十章 客户的挽回</h2><h3 id="名词解释-9"><a href="#名词解释-9" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><code>客户流失</code>是指客户由于种种原因不再忠诚，而转向购买其他企业的产品或服务的现象。</li>
<li><code>客户挽回</code>是指企业通过积极的努力促使已经流失的客户回心转意、重新成为企业忠诚客户的活动。</li>
</ul>
<h3 id="简答题-9"><a href="#简答题-9" class="headerlink" title="简答题"></a>简答题</h3><blockquote>
<p>1.客户流失的原因有哪些?</p>
</blockquote>
<p>客户流失的原因除了有企业自身的原因外，还有客户本身的原因。</p>
<p>企业自身的原因包括:客户不满意及其它原因——如客户从忠诚中所获得的利益较少，客户对企业的信任和情感不够深，客户没有归属感觉得自己被轻视</p>
<p>客户本身造成的,例如——有的客户因为需求转移或消费习惯改变而退出某个市场;有的客户对企业提供的好的服务或产品的差异根本就不在乎，转向其他企业不是因为对原企业不满意，而是因为自己想换“口味”，想尝试一下新的企业的产品或者服务，或者只是想丰富自己的消费经历;有的客户由于搬迁、成长、衰退甚至破产，以及由于客户的采购主管、采购人员的离职等等而导致客户流失。</p>
<blockquote>
<p>2.如何看待客户的流失?</p>
</blockquote>
<p>客户流失给企业带来很大的负面影响、有些客户的流失是不可避免的、流失客户有被挽回的可能、挽回流失客户是重要的。</p>
<blockquote>
<p>3．如何区别对待不同级别客户的流失?</p>
</blockquote>
<ul>
<li>对“关键客户”的流失要极力挽回、</li>
<li>对“普通客户”的流失要尽力挽回、</li>
<li>对“小客户”的流失可见机行事、彻底放弃根本不值得挽留的劣质客户</li>
</ul>
<blockquote>
<p>4.怎样挽回流失客户?</p>
</blockquote>
<p>首先，找出客户流失的原因，其次，对症下药，亡羊补牢，有针对性地采取有效的挽回措施。</p>
</body></html>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CRM</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用指南</title>
    <url>/2021/10/24/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Typora使用指南"><a href="#Typora使用指南" class="headerlink" title="Typora使用指南"></a>Typora使用指南</h1><p>Markdown是一种轻量级标记语言，创始人是约翰·格鲁伯(John Gruber)。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。</p>
<span id="more"></span>

<h2 id="1-快捷键和语法"><a href="#1-快捷键和语法" class="headerlink" title="1.快捷键和语法"></a>1.快捷键和语法</h2><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键/语法</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td>Ctrl+B 或者 <code>**加粗**</code> 或者 <code>__加粗__</code></td>
<td align="left"><strong>加粗</strong></td>
</tr>
<tr>
<td>斜体</td>
<td>Ctrl+i 或者 <code>*斜体*</code> 或者 <code>_斜体_</code></td>
<td align="left"><em>斜体</em></td>
</tr>
<tr>
<td>加粗切斜体</td>
<td><code>***加粗且斜体***</code> 或者 <code>___加粗且斜体___</code></td>
<td align="left"><em><strong>加粗切斜体</strong></em></td>
</tr>
<tr>
<td>下划线</td>
<td>Ctrl+U 或者 <code>下划线</code></td>
<td align="left"><u>下划线</u></td>
</tr>
<tr>
<td>删除线</td>
<td>Alt+Shift+5 或者 <code>~~删除线~~</code></td>
<td align="left"><del>删除线</del></td>
</tr>
<tr>
<td>水平分割线</td>
<td>***<code>或者</code>- - -<code>或者</code>_ _ _</td>
<td align="left">—-</td>
</tr>
<tr>
<td>高亮</td>
<td><code>==高亮==</code></td>
<td align="left">==高亮==</td>
</tr>
<tr>
<td>下标</td>
<td><code>~下标~</code></td>
<td align="left">下标<del>2</del></td>
</tr>
<tr>
<td>上标</td>
<td><code>^上标^</code></td>
<td align="left">上标^2^</td>
</tr>
<tr>
<td>注释</td>
<td>[^注释1]</td>
<td align="left">[^注释]</td>
</tr>
<tr>
<td>代码块</td>
<td>Ctrl+Shift+` 或者 ```</td>
<td align="left">```java</td>
</tr>
<tr>
<td>选中一行</td>
<td>Ctrl+L</td>
<td align="left">/</td>
</tr>
<tr>
<td>选中一个单词</td>
<td>Ctrl+D</td>
<td align="left">/</td>
</tr>
<tr>
<td>选中相同格式的文字</td>
<td>Ctrl+E</td>
<td align="left">/</td>
</tr>
<tr>
<td>生成目录</td>
<td>[TOC]</td>
<td align="left">/</td>
</tr>
<tr>
<td>一级标题</td>
<td>Ctrl+1 或者 #+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>二级标题</td>
<td>Ctrl+2 或者 ##+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>三级标题</td>
<td>Ctrl+3 或者 ###+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>四级标题</td>
<td>Ctrl+4 或者 ####+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>五级标题</td>
<td>Ctrl+5 或者 #####+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>六级标题</td>
<td>Ctrl+6 或者 ######+空格+文字</td>
<td align="left">/</td>
</tr>
<tr>
<td>返回顶部</td>
<td>Ctrl+Home</td>
<td align="left">/</td>
</tr>
<tr>
<td>创建表格</td>
<td>Ctrl+T</td>
<td align="left">/</td>
</tr>
<tr>
<td>创建超链接</td>
<td>Ctrl+K 或者 <code>[链接名称](链接地址)</code></td>
<td align="left">百度</td>
</tr>
<tr>
<td>搜索并替换</td>
<td>Ctrl+H</td>
<td align="left">/</td>
</tr>
<tr>
<td>插入图片</td>
<td>Ctrl+Shift+I 或者 复制粘贴 或者 直接拖动 或者<code>![图片的替代文字](图片地址)</code></td>
<td align="left">/</td>
</tr>
<tr>
<td>表情</td>
<td><code>:happy:</code> 或者 <code>:smiley:</code> 或者 <code>:cry:</code></td>
<td align="left">:happy::smiley:</td>
</tr>
<tr>
<td>向右缩进</td>
<td>Tab</td>
<td align="left">/</td>
</tr>
<tr>
<td>向左缩进</td>
<td>Shift+Tab</td>
<td align="left">/</td>
</tr>
<tr>
<td>引用</td>
<td>Ctrl+Shift+Q 或者 &gt;+空格</td>
<td align="left">/</td>
</tr>
<tr>
<td>有序列表</td>
<td>Ctrl+Shift+[ 或者 *+空格</td>
<td align="left">/</td>
</tr>
<tr>
<td>无序列表</td>
<td>Ctrl+Shift+] 或者 *+空格</td>
<td align="left">/</td>
</tr>
</tbody></table>
<h2 id="2-Typora主题推荐"><a href="#2-Typora主题推荐" class="headerlink" title="2.Typora主题推荐"></a>2.Typora主题推荐</h2><blockquote>
<p><a href="https://github.com/Theigrams/My-Typora-Themes">My-Typora-Themes</a> 点击链接即可下载</p>
</blockquote>
<blockquote>
<p>样式预览</p>
</blockquote>
<p><img src="/../images/Typora%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image-20211026104218400.png" alt="image-20211026104218400"></p>
<h2 id="3-hexo常见错误"><a href="#3-hexo常见错误" class="headerlink" title="3.hexo常见错误"></a>3.hexo常见错误</h2><blockquote>
<p>超出文件限制</p>
</blockquote>
<p>错误:OpenSSL SSL_read: Connection was aborted, errno 10053</p>
<pre class=" language-linux"><code class="language-linux">git config --global http.postBuffer 524288000
</code></pre>
</body></html>]]></content>
      <tags>
        <tag>指南</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM配置文件</title>
    <url>/2021/10/25/index/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SSM框架配置文件"><a href="#SSM框架配置文件" class="headerlink" title="SSM框架配置文件"></a>SSM框架配置文件</h1><blockquote>
<p>​    当我们学习到SSM整合时。令程序员最大的烦恼就是要写一大堆配置文件，纵然记忆力再好，怕也是记不住，相信每个人都会把这些配置文件写下来，创建项目的时候直接CV就完事了。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-applicationContext-xml-spring"><a href="#1-applicationContext-xml-spring" class="headerlink" title="1.applicationContext.xml (spring)"></a>1.applicationContext.xml (spring)</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--spring 配置--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 组件扫描，主要扫描service和dao --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 排除对controller包的扫描--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 加载properties文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置SqlSessionFactory--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 加载mybatis核心文件 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--扫描mapper所在的包 为mapper创建实现类--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--声明式事务控制--></span>
    <span class="token comment" spellcheck="true">&lt;!--平台事务管理器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--配置事务增强--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--事务的aop织入--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.star.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="2-spring-mybatis-xml"><a href="#2-spring-mybatis-xml" class="headerlink" title="2.spring-mybatis.xml"></a>2.spring-mybatis.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 定义别名 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.star.domain.Account" alias="Account"/>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>
    

    <span class="token comment" spellcheck="true">&lt;!-- 加载映射 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>
       <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper resource="com/star/dao/AccountDao.xml"/>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="3-spring-mvc-xml"><a href="#3-spring-mvc-xml" class="headerlink" title="3.spring-mvc.xml"></a>3.spring-mvc.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--开启组件扫描，主要扫描controller--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 开启注解驱动 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 内部资源视图解析器 --></span>
<span class="token comment" spellcheck="true">&lt;!--    &lt;bean id="resourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        &lt;property name="prefix" value="/WEB-INF/pages/"/>
        &lt;property name="suffix" value=".jsp"/>
    &lt;/bean>--></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置Thymeleaf视图解析器 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

                        <span class="token comment" spellcheck="true">&lt;!-- 视图前缀 --></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

                        <span class="token comment" spellcheck="true">&lt;!-- 视图后缀 --></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--视图控制器view-controller--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/toAdd<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student_add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 开启静态资源访问 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="4-web-xml"><a href="#4-web-xml" class="headerlink" title="4.web.xml"></a>4.web.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--配置springMVC的编码过滤器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 处理请求方式的过滤器(PUT,DELETE) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--  加载全局初始化参数,让服务器启动就加载spring配置文件--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置监听器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 配置springMVC文件的配置和路径 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>
                classpath:spring-mvc.xml
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 将前段控制器DispatcherServlet的初始化放到服务器启动时 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="5-StudentMapper-xml"><a href="#5-StudentMapper-xml" class="headerlink" title="5.StudentMapper.xml"></a>5.StudentMapper.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAccount<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        insert into account(name, money) VALUES (#{name},#{money})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from account
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAccountById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.star.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from account where id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="6-jdbc-properties"><a href="#6-jdbc-properties" class="headerlink" title="6.jdbc.properties"></a>6.jdbc.properties</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssm?useSSL=false&amp;serverTimezone=UTC</span>
<span class="token attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">jaqen</span>
</code></pre>
<h2 id="7-log4j-properties"><a href="#7-log4j-properties" class="headerlink" title="7.log4j.properties"></a>7.log4j.properties</h2><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># Hibernate, Relational Persistence for Idiomatic Java</span>
<span class="token comment" spellcheck="true">#</span>
<span class="token comment" spellcheck="true"># License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span>
<span class="token comment" spellcheck="true"># See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html>.</span>
<span class="token comment" spellcheck="true">#</span>

<span class="token comment" spellcheck="true">### direct log messages to stdout ###</span>
<span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span>
<span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span>

<span class="token comment" spellcheck="true">### direct messages to file hibernate.log ###</span>
<span class="token comment" spellcheck="true">#log4j.appender.file=org.apache.log4j.FileAppender</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.File=hibernate.log</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.layout=org.apache.log4j.PatternLayout</span>
<span class="token comment" spellcheck="true">#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</span>

<span class="token comment" spellcheck="true">### set log levels - for more verbose logging change 'info' to 'debug' ###</span>

<span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">all, stdout</span>
</code></pre>
<h2 id="8-pom-xml"><a href="#8-pom-xml" class="headerlink" title="8.pom.xml"></a>8.pom.xml</h2><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- 日志 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!--servlet和jsp--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!--mybatis相关--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

      <span class="token comment" spellcheck="true">&lt;!-- 单元测试 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Spring5和Thymeleaf整合包 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- Resources注入 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<p><img src="https://qiniu.sukoshi.xyz/src/images/68686407_p0.jpg"></p>
</body></html>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/24/index/</url>
    <content><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>高铁售票系统</title>
    <url>/2022/02/25/null/</url>
    <content><![CDATA[<html><head></head><body></body></html>]]></content>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2022/11/26/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<html><head></head><body><h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h1><h2 id="一、Ctrl-…"><a href="#一、Ctrl-…" class="headerlink" title="一、Ctrl + …"></a>一、Ctrl + …</h2><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>删除当前行</td>
<td>Ctrl + Y</td>
</tr>
<tr>
<td>复制当前行，直接在下一行复制出当前行</td>
<td>Ctrl + D（Duplicate复制）</td>
</tr>
<tr>
<td>选中文本，连续按可以扩大选中范围（以单词为单位）</td>
<td>Ctrl + W</td>
</tr>
<tr>
<td>在当前行上面插入一行空行。注意：需要在行首使用该快捷键</td>
<td>Ctrl + Enter</td>
</tr>
<tr>
<td>删除单词，可以一下字删除整个单词</td>
<td>Ctrl + Backspace</td>
</tr>
<tr>
<td>将当前方法块代码展开 / 折叠</td>
<td>Ctrl + “ <code>+ / -</code>“</td>
</tr>
<tr>
<td>添加/取消多行注释，【第一次是添加注释，第二次是取消注释】</td>
<td>Ctrl + shift + /</td>
</tr>
<tr>
<td>在当前文件中查找文本</td>
<td>Ctrl + F</td>
</tr>
<tr>
<td>查找并替换文本，支持多行查找，或者只在代码中查找，或者只在注释中查找，或者使用正则表达式查找</td>
<td>Ctrl + R</td>
</tr>
<tr>
<td>提示代码，在输入代码时可以提示快捷键</td>
<td>Ctrl + J</td>
</tr>
<tr>
<td>显示类结构图（类的继承层次）</td>
<td>Ctrl + H（Hierarhcy层级）</td>
</tr>
<tr>
<td>快速定位到代码块<code>开始位置</code></td>
<td>Ctrl + [</td>
</tr>
<tr>
<td>快速定位到代码块<code>结束位置</code></td>
<td>Ctrl + ]</td>
</tr>
<tr>
<td>快速搜索和打开类</td>
<td>Ctrl + N</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="二、Alt-…"><a href="#二、Alt-…" class="headerlink" title="二、Alt + …"></a>二、Alt + …</h2><table>
<thead>
<tr>
<th>功能</th>
<th>快捷鍵</th>
</tr>
</thead>
<tbody><tr>
<td>快速补全代码</td>
<td>Alt + /</td>
</tr>
<tr>
<td>生成JavaDoc</td>
<td>Alt + \</td>
</tr>
<tr>
<td>快速生成含有任意形参的构造器，和私有属性的 Getter / Setter 方法等（最常使用</td>
<td>Alt + insert</td>
</tr>
<tr>
<td>快速打开或隐藏 Project 面板</td>
<td>Alt + 1</td>
</tr>
<tr>
<td>快速显示类结构，可以显示类中包含的所有属性和方法</td>
<td>Alt + 7</td>
</tr>
<tr>
<td>快速切换代码视图</td>
<td>Alt + left / right</td>
</tr>
<tr>
<td>在方法间快速移动定位（即光标以方法为单位移动)</td>
<td>Alt + Up / Down</td>
</tr>
<tr>
<td>查找类或方法在哪被使用</td>
<td>Alt + F7</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h2><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>将光标所在的代码块向上/下整体移动</td>
<td>Ctrl + Shift + 向上/下箭头</td>
</tr>
<tr>
<td>快速运行当前的程序，当前你在哪个程序就运行该程序</td>
<td>Ctrl + Shift + F10</td>
</tr>
<tr>
<td>快速整合两行代码，将光标所在行和下一行的代码合并成一行</td>
<td>Ctrl + Shift + J</td>
</tr>
<tr>
<td>查看类的继承关系图标展示（蓝色代表继承类 绿色代表实现接口）</td>
<td>Ctrl + alt+ U</td>
</tr>
<tr>
<td>大小写转换</td>
<td>Ctrl + Shift + U</td>
</tr>
<tr>
<td>抽取常量</td>
<td>Ctrl + Alt + C</td>
</tr>
<tr>
<td>重命名类、方法、属性</td>
<td>Shift+ F6</td>
</tr>
<tr>
<td>重构类、方法</td>
<td>Ctrl + F6</td>
</tr>
<tr>
<td>取消撤销</td>
<td>Ctrl + Shift + Z</td>
</tr>
<tr>
<td>全局替换</td>
<td>Ctrl + Shift + R</td>
</tr>
</tbody></table>
<h2 id="四、查看日志"><a href="#四、查看日志" class="headerlink" title="四、查看日志"></a>四、查看日志</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1.普通查看</span>
<span class="token function">cat</span> test.log

<span class="token comment" spellcheck="true">#2.搜索</span>
<span class="token function">grep</span> -C 20 <span class="token string">'code=999'</span> test.log
-C: 除了显示符合样式的那一行之外，并显示该行之前后的内容

<span class="token comment" spellcheck="true">#3.实时查看</span>
<span class="token function">tail</span> -0f test.log
</code></pre>
</body></html>]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>便捷开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL知识点</title>
    <url>/2022/11/27/Mysql%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="MySql知识点"><a href="#MySql知识点" class="headerlink" title="MySql知识点"></a>MySql知识点</h1><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-1-SQL语句"><a href="#1-1-SQL语句" class="headerlink" title="1.1 SQL语句"></a>1.1 SQL语句</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DDL(Data Definition Language) 数据定义语言</td>
<td>用来操作数据库、表、列等；常用语句：CREATE、 ALTER、DROP</td>
</tr>
<tr>
<td>DCL(Data Control Language) 数据控制语言</td>
<td>用来操作访问权限和安全级别；常用语句：GRANT、DENY</td>
</tr>
<tr>
<td>DML(Data Manipulation Language) 数据操作语言</td>
<td>用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、 DELETE</td>
</tr>
<tr>
<td>DQL(Data Query Language) 数据查询语言</td>
<td>用来查询数据；常用语句：SELECT</td>
</tr>
</tbody></table>
<h4 id="1-1-1-DDL（数据定义语言）"><a href="#1-1-1-DDL（数据定义语言）" class="headerlink" title="1.1.1 DDL（数据定义语言）"></a>1.1.1 DDL（数据定义语言）</h4><blockquote>
<p>库操作</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">-- 查看数据库列表
show databases;

-- 创建数据库
create database 数据库名称;

-- 修改数据库名
暂无法直接修改，只能通过间接方式修改

-- 删除数据库
drop database 数据库名称;

-- 修改数据库编码
alter database 数据库名称 charset=编码格式;

-- 查看当前数据库下所有数据表
show tables;
</code></pre>
<blockquote>
<p>表操作</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>school<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>student<span class="token punctuation">`</span><span class="token punctuation">(</span>
    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'匿名'</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pwd<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'123456'</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'家庭住址'</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'学生信息表'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 格式</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>数据库名<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>表名<span class="token punctuation">`</span><span class="token punctuation">(</span>
    <span class="token string">'字段名'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'字段名'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">'字段名'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span> <span class="token punctuation">[</span>索引<span class="token punctuation">]</span> <span class="token punctuation">[</span>注释<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">[</span>表的类型<span class="token punctuation">]</span><span class="token punctuation">[</span>字符集设置<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 删除表</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 表名<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 修改表名</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 旧表名 <span class="token keyword">RENAME</span> <span class="token keyword">AS</span> 新表名<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 增加表的字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 列属性<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 修改表字段属性</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> 字段名 新属性 注释<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 修改表字段名称</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧名称 新名称 属性 注释<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">-- 删除表的字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span>
</code></pre>
<h4 id="1-1-2-DML（数据操作语言）"><a href="#1-1-2-DML（数据操作语言）" class="headerlink" title="1.1.2 DML（数据操作语言）"></a>1.1.2 DML（数据操作语言）</h4><blockquote>
<p>INSERT</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">-- 普通用法
INSERT INTO `student`(`name`) VALUES ('zjt');

-- 插入多条数据
INSERT INTO `student`(`name`,`pwd`,`sex`) VALUES ('zjt','199908','男'),('gcc','000421','女');

-- 省略字段
INSERT INTO `student` VALUES (5,'Jaqen','123456','男','1999-08-05','西安','1412@qq.com',1);

-- 语法
INSERT INTO 表名([字段1,字段2..])VALUES('值1','值2'..),[('值1','值2'..)..];
</code></pre>
<blockquote>
<p>UPDATE</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">-- 修改学员名字,指定条件
UPDATE `student` SET `name`='graoves' WHERE id=1;

-- 不指定条件的情况,会改动所有表
UPDATE `student` SET `name`='graoves';

-- 修改多个属性
UPDATE `student` SET `name`='graoves',`address`='广东' WHERE id=1;

-- 通过多个条件定位数据
UPDATE `student` SET `name`='graoves' WHERE `name`='zjt' AND `pwd`='199908';

-- 语法
UPDATE 表名 SET 字段1=值1,[字段2=值2...] WHERE 条件[];
</code></pre>
<blockquote>
<p>DELETE</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">-- 删除数据
DELETE FROM `student`;

-- 删除指定数据
DELETE FROM `student` WHERE id=1;

-- 语法
DELETE FROM 表名 [WHERE 条件];
</code></pre>
<blockquote>
<p>TRUNCATE</p>
</blockquote>
<p>完全清空一个数据库表，表的结构和索引约束不会变！</p>
<p><strong>DELETE和TRUNCATE 的区别：</strong></p>
<ul>
<li>DELETE可以条件删除（where子句），而TRUNCATE只能删除整个表</li>
<li>TRUNCATE 重新设置自增列，<code>计数器会归零</code>，而DELETE不会影响自增</li>
<li>DELETE是数据操作语言（DML），操作时原数据会被放到 rollback segment中，可以被回滚；而TRUNCATE是数据定义语言（DDL)，操作时不会进行存储，<code>不能进行回滚</code>。</li>
</ul>
<h4 id="1-1-3-DQL（数据查询语言）"><a href="#1-1-3-DQL（数据查询语言）" class="headerlink" title="1.1.3 DQL（数据查询语言）"></a>1.1.3 DQL（数据查询语言）</h4><blockquote>
<p>具体内容见1.2节</p>
</blockquote>
<ul>
<li>基础查询</li>
<li>条件查询</li>
<li>分组查询</li>
<li>多表查询</li>
<li>排序和分页</li>
<li>子查询</li>
<li>函数</li>
</ul>
<h3 id="1-2-查询语句"><a href="#1-2-查询语句" class="headerlink" title="1.2 查询语句"></a>1.2 查询语句</h3><pre class=" language-mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]
{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}
FROM table_name [as table_alias]
  [left | right | inner join table_name2]  -- 联合查询
  [WHERE ...]  -- 指定结果需满足的条件
  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组
  [HAVING]  -- 过滤分组的记录必须满足的次要条件
  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序
  [LIMIT {[offset,]row_count | row_countOFFSET offset}]; -- 指定查询的记录从哪条至哪条
</code></pre>
<h4 id="1-2-1-基础查询"><a href="#1-2-1-基础查询" class="headerlink" title="1.2.1 基础查询"></a>1.2.1 基础查询</h4><pre class=" language-mysql"><code class="language-mysql">-- 语法
SELECT 查询列表 FROM 表名;

-- 查询列表可以是：表中的（一个或多个）字段，常量，变量，表达式，函数
-- 查询结果是一个虚拟的表格

-- 查询全部学生
SELECT * FROM student;

-- 查询指定的字段
SELECT pwd,name FROM student;

-- 别名 AS(可以给字段起别名,也可以给表起别名)
SELECT number AS 学号,name AS 学生姓名 FROM student AS 学生表;

-- 函数 CONCAT(str1,str2,…)
SELECT CONCAT(‘姓名=’,name) AS 新名字 FROM student;

-- 查询系统版本(函数)
SELECT VERSION();

-- 用来计算(计算表达式)
SELECT 100*53-90 AS 计算结果;

-- 查询自增步长(变量)
SELECT @@auto_increment_increment;

-- 查询有哪写同学参加了考试,重复数据要去重
SELECT DISTINCT number FROM student;
</code></pre>
<h4 id="1-2-2-条件查询"><a href="#1-2-2-条件查询" class="headerlink" title="1.2.2 条件查询"></a>1.2.2 条件查询</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>名称</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>IS NOT NULL</td>
<td>不为空</td>
<td>SELECT B FROM TABLE WHERE A IS NOT NULL</td>
</tr>
<tr>
<td>BETWEEN AND</td>
<td>两值之间</td>
<td>SELECT D FROM TABLE WHERE C BETWEEN A AND B</td>
</tr>
<tr>
<td>IS NULL</td>
<td>为空</td>
<td>SELECT B FRON TABLE WHERE A IS NULL</td>
</tr>
<tr>
<td>IN</td>
<td>属于</td>
<td>SELECT D FROM TABLE WHERE C IN (A,B)</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不属于</td>
<td>SELECT D FROM TABLE WHERE C NOT IN (A,B)</td>
</tr>
<tr>
<td>LIKE</td>
<td>模糊匹配</td>
<td>SELECT C FROM TABLE WHERE A LIKE ‘%A_’</td>
</tr>
<tr>
<td>REGEXP</td>
<td>正则表达式</td>
<td>SELECT C FROM TABLE WHERE A REGEXP B</td>
</tr>
</tbody></table>
<h4 id="1-2-3-多表查询"><a href="#1-2-3-多表查询" class="headerlink" title="1.2.3 多表查询"></a>1.2.3 多表查询</h4><ul>
<li>内连接：合并具有同一列的两个以上的表的行，<strong>结果集中不包含一个表与另一个表不匹配的行</strong></li>
<li>外连接：连个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的行，这种连接称为左（或右）外连接</strong>。没有匹配的行时，结果表中相应的列为空（null）。<ul>
<li>左外连接，则连接条件中左边的表也称为<code>主表</code>，右边的表成为<code>从表</code>。</li>
<li>右外连接，则连接条件中右边的表也称为<code>主表</code>，左边的表成为<code>从表</code>。</li>
</ul>
</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">-- join on
select table1.column, table2.column, table3.column
from table1
join table2 on table1 和 table2 的连接条件
join table3 on table2 和 table3 的连接条件

-- 内连接
select 字段列表
from A表 inner join B表
on 关联条件
where 等其他子句;

-- 左外连接(实际查询结果是A)
select 字段列表
from A表 left join B表
on 关联条件
where 等其他子句;

-- 右外连接(实际查询结果是B)
SELECT 字段列表
FROM A表 RIGHT JOIN B表
ON 关联条件
WHERE 等其他子句;
</code></pre>
<blockquote>
<p>UNION的使用</p>
</blockquote>
<p><strong>合并查询结果</strong> 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间用<code>UNION</code>或<code>UNION ALL</code>关键字分隔。</p>
<pre class=" language-mysql"><code class="language-mysql">SELECT column,... FROM table1
UNION [ALL]
SELECT column,... FROM table2
</code></pre>
<p>执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则<code>尽量使用UNION ALL语句，以提高数据查询的效率</code></p>
<blockquote>
<p>七种SQL JOIN实现</p>
</blockquote>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221127120819509.png" alt="image-20221127120819509"></p>
<pre class=" language-mysql"><code class="language-mysql">#中图：内连接 A∩B
SELECT employee_id,last_name,department_name
FROM employees e JOIN departments d
ON e.`department_id` = d.`department_id`;
#左上图：左外连接
SELECT employee_id,last_name,department_name
FROM employees e LEFT JOIN departments d
ON e.`department_id` = d.`department_id`;
#右上图：右外连接
SELECT employee_id,last_name,department_name
FROM employees e RIGHT JOIN departments d
ON e.`department_id` = d.`department_id`;
#左中图：A - A∩B
SELECT employee_id,last_name,department_name
FROM employees e LEFT JOIN departments d
ON e.`department_id` = d.`department_id`
WHERE d.`department_id` IS NULL
#右中图：B-A∩B
SELECT employee_id,last_name,department_name
FROM employees e RIGHT JOIN departments d
ON e.`department_id` = d.`department_id`
WHERE e.`department_id` IS NULL
#左下图：满外连接
# 左中图 + 右上图 A∪B
SELECT employee_id,last_name,department_name
FROM employees e LEFT JOIN departments d
ON e.`department_id` = d.`department_id`
WHERE d.`department_id` IS NULL
UNION ALL #没有去重操作，效率高
SELECT employee_id,last_name,department_name
FROM employees e RIGHT JOIN departments d
ON e.`department_id` = d.`department_id`;
#右下图
#左中图 + 右中图 A ∪B- A∩B 或者 (A - A∩B) ∪ （B - A∩B）
SELECT employee_id,last_name,department_name
FROM employees e LEFT JOIN departments d
ON e.`department_id` = d.`department_id`
WHERE d.`department_id` IS NULL
UNION ALL
SELECT employee_id,last_name,department_name
FROM employees e RIGHT JOIN departments d
ON e.`department_id` = d.`department_id`
WHERE e.`department_id` IS NULL
</code></pre>
<p>小结：</p>
<pre class=" language-mysql"><code class="language-mysql">-- 左中图
#实现A - A∩B
select 字段列表
from A表 left join B表
on 关联条件
where 从表关联字段 is null and 等其他子句;

-- 右中图
#实现B - A∩B
select 字段列表
from A表 right join B表
on 关联条件
where 从表关联字段 is null and 等其他子句;

-- 左下图
#实现查询结果是A∪B
#用左外的A，union 右外的B
select 字段列表
from A表 left join B表
on 关联条件
where 等其他子句
union
select 字段列表
from A表 right join B表
on 关联条件
where 等其他子句;

-- 右下图
#实现A∪B - A∩B 或 (A - A∩B) ∪ （B - A∩B）
#使用左外的 (A - A∩B) union 右外的（B - A∩B）
select 字段列表
from A表 left join B表
on 关联条件
where 从表关联字段 is null and 等其他子句
union
select 字段列表
from A表 right join B表
on 关联条件
where 从表关联字段 is null and 等其他子句
</code></pre>
<h4 id="1-2-4-子查询"><a href="#1-2-4-子查询" class="headerlink" title="1.2.4 子查询"></a>1.2.4 子查询</h4><ul>
<li>基本语法结构</li>
</ul>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221127121904883.png" alt="image-20221127121904883"></p>
<ul>
<li><p>子查询（内查询）在主查询之前一次执行完成。</p>
</li>
<li><p>子查询的结果被主查询（外查询）使用 。</p>
</li>
<li><p><strong>注意事项</strong></p>
<p>子查询要包含在括号内</p>
<p>将子查询放在比较条件的右侧</p>
<p>单行操作符对应单行子查询，多行操作符对应多行子查询</p>
</li>
</ul>
<blockquote>
<p>分类</p>
</blockquote>
<p>我们按内查询的结果返回一条还是多条记录，将子查询分为 <code>单行子查询 </code>、 <code>多行子查询</code> 。</p>
<p>我们按内查询是否被执行多次，将子查询划分为 <code>相关(或关联)子查询</code> 和 <code>不相关(或非关联)子查询 </code>。</p>
<ul>
<li>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做<code>不相关子查询</code>。</li>
<li>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为<code>相关子查询</code>。</li>
</ul>
<h4 id="1-2-5-函数"><a href="#1-2-5-函数" class="headerlink" title="1.2.5 函数"></a>1.2.5 函数</h4><blockquote>
<p>常用函数</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">-- 数学运算
SELECT ABS(-8); -- 绝对值
SELECT CEIL(5.1); -- 向上取整
SELECT CEILING(5.1); -- 向上取整
SELECT RAND(); -- 返回0~1之间的一个随机数
SELECT SIGN(-10); -- 返回一个数的符号;0返回0;正数返回1;负数返回-1

-- 字符串函数
SELECT CHAR_LENGTH('我喜欢你'); -- 字符串长度
SELECT CONCAT('我','喜欢','你'); -- 拼接字符串
SELECT INSERT('我喜欢',1,1,'超级') -- INSERT(str,pos,len,newstr) 从str的pos位置开始替换为长度为len的newstr
SELECT UPPER('zjt'); -- 转大写
SELECT LOWER('ZJT'); -- 转小写
SELECT INSTR('zjtj','j'); -- 返回第一次出现字串索引的位置
SELECT REPLACE('加油就能胜利','加油','坚持'); -- 替换出现的指定字符串
SELECT SUBSTR('坚持就是胜利',3,6); -- 返回指定的字符串(源字符串,截取位置,截取长度)
SELECT REVERSE('tjz'); -- 反转字符串

-- 时间日期函数
SELECT CURRENT_DATE(); -- 获取当前日期
SELECT CURDATE(); -- 获取当前日期
SELECT now(); -- 获取当前时间
SELECT LOCALTIME(); -- 本地时间
SELECT SYSDATE(); -- 系统时间

-- 年月日时分秒
SELECT YEAR(NOW());
SELECT MONTH(NOW());
SELECT DAY(NOW());
SELECT HOUR(NOW());
SELECT MINUTE(NOW());
SELECT SECOND(NOW());

select ADDTIME(time1,time2); -- 返回time1加上time2的时间。当time2为一个数字时，代表的是秒 ，可以为负数
select SUBTIME(time1,time2); -- 返回time1减去time2后的时间。当time2为一个数字时，代表的是秒 ，可以为负数
select DATEDIFF('2022-10-01 14:57:54','2022-08-01 14:57:54'); -- 返回date1 - date2的日期间隔天数
select TIMEDIFF('2022-10-01 00:00:00','2022-10-01 14:00:30'); -- 返回time1 - time2的时间间隔（时分秒）

select dayname(now());  -- 返回星期几
select weekday(now()); -- 返回周几（周一是0）
select quarter(now());  -- 返回季度（1~4）
select weekofyear(now());  -- 返回一年中的第几周
select dayofyear(now());  -- 返回一年中的第几天
select dayofmonth(now()); -- 返回所在月份的第几天 

-- 进制转换
SELECT BIN(x) -- 返回x的二进制编码
SELECT HEX(x) -- 返回x的十六进制编码
SELECT OCT(x) -- 返回x的八进制编码
SELECT CONV(x,f1,f2) -- 返回f1进制数变成f2进制数

-- 系统信息
SELECT SYSTEM_USER();
SELECT USER();
SELECT VERSION();
</code></pre>
<blockquote>
<p>聚合函数</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">AVG() -- 平均数
SUM() -- 求和
MAX() -- 最大值
MIN() -- 最小值
COUNT() -- 计数
</code></pre>
<p><strong>问题：用count(*)，count(1)，count(列名)谁好呢?</strong><br>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。<br>Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。count(*) = count(1)&gt;count(列名)</p>
<h3 id="1-3-数据类型"><a href="#1-3-数据类型" class="headerlink" title="1.3 数据类型"></a>1.3 数据类型</h3><blockquote>
<p>全部数据类型</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">类型举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数类型</td>
<td align="left">TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td>
</tr>
<tr>
<td align="center">浮点类型</td>
<td align="left">FLOAT、DOUBLE</td>
</tr>
<tr>
<td align="center">定点数类型</td>
<td align="left">DECIMAL</td>
</tr>
<tr>
<td align="center">位类型</td>
<td align="left">BIT</td>
</tr>
<tr>
<td align="center">日期时间类型</td>
<td align="left">YEAR、TIME、DATE、DATETIME、TIMESTAMP</td>
</tr>
<tr>
<td align="center">文本字符串类型</td>
<td align="left">CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td>
</tr>
<tr>
<td align="center">枚举类型</td>
<td align="left">ENUM</td>
</tr>
<tr>
<td align="center">集合类型</td>
<td align="left">SET</td>
</tr>
<tr>
<td align="center">二进制字符串类型</td>
<td align="left">BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td>
</tr>
<tr>
<td align="center">JSON类型</td>
<td align="left">JSON对象、JSON数组</td>
</tr>
<tr>
<td align="center">空间数据类型</td>
<td align="left">单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、</td>
</tr>
</tbody></table>
<blockquote>
<p>数据类型关键字</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">MYSQL关键字</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NULL</td>
<td align="center">数据列可包含NULL值</td>
</tr>
<tr>
<td align="center">NOT NULL</td>
<td align="center">数据列不允许包含NULL值</td>
</tr>
<tr>
<td align="center">DEFAULT</td>
<td align="center">默认值</td>
</tr>
<tr>
<td align="center">PRIMARY KEY</td>
<td align="center">主键</td>
</tr>
<tr>
<td align="center">AUTO_INCREMENT</td>
<td align="center">自动递增，适用于整数类型</td>
</tr>
<tr>
<td align="center">UNSIGNED</td>
<td align="center">无符号（即正数）</td>
</tr>
<tr>
<td align="center">CHARACTER SET name</td>
<td align="center">指定一个字符集</td>
</tr>
</tbody></table>
<h4 id="1-3-1-整数类型"><a href="#1-3-1-整数类型" class="headerlink" title="1.3.1 整数类型"></a>1.3.1 整数类型</h4><p>整数类型一共有 5 种，包括 <code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT（INTEGER）</code>和 <code>BIGINT</code>。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th align="center">字节数</th>
<th align="center">无符号数的取值范围</th>
<th align="center">有符号数的取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td align="center">1</td>
<td align="center">0~255</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td align="center">2</td>
<td align="center">0~65535</td>
<td align="center">-32768~32768</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td align="center">3</td>
<td align="center">0~16777215</td>
<td align="center">-8388608~8388608</td>
</tr>
<tr>
<td>INT</td>
<td align="center">4</td>
<td align="center">0~4294967295</td>
<td align="center">-2147483648~ 2147483648</td>
</tr>
<tr>
<td>BIGINT</td>
<td align="center">8</td>
<td align="center">0~18446744073709551615</td>
<td align="center">-9223372036854775808~9223372036854775808</td>
</tr>
</tbody></table>
<blockquote>
<p>可选属性</p>
</blockquote>
<ul>
<li><p><code>M</code>：表示显示宽度，M的取值范围时（0，255）。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用字符填满宽度。该项功能需要配合<code>ZEROFILL</code>使用，表示用“0”填满宽度，否则指定显示宽度无效。<strong>显示宽度与类型可以存储的值范围无关 。从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。</strong>各类型宽度默认值为：tinyint(4)、smallint(6)、mediumint(9)、int(11)、bigint(20)</p>
</li>
<li><p><code>UNSIGNED</code>:无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无</p>
<p>符号整数类型的最小取值为0。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设置为无符号类型。int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p>
</li>
<li><p><code>ZEROFILL</code>：0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指定了ZEROFILL只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可。<strong>int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义。</strong></p>
</li>
</ul>
<blockquote>
<p>适用场景</p>
</blockquote>
<ul>
<li><code>TINYINT</code> ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</li>
<li><code>SMALLINT</code> ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</li>
<li><code>MEDIUMINT</code> ：用于较大整数的计算，比如车站每日的客流量等。</li>
<li><code>INT</code> ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如一些自增ID。</li>
<li><code>BIGINT</code> ：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓，也可以用作雪花算法生成的主键ID。</li>
</ul>
<h4 id="1-3-2-浮点类型"><a href="#1-3-2-浮点类型" class="headerlink" title="1.3.2 浮点类型"></a>1.3.2 浮点类型</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节数</th>
<th align="center">区别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FLOAT</td>
<td align="center">4</td>
<td align="center">取值范围小</td>
</tr>
<tr>
<td align="center">DOUBLE</td>
<td align="center">8</td>
<td align="center">取值范围大</td>
</tr>
</tbody></table>
<blockquote>
<p>数据精度</p>
</blockquote>
<ul>
<li>MySQL允许使用<code>非标准语法</code>（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么</li>
</ul>
<p>用）： <code>FLOAT(M,D)</code> 或 <code>DOUBLE(M,D)</code> 。这里，M称为<code>精度</code>，D称为<code>标度</code>。(M,D)中 M=整数位+小数</p>
<p>位，D=小数位。 D&lt;=M&lt;=255，0&lt;=D&lt;=30。</p>
<ul>
<li><p>超出取值范围则会报错，小数部分按照四舍五入后的结果判断。</p>
</li>
<li><p>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用。</p>
</li>
<li><p>在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。</p>
</li>
</ul>
<h4 id="1-3-3-定点数类型"><a href="#1-3-3-定点数类型" class="headerlink" title="1.3.3 定点数类型"></a>1.3.3 定点数类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字节大小</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DECIMAL(M,D)</td>
<td align="center">M+2字节</td>
<td align="center">有效范围由M和D决定</td>
</tr>
</tbody></table>
<p>使用 <code>DECIMAL(M,D)</code> 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;=M&lt;=65，0&lt;=D&lt;=30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p>
<blockquote>
<p>浮点数 vs 定点数</p>
</blockquote>
<ul>
<li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用<br>于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动<br>力学等）</li>
<li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉<br>及金额计算的场景）</li>
</ul>
<h4 id="1-3-4-日期时间类型"><a href="#1-3-4-日期时间类型" class="headerlink" title="1.3.4 日期时间类型"></a>1.3.4 日期时间类型</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">名称</th>
<th align="center">字节</th>
<th align="center">日期格式</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">YEAR</td>
<td align="center">年</td>
<td align="center">1</td>
<td align="center">YYYY</td>
<td align="center">1901~2155</td>
</tr>
<tr>
<td align="center">TIME</td>
<td align="center">时间</td>
<td align="center">3</td>
<td align="center">HH:MM:SS</td>
<td align="center">-838:59:59~838:59:59</td>
</tr>
<tr>
<td align="center">DATE</td>
<td align="center">日期</td>
<td align="center">3</td>
<td align="center">YYYY-MM-DD</td>
<td align="center">1000-01-01~9999-12-03</td>
</tr>
<tr>
<td align="center">DATETIME</td>
<td align="center">日期时间</td>
<td align="center">8</td>
<td align="center">YYYY-MM-DD HH:MM:SS</td>
<td align="center">1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
</tr>
<tr>
<td align="center">TIMESTAMP</td>
<td align="center">日期时间</td>
<td align="center">4</td>
<td align="center">YYYY-MM-DD HH:MM:SS</td>
<td align="center">1970-01-01 00:00:00 UTC ~ 2038-01-19 03:14:07UTC</td>
</tr>
</tbody></table>
<blockquote>
<p>TIMESTAMP vs DATETIME</p>
</blockquote>
<ul>
<li><p>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</p>
</li>
<li><p>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</p>
</li>
<li><p>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快，比如存储注册时间、发布时间等。</p>
</li>
<li><p>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能</p>
<p>反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</p>
</li>
<li><p>使用函数 CURRENT_TIMESTAMP() 和 NOW() ，可以向DATETIME和TIMESTAMP类型的字段插入系统的当前日期和时间。</p>
</li>
</ul>
<h4 id="1-3-5-文本字符串类型"><a href="#1-3-5-文本字符串类型" class="headerlink" title="1.3.5 文本字符串类型"></a>1.3.5 文本字符串类型</h4><p>MySQL中，文本字符串总体上分为 CHAR 、 VARCHAR 、 TINYTEXT 、 TEXT 、 MEDIUMTEXT 、LONGTEXT 、 ENUM 、 SET 等类型。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">值的长度</th>
<th align="center">长度范围（字节）</th>
<th align="center">字节</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CHAR(M)</td>
<td align="center">M</td>
<td align="center">0 &lt;= M &lt;= 255</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">VARCHAR(M)</td>
<td align="center">M</td>
<td align="center">0 &lt;= M &lt;= 65535</td>
<td align="center">M+1</td>
</tr>
<tr>
<td align="center">TINYTEXT</td>
<td align="center">L</td>
<td align="center">0 &lt;= L &lt;= 255</td>
<td align="center">L+2</td>
</tr>
<tr>
<td align="center">TEXT</td>
<td align="center">L</td>
<td align="center">0 &lt;= L &lt;= 65535</td>
<td align="center">L+2</td>
</tr>
<tr>
<td align="center">MEDIUMTEXT</td>
<td align="center">L</td>
<td align="center">0 &lt;= L &lt;= 16777215</td>
<td align="center">L+3</td>
</tr>
<tr>
<td align="center">LONGTEXT</td>
<td align="center">L</td>
<td align="center">0 &lt;= L &lt;= 4294967295</td>
<td align="center">L+4</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>CHAR(M)</strong></p>
</blockquote>
<ul>
<li><p>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是1个字符。</p>
</li>
<li><p>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在 右侧填充 空格以达到指定的长</p>
<p>度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</p>
</li>
<li><p>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</p>
</li>
</ul>
<blockquote>
<p><strong>VARCHAR(M)</strong></p>
</blockquote>
<ul>
<li><p>VARCHAR(M) 定义时， 必须指定 长度M，否则报错</p>
</li>
<li><p>MySQL5.0版本以上，varchar(20)：指的是20字符。</p>
</li>
<li><p>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间</p>
<p>为字符串实际长度加1个字节。</p>
</li>
</ul>
<blockquote>
<p>区别</p>
</blockquote>
<p><code>InnoDB</code> 存储引擎，建议使用<code>VARCHAR</code>类型。因为对于InnoDB数据表，内部的行存储格式并没有区<br>分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且主要影响性能的因素<br>是数据行使用的存储总量，由于<code>char</code>平均占用的空间多于varchar，所以除了简短并且固定长度的，<br>其他考虑varchar。这样节省空间，对磁盘I/O和数据存储总量比较好。</p>
<blockquote>
<p><strong>TEXT</strong></p>
</blockquote>
<p>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR，<br>VARCHAR来代替。还有TEXT类型<code>不用预定义长度，也无法设置默认值</code>。而且<code>text</code>和<code>blob</code>类型的数据删除后容易导致<strong>空洞</strong>，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用一个表。</p>
<p><code>text</code>可以存储65535字节的内容，在UTF-8格式下：</p>
<ul>
<li>中文汉字：三个字节</li>
<li>中文字符：三个字节</li>
<li>英文字母：一个字节</li>
<li>数字：一个字节</li>
<li>特殊符号：一个字节</li>
</ul>
<h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ul>
<li><p>索引是一个可以加快Mysql查询速度的数据结构。</p>
</li>
<li><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构。</p>
</li>
<li><p>索引就相当于目录。为了方便查找书中的内容，通过对内容建立索引形成目录。索引是一个文件，包含着对数据表里所有记录的引用指针，它是要占据物理空间的。</p>
</li>
<li><p>主键的名称以 pk_ 开头，唯一键以 uni_ 或 uk_ 开头，普通索引以 idx_ 开头，一律</p>
<p>使用小写格式，以字段的名称或缩写作为后缀。</p>
</li>
</ul>
<h4 id="2-1-1-分类"><a href="#2-1-1-分类" class="headerlink" title="2.1.1 分类"></a>2.1.1 分类</h4><p>MySQL的索引包括<code>普通索引</code>、<code>唯一性索引</code>、<code>全文索引</code>、<code>单列索引</code>、<code>多列索引</code>和空间索引`等。</p>
<ul>
<li>从<strong>索引存储结构</strong>划分：B Tree索引、Hash索引、FULLTEXT全文索引、R Tree索引；</li>
<li>从<strong>应用层次</strong>划分：主键索引、普通索引、唯一索引、复合索引；</li>
<li>从<strong>索引键值类型</strong>划分：主键索引、辅助索引（二级索引）；</li>
<li>从<strong>数据存储关系</strong>划分：聚集索引（聚簇索引）、非聚集索引（非聚簇索引）；</li>
</ul>
<h5 id="1、主键索引（PRIMARY-KEY）"><a href="#1、主键索引（PRIMARY-KEY）" class="headerlink" title="1、主键索引（PRIMARY KEY）"></a>1、主键索引（PRIMARY KEY）</h5><ul>
<li>最常见的索引类型，不允许为空值</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
<li>修改主键索引：必须先删除掉(drop)原索引，再新建(add)索引</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">-- 创建表的时候指定主键索引
CREATE TABLE 表名(
...
PRIMARY KEY (字段名)
)

-- 修改表结构添加主键索引
ALTER TABLE 表名 ADD PRIMARY INDEX (字段名)
</code></pre>
<h5 id="2、普通索引（KEY-INDEX）"><a href="#2、普通索引（KEY-INDEX）" class="headerlink" title="2、普通索引（KEY / INDEX）"></a>2、普通索引（KEY / INDEX）</h5><ul>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在查询找条件的字段</li>
<li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">-- 直接创建普通索引
CREATE INDEX indexName ON tableName (columnName)

-- 创建表的时候指定普通索引
CREATE TABLE tableName(
...
INDEX [indexName] (columeName)
)

-- 修改表结构添加普通索引
ALTER TABLE tableName ADD INDEX indexName(columnName)
</code></pre>
<h5 id="3、唯一索引（UNIQUE-KEY）"><a href="#3、唯一索引（UNIQUE-KEY）" class="headerlink" title="3、唯一索引（UNIQUE KEY）"></a>3、唯一索引（UNIQUE KEY）</h5><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值</p>
<p>与主键索引的区别：主键索引只能有一个、唯一索引可以有多个</p>
<pre class=" language-mysql"><code class="language-mysql">-- 直接创建普通索引
CREATE UNIQUE INDEX indexName ON tableName (columnName)

-- 创建表的时候指定普通索引
CREATE TABLE tableName(
...
UNIQUE INDEX [indexName] (columeName)
)

-- 修改表结构添加普通索引
ALTER TABLE tableName ADD UNIQUE INDEX indexName(columnName)
</code></pre>
<p><font>注意：</font></p>
<ul>
<li><p>创建联合唯一索引的字段，都不能允许为null，否则mysql的唯一性约束可能会失效。</p>
</li>
<li><p>逻辑删除表中，如何添加唯一索引：<a href="https://mp.weixin.qq.com/s/aguE0APy24G23CD-5vOwiQ">参考链接</a></p>
</li>
</ul>
<h5 id="4、全文索引（FULLTEXT）"><a href="#4、全文索引（FULLTEXT）" class="headerlink" title="4、全文索引（FULLTEXT）"></a>4、全文索引（FULLTEXT）</h5><ul>
<li>mysql5.7以后，InnoDB也支持全文索引</li>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>全文索引比 like + % 快 N 倍，但是可能存在精度问题；</li>
<li>如果需要全文索引的是大量数据，建议先添加数据，再创建索引。</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">-- 直接创建全文索引
CREATE TABLE `papers` (
`id` int(10) unsigned NOT NULL AUTO_INCREMENT,
`title` varchar(200) DEFAULT NULL,
`content` text,
PRIMARY KEY (`id`),
FULLTEXT KEY `title` (`title`,`content`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- 增加一个全文索引
ALTER TABLE 表名 ADD FULLTEXT INDEX indexName(columnName);

-- 针对全文索引
SELECT * FROM papers WHERE content LIKE '%查询字符串%'; -- 全文索引失效
SELECT * FROM papers WHERE MATCH(title,content) AGAINST('查询字符串') -- 支持全文索引
</code></pre>
<h5 id="5、复合索引"><a href="#5、复合索引" class="headerlink" title="5、复合索引"></a>5、复合索引</h5><p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221118143049525.png" alt="image-20221118143049525"></p>
<p>复合索引使用时遵循<code>最左前缀原则</code>，即最左优先，即查询数据中从联合索引的最左边开始匹配，查询就会使用到索引，如果从索引的第二列开始查找，索引将失效。<br>当我们创建一个复合索引的时候，如（key1，key2，key3），相当于创建了（key1）、（key1，key2）和（key1，key2，key3）三个索引，这就是最左匹配原则。<br><strong>总结：建立复合索引时，将查询需求频繁或者字段选择性高的列放在前面 。（按照从小到大的顺序排列，可以减少搜索次数）</strong></p>
<pre class=" language-mysql"><code class="language-mysql">CREATE TABLE test3(
id INT(11) NOT NULL,
name CHAR(30) NOT NULL,
age INT(11) NOT NULL,
info VARCHAR(255),
INDEX multi_idx(id,name,age)
);
</code></pre>
<h5 id="6、前缀索引"><a href="#6、前缀索引" class="headerlink" title="6、前缀索引"></a>6、前缀索引</h5><p>有时候我们需要索引的字段是字符串类型的，并且这个字符串很长，我们希望这个字段加上索引，但是我们又不希望这个索引占用太多的空间，这时可以考虑建立个前缀索引，以这个字段的前一部分字符建立个索引，这样既可以享受索引，又可以节省空间，这里需要注意的是<code>在前缀重复度较高的情况下，前缀索引和普通索引的速度应该是有差距的。</code></p>
<pre class=" language-mysql"><code class="language-mysql">alter table 表名 add index(字段名(7));
</code></pre>
<p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的；截取得少了，重复内容太多，字<br>段的散列度(选择性)会降低。<strong>怎么计算不同的长度的选择性呢？</strong><br>先看一下字段在全部数据中的选择度：</p>
<pre class=" language-mysql"><code class="language-mysql">select count(distinct address) / count(*) from shop;
</code></pre>
<p>通过不同长度去计算，与全表的选择性对比：</p>
<pre class=" language-mysql"><code class="language-mysql">count(distinct left(列名, 索引长度))/count(*)

select count(distinct left(address,10)) / count(*) as sub10, -- 截取前10个字符的选择度
count(distinct left(address,15)) / count(*) as sub11, -- 截取前15个字符的选择度
count(distinct left(address,20)) / count(*) as sub12, -- 截取前20个字符的选择度
count(distinct left(address,25)) / count(*) as sub13 -- 截取前25个字符的选择度
from shop;
</code></pre>
<p><code>区分度高(散列性高)的列适合作为索引</code></p>
<h5 id="7、覆盖索引"><a href="#7、覆盖索引" class="headerlink" title="7、覆盖索引"></a>7、覆盖索引</h5><p><strong>覆盖索引</strong>：SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据。</p>
<ul>
<li>如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可<code>select *</code>，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</li>
<li>千万不能为了查询而在所有列上都建立索引，会严重影响修改维护的性能。</li>
</ul>
<h5 id="8、聚簇索引-amp-非聚簇索引"><a href="#8、聚簇索引-amp-非聚簇索引" class="headerlink" title="8、聚簇索引 &amp; 非聚簇索引"></a>8、聚簇索引 &amp; 非聚簇索引</h5><ul>
<li>聚簇索引:将数据存储和索引放到了一块，索引结构的叶子结点保存了行数据</li>
<li>非聚簇索引：将数据与索引分开存储，索引结构的叶子结点指向主键的值,也就是对应的聚簇索引的row id(需要查找两个B+tree，这个操作过程叫做回表)。</li>
</ul>
<p><strong>InnoDB的表要求必须要有聚簇索引：</strong></p>
<ul>
<li>如果表定义了主键，则<code>主键索引</code>就是聚簇索引；</li>
<li>如果表没有定义主键，则第一个<code>非空unique列</code>作为聚簇索引；</li>
<li>否则InnoDB会从建一个<code>隐藏的row-id</code>作为聚簇索引；</li>
</ul>
<h5 id="9、辅助索引"><a href="#9、辅助索引" class="headerlink" title="9、辅助索引"></a>9、辅助索引</h5><p>InnoDB<code>辅助索引</code>，也叫作<code>二级索引</code>，是根据索引列构建 B+Tree结构。但在 B+Tree 的叶子节点中<strong>只存了索引列和主键的信息</strong>。二级索引占用的空间会比聚簇索引小很多， 通常创建辅助索引就是为了提升查询效率。一个表InnoDB只能创建一个聚簇索引，但可以创建多个辅助索引。</p>
<p>辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。<strong>当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。</strong></p>
<h5 id="10、回表查询"><a href="#10、回表查询" class="headerlink" title="10、回表查询"></a>10、回表查询</h5><p>InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要有且只有一个主键。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记录，通常情况下，需要扫描两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记录，这就叫做回表查询，它的性能比扫一遍索引树低。</p>
<p><strong>总结：通过索引查询主键值，然后再去聚簇索引查询记录信息。</strong></p>
<h4 id="2-1-2-优缺点"><a href="#2-1-2-优缺点" class="headerlink" title="2.1.2 优缺点"></a>2.1.2 优缺点</h4><p><strong>优点：</strong></p>
<ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>索引列也是要占用空间。</li>
<li>查询的速度变快，但是更新表的速度会变慢（insert，update等操作）。</li>
</ul>
<h3 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2 数据结构"></a>2.2 数据结构</h3><p>MySQL索引的底层数据结构是<code>B+Tree</code></p>
<p>B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</p>
<p><strong>B+Tree结构图：</strong></p>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221118145821262.png" alt="image-20221118145821262"></p>
<p><code>B-Tree</code>结构图中每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。</p>
<p>在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p>
<blockquote>
<p>B-Tree vs B+Tree</p>
</blockquote>
<ul>
<li>B+树中间节点没有数据，所以同样大小的节点上可以容纳更多索引。这就意味着，数据量相同的情况下，B+树结构比B-树更加矮胖，因此查询时<code>IO会更少</code>；</li>
<li>当需要进行一次全数据遍历的时候，B+树只需要使用O(logN)时间找到最小的一个节点，然后通过链进行O(N)的顺序遍历即可；</li>
<li>单值查询：B+树的查询必须最终找到叶子节点，而B-树只需要找到匹配的元素即可；</li>
<li>范围查询：B-树只能依靠繁琐的中序遍历，而B+树只需要在链表上遍历即可；</li>
</ul>
<blockquote>
<p>结构说明</p>
</blockquote>
<p>通常在B+Tree上有<code>两个头指针</code>，一个指向<code>根节点</code>，另一个指向关键字<code>最小的叶子节点</code>，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：</p>
<ul>
<li>对于主键的范围查找和分页查找</li>
<li>从根节点开始，进行随机查找</li>
</ul>
<p><strong>上图中只有22条数据记录，看不出B+Tree的优点，下面做一个推算：</strong></p>
<p>InnoDB存储引擎中<code>页的大小为16KB</code>，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为〖10〗^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = <code>10亿</code>条记录。</p>
<p>实际情况中每个节点可能不能填充满，因此在数据库中，<code>B+Tree的高度一般都在2~4层</code>。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要<code>1~3次磁盘I/O操作</code>。</p>
<p>数据库中的B+Tree索引可以分为聚集索引（clustered index）和辅助索引（secondary index）。上面的B+Tree示例图在数据库中的实现即为聚集索引，聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。</p>
<h3 id="2-3-使用索引"><a href="#2-3-使用索引" class="headerlink" title="2.3 使用索引"></a>2.3 使用索引</h3><h4 id="2-3-1-创建索引"><a href="#2-3-1-创建索引" class="headerlink" title="2.3.1 创建索引"></a>2.3.1 创建索引</h4><pre class=" language-mysql"><code class="language-mysql">-- 在创建表的时候给字段增加索引
CREATE TABLE 表名 (
字段名1 数据类型 [完整性约束条件…],
字段名2 数据类型 [完整性约束条件…],
[UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY [索引名] (字段名[(长度)] [ASC |DESC])
);

-- 创建完毕后，增加索引
-- 方法一：CREATE在已存在的表上创建索引
CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX 索引名
ON 表名 (字段名[(长度)] [ASC |DESC]) ;

-- 方法二：ALTER TABLE在已存在的表上创建索引
ALTER TABLE 表名 ADD [UNIQUE|FULLTEXT|SPATIAL]
INDEX 索引名 (字段名[(长度)] [ASC |DESC]) ;
</code></pre>
<ul>
<li><code>UNIQUE</code> 、 <code>FULLTEXT</code> 和 <code>SPATIAL</code> 为可选参数，分别表示唯一索引、全文索引和空间索引；</li>
<li><code>INDEX</code> 与 <code>KEY</code> 为同义词，两者的作用相同，用来指定创建索引；</li>
<li><code>index_name</code> 指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名；</li>
<li><code>col_name</code> 为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择；</li>
<li><code>length</code> 为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度；</li>
<li><code>ASC</code> 或 <code>DESC</code> 指定升序或者降序的索引值存储。</li>
</ul>
<h4 id="2-3-2-删除索引"><a href="#2-3-2-删除索引" class="headerlink" title="2.3.2 删除索引"></a>2.3.2 删除索引</h4><pre class=" language-mysql"><code class="language-mysql">-- 删除索引
DROP INDEX 索引名 ON 表名;

-- 删除主键索引
ALTER TABLE 表名 DROP PRIMARY KEY;
</code></pre>
<h4 id="2-3-3-查看索引"><a href="#2-3-3-查看索引" class="headerlink" title="2.3.3 查看索引"></a>2.3.3 查看索引</h4><pre class=" language-mysql"><code class="language-mysql">SHOW INDEX FROM 表名;
</code></pre>
<h3 id="2-4-索引的适用场景"><a href="#2-4-索引的适用场景" class="headerlink" title="2.4 索引的适用场景"></a>2.4 索引的适用场景</h3><ul>
<li> 字段的数值有<code>唯一性</code>的限制（务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引）</li>
<li> 频繁作为<code> WHERE 查询</code>条件的字段（大数据量）</li>
<li> 经常 <code>GROUP BY</code> 和 <code>ORDER BY</code> 的列（如果待排序的列有多个，可以建立组合索引）</li>
<li> <code>DISTINCT</code> 字段需要创建索引</li>
<li> 使用<code>字符串前缀</code>创建索引</li>
<li> 使用最频繁的列放到联合索引的左侧（”<code>最左前缀原则</code>“，可以增加联合索引的使用率）</li>
<li> 在多个字段都要创建索引的情况下，<code>联合索引优于单值索引</code></li>
</ul>
<h3 id="2-5-索引的不适用场景"><a href="#2-5-索引的不适用场景" class="headerlink" title="2.5 索引的不适用场景"></a>2.5 索引的不适用场景</h3><ul>
<li> 在where中使用不到的字段，不要设置索引</li>
<li> <code>数据量小</code>的表最好不要使用索引（不到1000行）</li>
<li> 有大量<code>重复数据</code>的列上不要建立索引（重复率高于 10%）</li>
<li> 避免对<code>经常更新</code>的表创建过多的索引</li>
<li> 不建议用<code>无序的值</code>作为索引（UUID、身份证、MD5、HASH、无序长字符串等）</li>
<li> 删除不再使用或很少使用的值</li>
<li> 不要<code>重复创建</code>索引（已经有了联合索引，则无需再创建单列索引）</li>
</ul>
<h3 id="2-6-索引的失效场景"><a href="#2-6-索引的失效场景" class="headerlink" title="2.6 索引的失效场景"></a>2.6 索引的失效场景</h3><ol>
<li>对于复合索引，<code>不满足最左前缀</code>，则不会使用索引；</li>
<li>like查询<code>以%开头</code>；</li>
<li>索引列上使用了函数</li>
<li>索引列上有计算操作</li>
<li>使用<code>OR</code>关键字(在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效)</li>
<li>如果列类型是字符串，那一定要在条件中将数据<code>使用引号</code>引用起来，否则不使用索引；</li>
<li><code>IN</code>使用不当(in 在结果集 大于30%的时候索引失效)</li>
<li><code>ORDER BY</code>使用不当（Mysql 认为直接全表扫面的速度比回表的速度快所以就直接走索引了，在Order By 的情况下走全表扫描反而是更好的选择）</li>
</ol>
<h2 id="三、执行器"><a href="#三、执行器" class="headerlink" title="三、执行器"></a>三、执行器</h2><blockquote>
<p>前言</p>
</blockquote>
<p>参考链接：<a href="https://blog.csdn.net/Dreamhai/article/details/104558854">MySQL查询优化之explain 执行计划 深入解析(精品)</a></p>
<p>见表语句：</p>
<pre class=" language-mysql"><code class="language-mysql">-- actor建表语句：
CREATE TABLE `actor` (
  `id` int(11) NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8；

-- film建表语句：
CREATE TABLE `film` (
  `id` int(11) NOT NULL,
  `name` varchar(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`) 
) ENGINE=InnoDB DEFAULT CHARSET=utf8；

-- film_actor建表语句：
CREATE TABLE `film_actor` (
  `id` int(11) NOT NULL,
  `film_id` int(11) NOT NULL,
  `actor_id` int(11) NOT NULL,
  `remark` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_film_actor_id` (`film_id`,`actor_id`) 
) ENGINE=InnoDB DEFAULT CHARSET=utf8；


-- actor 表
INSERT INTO `actor` (`id`, `name`, `update_time`) VALUES (3, '巨石强森', '2020-02-28 22:50:57');
INSERT INTO `actor` (`id`, `name`, `update_time`) VALUES (1, '大超', '2020-02-28 22:49:53');
INSERT INTO `actor` (`id`, `name`, `update_time`) VALUES (2, '哈里沃克', '2020-02-28 22:50:44');

-- film 表
INSERT INTO `film` (`id`, `name`) VALUES (3, '闪电侠');
INSERT INTO `film` (`id`, `name`) VALUES (1, '黑亚当');
INSERT INTO `film` (`id`, `name`) VALUES (2, '超人归来');


-- film_actor 表
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (5, 3, 2, NULL);
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (6, 3, 2, NULL);
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (2, 2, 1, NULL);
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (4, 2, 3, NULL);
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (1, 1, 1, NULL);
INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`, `remark`) VALUES (3, 1, 3, NULL);
</code></pre>
<h3 id="3-1-基础概念"><a href="#3-1-基础概念" class="headerlink" title="3.1 基础概念"></a>3.1 基础概念</h3><blockquote>
<p>概念</p>
</blockquote>
<p>使用<code>Explain</code>关键字可以模拟优化器执行SQL语句，分析查询语句或是结构的<strong>性能瓶颈</strong>。在select语句之前增加explaion关键字，MySQL会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行SQL。</p>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li>表的读取顺序如何</li>
<li>数据读取操作有哪些操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间是如何引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<blockquote>
<p>语句</p>
</blockquote>
<pre class=" language-mysql"><code class="language-mysql">explain select * from user;
</code></pre>
<blockquote>
<p>字段</p>
</blockquote>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117112228465.png" alt="image-20221117112228465"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</td>
</tr>
<tr>
<td>select_type</td>
<td>查询类型</td>
</tr>
<tr>
<td>table</td>
<td>正在访问哪个表，显示这一行的数据是关于哪张表的</td>
</tr>
<tr>
<td>partitions</td>
<td>匹配的分区</td>
</tr>
<tr>
<td>type</td>
<td>访问的类型</td>
</tr>
<tr>
<td>possible_keys</td>
<td>显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</td>
</tr>
<tr>
<td>key</td>
<td>实际使用到的索引，如果为NULL，则没有使用索引</td>
</tr>
<tr>
<td>key_len</td>
<td>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</td>
</tr>
<tr>
<td>ref</td>
<td>显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</td>
</tr>
<tr>
<td>rows</td>
<td>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</td>
</tr>
<tr>
<td>filtered</td>
<td>查询的表行占表的百分比</td>
</tr>
<tr>
<td>Extra</td>
<td>包含不适合在其它列中显示但十分重要的额外信息</td>
</tr>
</tbody></table>
<hr>
<h3 id="3-2-id（序列号）"><a href="#3-2-id（序列号）" class="headerlink" title="3.2 id（序列号）"></a>3.2 id（序列号）</h3><ul>
<li>id列的编号是select的<code>序列号</code>，涉及的select表有几个就有几个id，并且id的顺序是按select出现的顺序增长的。</li>
<li>id越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。</li>
</ul>
<blockquote>
<p>id相同</p>
</blockquote>
<p><code>从上至下，顺序执行</code></p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select t1.* , t2.* , t3.*
from actor t1 , film t2 , film_actor t3
where t3.film_id = t2.id and t3.actor_id = t1.id;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117135417081.png" alt="image-20221117135417081"></p>
<p>如图所示，ID列的值全为1，代表执行顺序从t1表开始加载，依次为t3，t2</p>
<blockquote>
<p>id不同</p>
</blockquote>
<p>如果是子查询，id的序号会递增，<code>id值越大优先级越高，越先被执行</code></p>
<pre class=" language-mysql"><code class="language-mysql">explain
select t1.*
from actor t1
where t1.id = (select t2.actor_id from film_actor t2 where t2.id=3);
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117135743764.png" alt="image-20221117135743764"></p>
<p>如上图所示，t2表的id值为2，所以执行顺序将先从t2表开始加载,然后再执行t1表</p>
<blockquote>
<p>id既有相同也有不同</p>
</blockquote>
<ul>
<li>根据id分成不同组，id值越大的组，越先执行</li>
<li>id 相同的一组，从上至下顺序执行</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">explain
select t1.* from actor t1 left join film_actor t2 on t1.id = t2.actor_id
union
select t1.* from actor t1 right join film_actor t2 on t1.id = t2.actor_id;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117140131243.png" alt="image-20221117140131243"></p>
<p>执行顺序：分成两组，id为2的里按照顺序先执行t2 &gt; t1，在到id为1的组里按照顺序执行t1 &gt; t2</p>
<h3 id="3-3-select-type-（查询类型）"><a href="#3-3-select-type-（查询类型）" class="headerlink" title="3.3 select_type （查询类型）"></a>3.3 select_type （查询类型）</h3><p>Select_type:<code>查询的类型</code></p>
<p>用于区别:普通查询、联合查询、子查询等的复杂查询</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>简单的select查询，不包含子查询或者union</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>查询中若包含任何复杂的子部分,最外层查询则被标记为primary</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>在<code>SELECT</code>或<code>WHERE</code>列表中包含了子查询，则子查询部分被标记为subquery</td>
</tr>
<tr>
<td>DERIVERD(衍生)</td>
<td>在<code>FROM</code>列表中包含的子查询被标记为DERIVED(衍生). MySQL会递归执行这些子查询, 把结果放在临时表里。</td>
</tr>
<tr>
<td>UNION</td>
<td>若第二个SELECT出现在UNION之后，则被标记为UNION</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>从UNION表获取结果的SELECT</td>
</tr>
</tbody></table>
<h3 id="3-4-type（访问类型）"><a href="#3-4-type（访问类型）" class="headerlink" title="3.4 type（访问类型）"></a>3.4 type（访问类型）</h3><p>type显示的是<code>访问类型</code>，是较为重要的一个指标，结果值从最好到最坏依次是：</p>
<p><strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong></p>
<p>需要记忆的：<code>NULL&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</code></p>
<p>一般来说，得保证查询至少达到range级别，最好能达到ref。</p>
<h4 id="3-4-1-System与-const"><a href="#3-4-1-System与-const" class="headerlink" title="3.4.1 System与 const"></a>3.4.1 System与 const</h4><ul>
<li><code>System:</code>表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计</li>
<li><code>const:</code>表示通过索引一次就找到了， const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快，例如将主键置于where条件中，MySQL就能将该查询转换为一个常量。</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">explain
select * from (select * from actor t1 where t1.id = 1) s1;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145441965.png" alt="image-20221117145441965"></p>
<h4 id="3-4-2-eq-ref"><a href="#3-4-2-eq-ref" class="headerlink" title="3.4.2 eq_ref"></a>3.4.2 eq_ref</h4><p><code>唯一性索引扫描</code>，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</p>
<pre class=" language-mysql"><code class="language-mysql">explain
select * from actor t1 left join film_actor t2 on t2.id = t1.id;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145406898.png" alt="image-20221117145406898"></p>
<h4 id="3-4-3-ref-与-index"><a href="#3-4-3-ref-与-index" class="headerlink" title="3.4.3 ref 与 index"></a>3.4.3 ref 与 index</h4><p><code>非唯一性索引扫描</code>，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。即<code>联合索引</code>。</p>
<ul>
<li>区别：最左匹配原则</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">--  ref
explain
select count(distinct film_id) from film_actor t1 where t1.film_id = 1;

-- index
explain
select count(distinct actor_id) from film_actor t1 where t1.actor_id = 1;
</code></pre>
<p>ref：</p>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145300519.png" alt="image-20221117145300519"></p>
<p>index：使用index进行一次全表扫描；</p>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145327500.png" alt="image-20221117145327500"></p>
<h4 id="3-4-4-Range"><a href="#3-4-4-Range" class="headerlink" title="3.4.4 Range"></a>3.4.4 Range</h4><ul>
<li>只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引</li>
<li>一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询</li>
<li>这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。</li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">explain
select t1.* from actor t1 where t1.id between 1 and 3;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145227479.png" alt="image-20221117145227479"></p>
<h3 id="3-5-possible-keys-与-key（使用的索引）"><a href="#3-5-possible-keys-与-key（使用的索引）" class="headerlink" title="3.5 possible_keys 与 key（使用的索引）"></a>3.5 possible_keys 与 key（使用的索引）</h3><p><code>possible_keys</code>:可能使用的key</p>
<p><code>Key</code>:实际使用的索引。如果为NULL，则没有使用索引</p>
<h3 id="3-6-key-len（索引字节数）"><a href="#3-6-key-len（索引字节数）" class="headerlink" title="3.6 key_len（索引字节数）"></a>3.6 key_len（索引字节数）</h3><p><code>Key_len</code>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>
<p><code>key_len</code>显示的值为索引字段的最大可能长度，并非实际使用长度，即<code>key_len</code>是根据表定义计算而得，不是通过表内检索出的</p>
<h3 id="3-7-ref（引用列）"><a href="#3-7-ref（引用列）" class="headerlink" title="3.7 ref（引用列）"></a>3.7 ref（引用列）</h3><p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select * from actor t1 , film_actor t2 where t1.id = t2.actor_id and t2.film_id = 2;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145154682.png" alt="image-20221117145154682"></p>
<ul>
<li>t2.film_id = 2匹配的是一个常量，所以是const。</li>
<li>t1.id = t2.actor_id匹配的是t2.actor_id。</li>
</ul>
<h3 id="3-8-rows（读取行数）"><a href="#3-8-rows（读取行数）" class="headerlink" title="3.8 rows（读取行数）"></a>3.8 rows（读取行数）</h3><p> 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select * from actor t1 , film_actor t2 where t1.id = t2.actor_id and t2.film_id = 2;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117145924402.png" alt="image-20221117145924402"></p>
<h3 id="3-9-Extra（额外信息）"><a href="#3-9-Extra（额外信息）" class="headerlink" title="3.9 Extra（额外信息）"></a>3.9 Extra（额外信息）</h3><p>包含不适合在其它列中显示但十分重要的额外信息</p>
<h4 id="3-9-1-Using-filesort"><a href="#3-9-1-Using-filesort" class="headerlink" title="3.9.1 Using filesort"></a>3.9.1 Using filesort</h4><ul>
<li>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。</li>
<li>MySQL中无法利用索引完成的排序操作称为<code>文件排序</code>。</li>
<li><code>当发现有Using filesort 后，实际上就是发现了可以优化的地方</code></li>
</ul>
<pre class=" language-mysql"><code class="language-mysql">explain 
select * from film_actor t1 where t1.film_id=1 order by t1.film_id;
</code></pre>
<h4 id="3-9-2-Using-temporary"><a href="#3-9-2-Using-temporary" class="headerlink" title="3.9.2 Using temporary"></a>3.9.2 Using temporary</h4><p>使用了<code>临时表保存中间结果</code>，MySQL在对结果排序时使用临时表，常见于排序order by 和分组查询group by</p>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117151505366.png" alt="image-20221117151505366"></p>
<p><strong>尤其发现在执行计划里面有using filesort而且还有Using temporary的时候，特别需要注意</strong></p>
<h4 id="3-9-3-Using-index"><a href="#3-9-3-Using-index" class="headerlink" title="3.9.3 Using index"></a>3.9.3 Using index</h4><p>表示相应的select操作中使用了覆盖索引（Covering Index），避免访问了表的数据行，效率不错！</p>
<p><strong>如果同时出现using where，表明索引被用来执行索引键值的查找</strong></p>
<p><strong>如果没有同时出现using where，表明索引用来读取数据而非执行查找动作</strong></p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select * from film t1 where t1.name="黑亚当";
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117151715656.png" alt="image-20221117151715656"></p>
<h4 id="3-9-4-Using-where-using-join-buffer"><a href="#3-9-4-Using-where-using-join-buffer" class="headerlink" title="3.9.4 Using where / using join buffer"></a>3.9.4 Using where / using join buffer</h4><p><code>Using where</code>:表明使用where过滤</p>
<p> <code>using join buffer</code>:使用了连接缓存</p>
<h4 id="3-9-5-impossible-where"><a href="#3-9-5-impossible-where" class="headerlink" title="3.9.5 impossible where"></a>3.9.5 impossible where</h4><p>where子句的值总是<code>false</code>，不能用来获取任何元组</p>
<pre class=" language-mysql"><code class="language-mysql">-- where 条件的字句总是为false
explain 
select * from film t1 where 1=2

-- 
explain 
select * from film t1 where t1.name="随机填入" and t1.name="随机填入"
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117152355055.png" alt="image-20221117152355055"></p>
<h4 id="3-9-6-distinct"><a href="#3-9-6-distinct" class="headerlink" title="3.9.6 distinct"></a>3.9.6 distinct</h4><p>一旦mysql找到了与行相联合匹配的行，就不再继续查找</p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select  distinct  t1.id from actor t1 ,film_actor t2 , film t3 where t1.id = t2.actor_id and t2.film_id = t3.id;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117152913698.png" alt="image-20221117152913698"></p>
<h4 id="3-9-7-Select-tables-optimized-away"><a href="#3-9-7-Select-tables-optimized-away" class="headerlink" title="3.9.7 Select tables optimized away"></a>3.9.7 Select tables optimized away</h4><p>SELECT操作已经优化到不能再优化了（MySQL根本没有遍历表或索引就返回数据了）</p>
<pre class=" language-mysql"><code class="language-mysql">explain 
select  min(t1.id) from actor t1;
</code></pre>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221117153127267.png" alt="image-20221117153127267"></p>
<h2 id="四、事务-锁"><a href="#四、事务-锁" class="headerlink" title="四、事务/锁"></a>四、事务/锁</h2><h3 id="4-1-日志"><a href="#4-1-日志" class="headerlink" title="4.1 日志"></a>4.1 日志</h3><p>日志是 <code>mysql</code> 数据库的重要组成部分，记录着数据库运行期间各种状态信息。</p>
<p><code>mysql</code>日志主要包括<strong>错误日志</strong>、<strong>查询日志</strong>、<strong>慢查询日志</strong>、<strong>事务日志</strong>、<strong>二进制日志</strong>。</p>
<p>我们最关注的是**二进制日志( <code>binlog</code> )<strong>和</strong>事务日志(包括<code>redo log</code> 和 <code>undo log</code> )**，这三种日志。</p>
<h4 id="4-1-1-binlog"><a href="#4-1-1-binlog" class="headerlink" title="4.1.1 binlog"></a>4.1.1 binlog</h4><ul>
<li><code>binlog</code> 用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。</li>
<li><code>binlog</code> 是 <code>mysql</code>的逻辑日志，并且由 <code>Server</code> 层进行记录。</li>
<li>使用任何存储引擎的 <code>mysql</code> 数据库都会记录 <code>binlog</code> 日志。 </li>
</ul>
<p><code>逻辑日志</code>：可以简单理解为记录的就是sql语句 。</p>
<p><code>物理日志</code>：mysql 数据最终是保存在数据页中的，物理日志记录的就是数据页变更 。</p>
<p> binlog 是通过追加的方式进行写入的，可以通过max_binlog_size 参数设置每个 binlog文件的大小，当文件大小达到设定值之后，会生成新的文件来保存日志。</p>
<blockquote>
<p>binlog使用场景：</p>
</blockquote>
<ul>
<li><strong>主从复制</strong> ：在 <code>Master</code> 端开启 <code>binlog</code> ，然后将 <code>binlog</code>发送到各个 <code>Slave</code> 端， <code>Slave</code> 端重放 <code>binlog</code> 从而达到主从数据一致。</li>
<li><strong>数据恢复</strong> ：通过使用 <code>mysqlbinlog</code> 工具来恢复数据。</li>
</ul>
<h4 id="4-1-2-redo-log"><a href="#4-1-2-redo-log" class="headerlink" title="4.1.2 redo log"></a>4.1.2 redo log</h4><p>数据库事务的四大特性里面有一个是 <strong>持久性</strong> ，具体来说就是<strong>只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态</strong> 。</p>
<blockquote>
<p>MySQL是如何保证一致性的呢？</p>
</blockquote>
<p>MySQL是在每次事务提交的时候，将该事务<code>涉及修改的数据页</code>全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：</p>
<ul>
<li><p>因为 Innodb 是<code>以页为单位进行磁盘交互</code>的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了。</p>
</li>
<li><p>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用<code>随机IO写入性能太差</code>。</p>
</li>
</ul>
<p>因此 <code>mysql</code> 设计了 <code>redo log</code> ， <strong>具体来说就是只记录事务对数据页做了哪些修改</strong>，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。</p>
<p>redo log包括两部分：</p>
<ul>
<li>内存中的日志缓冲（redo log buffer）</li>
<li>磁盘上的日志文件（redo logfile）</li>
</ul>
<p>MySQL每执行一条DML语句，先将记录写入到<code>redo log buffer</code>，后续某个时间点再一次性将多个操作记录写到<code>redo log file</code>。这种先写日志，再写磁盘，就是经常说到的WAL(Write-Ahead Logging)。</p>
<table>
<thead>
<tr>
<th></th>
<th>redo log</th>
<th>bin log</th>
</tr>
</thead>
<tbody><tr>
<td>文件大小</td>
<td>大小固定</td>
<td>可通过配置参数<code>max_binlog_size</code>设置文件大小</td>
</tr>
<tr>
<td>实现方式</td>
<td>是<code>InnoDB</code>引擎层实现的，并不是所有引擎都有</td>
<td>是<code>Server</code>层实现的，所有引擎都可使用</td>
</tr>
<tr>
<td>记录方式</td>
<td>redo log 采用循环写的方式记录，当写到结尾时，会回到开头循环写日志</td>
<td>通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于崩溃恢复(crash-safe)</td>
<td>适用于主从复制和数据恢复</td>
</tr>
</tbody></table>
<p>binlog 日志只用于归档，只依靠 binlog 是没有 crash-safe 能力的。但只有redo log 也不行，因为redo log 是 InnoDB特有的，且日志上的记录落盘后会被覆盖掉。<strong>因此需要 binlog和 redo log二者同时记录，才能保证当数据库发生宕机重启时，数据不会丢失。</strong></p>
<h4 id="4-1-3-undo-log"><a href="#4-1-3-undo-log" class="headerlink" title="4.1.3 undo log"></a>4.1.3 undo log</h4><p><code>undo log</code>主要记录了数据的逻辑变化，比如一条 INSERT 语句，对应一条DELETE 的 undo log ，对于每个 UPDATE 语句，对应一条相反的 UPDATE 的 undo log ，如果事务执行失败或者调用了<code> rollback</code>，就会根据 undo log 的内容恢复到执行之前的状态。<br>同时， <code>undo log</code> 也是 <code>MVCC</code>(多版本并发控制)实现的关键，见下文MVCC。</p>
<h3 id="4-2-事务控制语法"><a href="#4-2-事务控制语法" class="headerlink" title="4.2 事务控制语法"></a>4.2 事务控制语法</h3><pre class=" language-mysql"><code class="language-mysql">-- 提交操作(事务成功)
start transaction;

DML语句

commit;


-- 回滚操作(事务失败)
start transaction;

DML语句

rollback;
</code></pre>
<h3 id="4-3-事务并发异常"><a href="#4-3-事务并发异常" class="headerlink" title="4.3 事务并发异常"></a>4.3 事务并发异常</h3><p>在实际产线环境下，可能会存在大规模并发请求的情况，如果没有妥善的设置事务的隔离级别，就可能导致一些异常情况的出现，最常见的几种异常为<code>脏读(Dirty Read)</code>、<code>幻读(Phantom Read)</code>和<code>不可重复读(Unrepeatable Read)</code>。</p>
<h4 id="4-3-1-脏读"><a href="#4-3-1-脏读" class="headerlink" title="4.3.1 脏读"></a>4.3.1 脏读</h4><p>脏读指一个事务访问到了另一个事务未提交的数据，如下过程：</p>
<ol>
<li>假设 a 的值为 1，事务 2 把 a 改为 2，此时事务还未提交</li>
<li>在这个时候，事务 1 读取 a，读得 a 的值为 2，事务 1 读取完成</li>
<li>结果事务 2 回滚了对 a 的修改（或者是未 commit），于是 a 的值变回 1</li>
<li>这就导致事实上 a 的值为 1，但是事务 1 取得的结果为 2，所以事务 1 读到了脏数据，发生脏读</li>
</ol>
<img src="F:/笔记/source/images/7-MySql学习计划/image-20221118134735570.png" alt="image-20221118134735570" style="zoom:67%;">

<h4 id="4-3-2-幻读"><a href="#4-3-2-幻读" class="headerlink" title="4.3.2 幻读"></a>4.3.2 幻读</h4><p>幻读指一个事务多次读取同一数据的过程中，全局数据（如数据行数）发生了改变，仿佛产生了幻觉，描述的是针对全表 insert/delete 的现象，如下过程：</p>
<ol>
<li>事务 1 第一次读取数量，得到 10 条数据</li>
<li>此时事务 2 插入了一条数据并成功提交，改动生效，数据变成 11 条</li>
<li>事务 1 再次读取数量，得到 11 条数据，对事务 1 而言莫名其妙的多了一条，好像产生幻觉了一样，发生幻读</li>
</ol>
<img src="F:/笔记/source/images/7-MySql学习计划/image-20221118134936560.png" alt="image-20221118134936560" style="zoom:67%;">

<h4 id="4-3-3-不可重复读"><a href="#4-3-3-不可重复读" class="headerlink" title="4.3.3 不可重复读"></a>4.3.3 不可重复读</h4><p>不可重复读指一个事务多次读取同一数据的过程中，数据值 <strong>内容</strong> 发生了改变，导致没有办法读到相同的值，描述的是针对同一条数据 update/delete 的现象，如下过程：</p>
<ol>
<li>事务 1 读取 a，此时 a = 1</li>
<li>此时事务 2 将 a 修改为 2，并成功提交，改动生效</li>
<li>事务 1 又一次读取 a，此时 a = 2</li>
<li>事务 1 在同一个事务里面两次读取同一个值，数据值内容却发生了改变，发生不可重复读</li>
</ol>
<img src="F:/笔记/source/images/7-MySql学习计划/image-20221118135130709.png" alt="image-20221118135130709" style="zoom:67%;">

<h3 id="4-4-事务隔离级别"><a href="#4-4-事务隔离级别" class="headerlink" title="4.4 事务隔离级别"></a>4.4 事务隔离级别</h3><p>数据库有 4 种事务隔离级别，由低到高依次为 <code>读未提交 Read Uncommitted</code> 、<code>读已提交 Read Committed</code> 、<code>可重复读 Repeatable Read</code> 、<code>串行化 Serializable</code> 。</p>
<ul>
<li><strong>读未提交 Read Uncommitted</strong><br>允许读取未提交的内容，这种级别下的查询不会加锁，因此脏读、不可重复读、幻读都有可能发生。</li>
<li><strong>读已提交 Read Committed</strong><br>只允许读取已提交的内容，这种级别下的查询不会发生脏读，因为脏数据属于未提交的数据，所以不会被读取，但是依然有可能发生不可重复读和幻读。</li>
<li><strong>可重复读 Repeatable Read</strong> （MySQL 的默认隔离级别）<br>使用行级锁来保证一个事务在相同查询条件下两次查询得到的数据结果一致，可以避免脏读和不可重复读，但是没有办法避免幻读。需要特殊注意的是，Innodb 在 Repeatable Read 下通过 MVCC 提供了稳定的视图，因此 Innodb 的 RR 隔离级别下是不会出现上述幻读异常中的第一个场景的，但第二个场景还是会出现。</li>
<li><strong>串行化 Serializable</strong><br>使用表级锁来保证所有事务的串行化，可以防止所有的异常情况，但是牺牲了系统的并发性。</li>
</ul>
<p>串行化的事务处理方式当然是最安全的，但是串行无法满足数据库高并发访问的需求，作为妥协，有时不得不降低数据库的隔离标准来换取事务的并发能力，通过在可控的范围内牺牲正确性来换取效率的提升，这种权衡通过事务的隔离级别来实现。</p>
<p>四种隔离级别中上述三种异常情况的容忍度如下（✅ 代表允许，❌ 代表禁止）：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读未提交 Read Uncommitted</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">读已提交 Read Committed</td>
<td align="center">❌</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">可重复读 Repeatable Read</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">串行化 Serializable</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">❌</td>
</tr>
</tbody></table>
<h3 id="4-5-锁"><a href="#4-5-锁" class="headerlink" title="4.5 锁"></a>4.5 锁</h3><p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221123171256786.png" alt="image-20221123171256786"></p>
<h4 id="4-5-1-全局锁"><a href="#4-5-1-全局锁" class="headerlink" title="4.5.1 全局锁"></a>4.5.1 全局锁</h4><p><code>全局锁就是对整个数据库实例加锁</code>。MySQL提供了一个加全局读锁的方法，命令是<code>Flush tables with read lock</code>。当需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句</p>
<p>全局锁的典型使用场景是，做<code>全库逻辑备份</code>。也就是把整库每个表都select出来存成文本，但是让整个库都只读，可能出现以下问题：</p>
<ul>
<li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li>
<li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的binlog，会导致主从延迟<br>在可重复读隔离级别下开启一个事务能够拿到一致性视图。</li>
</ul>
<p>官方自带的逻辑备份工具是<code>mysqldump</code>。当mysqldump使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。<strong>single-transaction只适用于所有的表使用事务引擎的库</strong></p>
<blockquote>
<p>1.既然要全库只读，为什么不使用set global readonly=true的方式？</p>
</blockquote>
<p>在有些系统中，readonly的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此修改global变量的方式影响面更大<br>在异常处理机制上有差异。如果执行Flush tables with read lock命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风险较高。</p>
<h4 id="4-5-2-表级锁"><a href="#4-5-2-表级锁" class="headerlink" title="4.5.2 表级锁"></a>4.5.2 表级锁</h4><p>MySQL里面表级别的锁有两种：一种是<code>表锁</code>，一种是<code>元数据锁（Meta Data Lock，MDL）</code></p>
<blockquote>
<p>表锁：</p>
</blockquote>
<p>表锁的语法是<code>lock tables … read/write</code>。可以用<code>unlock tables</code>主动释放锁，也可以在客户端断开的时候自动释放。lock tables语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象</p>
<p>如果在某个线程A中执行lock tables t1 read,t2 wirte;这个语句，则其他线程写t1、读写t2的语句都会被阻塞。同时，线程A在执行unlock tables之前，也只能执行读t1、读写t2的操作。连写t1都不允许</p>
<blockquote>
<p>元数据锁（MDL）：</p>
</blockquote>
<p>MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做了变更，删了一个字段，那么查询线程拿到的结果跟表结构对不上，肯定不行。</p>
<p>在MySQL5.5版本引入了MDL，当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁：</p>
<ul>
<li>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查</li>
<li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行</li>
</ul>
<blockquote>
<p>大表</p>
</blockquote>
<p>给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，需要特别小心，以免对线上服务造成影响</p>
<img src="F:/笔记/source/images/7-MySql学习计划/image-20221122102906474.png" alt="image-20221122102906474" style="zoom: 50%;">

<p>session A先启动，这时候会对表t加一个MDL读锁。由于session B需要的也是MDL读锁，因此可以正常执行。之后sesession C会被blocked，是因为session A的MDL读锁还没有释放，而session C需要MDL写锁，因此只能被阻塞。如果只有session C自己被阻塞还没什么关系，但是之后所有要在表t上新申请MDL读锁的请求也会被session C阻塞。所有对表的增删改查操作都需要先申请MDL读锁，就都被锁住，等于这个表现在完全不可读写了。</p>
<blockquote>
<p>小表</p>
</blockquote>
<p><code>事务中的MDL锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放</code></p>
<p><strong>1.如果安全地给小表加字段？</strong></p>
<p>首先要<code>解决长事务</code>，事务不提交，就会一直占着DML锁。在MySQL的information_schema库的innodb_trx表中，可以查到当前执行的事务。如果要做DDL变更的表刚好有长事务在执行，要考虑先暂停DDL，或者kill掉这个长事务</p>
<p><strong>2.如果要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而又不得不加个字段，该怎么做？</strong></p>
<p>在alter table语句里面<code>设定等待时间</code>，如果在这个指定的等待时间里面能够拿到MDL写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后再通过重试命令重复这个过程</p>
<h4 id="4-5-3-行锁"><a href="#4-5-3-行锁" class="headerlink" title="4.5.3 行锁"></a>4.5.3 行锁</h4><p>MySQL的行锁是在引擎层由各个引擎自己实现的。但不是所有的引擎都支持行锁，比如<code>MyISAM引擎就不支持行锁</code>，而<code>InnoDB</code>实现了以下两种类型的行锁。</p>
<ul>
<li><code>共享锁（s）</code>：又称<code>读锁</code>。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</li>
<li><code>排他锁（Ｘ）</code>：又称<code>写锁</code>。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</li>
</ul>
<p>对于共享锁的理解，就是多个事务只能读数据不能改数据。</p>
<p>对于排他锁大家的理解指的是一个事务在一行数据加上排他锁后，其他事务不能再在其上加其他的锁。InnoDB引擎默认的修改数据语句：<strong>update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型。</strong>加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接<code>通过select …from…查询数据</code>，因为普通查询没有任何锁机制。</p>
<hr>
<p>另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的<code>意向锁（Intention Locks）</code>，这两种意向锁都是表锁。</p>
<ul>
<li><p><code>意向共享锁（IS）</code>：事务打算给数据行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</p>
</li>
<li><p><code>意向排他锁（IX）</code>：事务打算给数据行加排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p>
</li>
</ul>
<blockquote>
<p>InnoDB行锁模式兼容性列表:</p>
</blockquote>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221118184305111.png" alt="image-20221118184305111"></p>
<p>如果一个事务请求的锁模式与当前的锁兼容，InnoDB就请求的锁授予该事务；反之，如果两者两者不兼容，该事务就要等待锁释放。<br><strong>意向锁是InnoDB自动加的，不需用户干预。</strong>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁。</p>
<p>事务可以通过以下语句显式给记录集加共享锁或排他锁：</p>
<ul>
<li>共享锁（S）：<code>SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</code></li>
<li>排他锁（X）：<code>SELECT * FROM table_name WHERE ... FOR UPDATE</code></li>
</ul>
<p>用SELECT … IN SHARE MODE获得共享锁，主要用在需要数据依存关系时来确认某行记录是否存在，并确保没有人对这个记录进行UPDATE或者DELETE操作。但是如果当前事务也需要对该记录进行更新操作，则很有可能造成死锁，<strong>对于锁定行记录后需要进行更新操作的应用，应该使用SELECT… FOR UPDATE方式获得排他锁。</strong></p>
<blockquote>
<p>行锁的实现方式</p>
</blockquote>
<p>InnoDB行锁是通过给索引上的<code>索引项加锁</code>来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：<code>只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</code><br>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。下面通过一些实际例子来加以说明。</p>
<ul>
<li>在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。</li>
<li>由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现锁冲突的。</li>
<li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。</li>
<li>即便在条件中使用了索引字段，但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决 定的，如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引。</li>
</ul>
<h4 id="4-5-4-间隙锁"><a href="#4-5-4-间隙锁" class="headerlink" title="4.5.4 间隙锁"></a>4.5.4 间隙锁</h4><p>当我们用<code>范围条件</code>而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“<code>间隙（GAP)</code>”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的<code>间隙锁 （Next-Key锁）</code>。</p>
<p>很显然，在使用范围条件检索并锁定记录时，InnoDB这种加锁机制会阻塞符合条件范围内键值的并发插入，这往往会造成严重的锁等待<strong>。因此，在实际应用开发中，尤其是并发插入比较多的应用，我们要尽量优化业务逻辑，尽量使用相等条件来访问更新数据，避免使用范围条件。</strong></p>
<p>特别说明的是，InnoDB除了通过范围条件加锁时使用间隙锁外，如果使用<strong>相等条件请求给一个不存在的记录加锁</strong>，InnoDB也会使用间隙锁！</p>
<h4 id="4-5-5-小结"><a href="#4-5-5-小结" class="headerlink" title="4.5.5 小结"></a>4.5.5 小结</h4><p><strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；表级锁更适合于以<code>查询</code>为主，只有<code>少量按索引</code>条件更新数据的应用，如Web应用。<br><strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高；行级锁则更适合于有<code>大量按索引</code>条件并发<code>更新少量</code>不同数据，同时又有<code>并发查询</code>的应用，如一些在线事务处理（OLTP）系统。<br><strong>页面锁：</strong>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>
<p>对于InnoDB表，<br>（1）InnoDB的<code>行锁是基于索引</code>实现的，如果不通过索引访问数据，InnoDB会使用表锁。<br>（2）介绍了InnoDB间隙锁（Next-key)机制，以及InnoDB使用间隙锁的原因。</p>
<p>在了解InnoDB锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：</p>
<ul>
<li>尽量使用较低的隔离级别； 精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li>
<li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li>
<li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁；</li>
<li>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会；</li>
<li>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响； 不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li>
<li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</li>
</ul>
<h3 id="4-6-MVCC"><a href="#4-6-MVCC" class="headerlink" title="4.6 MVCC"></a>4.6 MVCC</h3><p>本文来自<a href="https://blog.csdn.net/SnailMann/article/details/94724197?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166910079616782427452789%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166910079616782427452789&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-94724197-null-null.142%5Ev66%5Econtrol,201%5Ev3%5Econtrol_2,213%5Ev2%5Et3_esquery_v1&amp;utm_term=MVCC&amp;spm=1018.2226.3001.4187">正确的理解MySQL的MVCC及实现原理</a></p>
<h4 id="4-6-1-概念"><a href="#4-6-1-概念" class="headerlink" title="4.6.1 概念"></a>4.6.1 概念</h4><blockquote>
<p>MVCC</p>
</blockquote>
<p>**<code>MVCC</code>**，全称 <code>Multi-Version Concurrency Control</code> ，即<code>多版本并发控制</code>。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
<p><strong>MVCC</strong> 在 <strong>MySQL InnoDB</strong> 中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读</p>
<blockquote>
<p>快照读和当前读</p>
</blockquote>
<ul>
<li><code>当前读</code>：像 select lock in share mode (共享锁), select for update; update; insert; delete (排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是<code>记录的最新版本</code>，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行<code>加锁</code></li>
<li><code>快照读</code>：像不加锁的 select 操作就是快照读，即<code>不加锁的非阻塞读</code>；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC ,可以认为 <code>MVCC 是行锁的一个变种</code>，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li>
</ul>
<p><strong>说白了 MVCC 就是为了实现读-写冲突不加锁，而这个读指的就是<code>快照读</code>, 而非当前读，当前读实际上是一种加锁的操作，是悲观锁的实现</strong></p>
<blockquote>
<p>当前读，快照读和MVCC的关系</p>
</blockquote>
<ul>
<li>MVCC 多版本并发控制是 「<strong>维持一个数据的多个版本，使得读写操作没有冲突</strong>」 的概念，只是一个抽象概念，并非实现。</li>
<li>因为 MVCC 只是一个抽象概念，要实现这么一个概念，MySQL 就需要提供具体的功能去实现它，「<strong>快照读就是 MySQL 实现 MVCC 理想模型的其中一个非阻塞读功能</strong>」。而相对而言，当前读就是悲观锁的具体功能实现</li>
</ul>
<h4 id="4-6-2-作用"><a href="#4-6-2-作用" class="headerlink" title="4.6.2 作用"></a>4.6.2 作用</h4><blockquote>
<p>数据库并发场景有三种，分别为：</p>
</blockquote>
<ul>
<li><strong>读-读</strong>：不存在任何问题，也不需要并发控制</li>
<li><strong>读-写</strong>：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li>
<li><strong>写-写</strong>：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</li>
</ul>
<blockquote>
<p>MVCC 带来的好处是？</p>
</blockquote>
<p>多版本并发控制（MVCC）是一种用来解决读-写冲突的无锁并发控制，也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。 所以 MVCC 可以为数据库解决以下问题：</p>
<ul>
<li>在并发读写数据库时，可以做到在<code>读操作时不用阻塞写操作，写操作也不用阻塞读操作</code>，提高了数据库并发读写的性能</li>
<li>同时还可以<code>解决脏读，幻读，不可重复读等</code>事务隔离问题，但不能解决更新丢失问题</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>简而言之，MVCC 就是不能让数据库采用悲观锁这样性能不佳的形式去解决读-写冲突问题，而提出的解决方案，所以在数据库中，因为有了 MVCC，所以我们可以形成两个组合：</p>
<ul>
<li><strong>MVCC + 悲观锁</strong><br>MVCC解决读写冲突，悲观锁解决写写冲突</li>
<li><strong>MVCC + 乐观锁</strong><br>MVCC 解决读写冲突，乐观锁解决写写冲突</li>
</ul>
<p>这种组合的方式就可以最大程度的提高数据库并发性能，并解决读写冲突，和写写冲突导致的问题</p>
<h4 id="4-6-2-实现原理"><a href="#4-6-2-实现原理" class="headerlink" title="4.6.2 实现原理"></a>4.6.2 实现原理</h4><p>MVCC 模型在 MySQL 中的具体实现则是由 <code>3 个隐式字段</code>，<code>undo 日志</code> ， <code>Read View</code> 等去完成的。</p>
<h5 id="4-6-2-1-隐式字段"><a href="#4-6-2-1-隐式字段" class="headerlink" title="4.6.2.1 隐式字段"></a>4.6.2.1 隐式字段</h5><p>每行记录除了我们自定义的字段外，还有数据库隐式定义的 <code>DB_TRX_ID</code>, <code>DB_ROLL_PTR</code>, <code>DB_ROW_ID</code> 等字段</p>
<ul>
<li><code>DB_TRX_ID</code>：6 byte，最近修改(<code>修改/插入</code>)事务 ID：记录创建这条记录/最后一次修改该记录的事务 ID</li>
<li><code>DB_ROLL_PTR</code>：7 byte，回滚指针，指向这条记录的上一个版本（存储于 rollback segment 里）</li>
<li><code>DB_ROW_ID</code>6 byte，隐含的自增 ID（隐藏主键），如果数据表没有主键，InnoDB 会自动以DB_ROW_ID产生一个聚簇索引</li>
<li>实际还有一个删除 flag 隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除 flag 变了</li>
</ul>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221122165735609.png" alt="image-20221122165735609"></p>
<p>如上图，<code>DB_ROW_ID</code> 是数据库默认为该行记录生成的唯一隐式主键，<code>DB_TRX_ID</code> 是当前操作该记录的事务 ID ,而 <code>DB_ROLL_PTR</code> 是一个回滚指针，用于配合 undo日志，指向上一个旧版本。</p>
<h5 id="4-6-2-2-undo日志"><a href="#4-6-2-2-undo日志" class="headerlink" title="4.6.2.2 undo日志"></a>4.6.2.2 undo日志</h5><p>undo log 主要分为两种：</p>
<ul>
<li><code>insert undo log</code>：代表事务在 insert 新记录时产生的 undo log, 只在事务回滚时需要，并且在事务提交后可以被立即丢弃</li>
<li><code>update undo log</code>：事务在进行 update 或 delete 时产生的 undo log ; 不仅在事务回滚时需要，在快照读时也需要；所以不能随便删除，只有在快速读或事务回滚不涉及该日志时，对应的日志才会被 purge 线程统一清除</li>
</ul>
<p><strong>purge：</strong></p>
<pre class=" language-md"><code class="language-md">从前面的分析可以看出，为了实现 InnoDB 的 MVCC 机制，更新或者删除操作都只是设置一下老记录的 deleted_bit ，并不真正将过时的记录删除。

为了节省磁盘空间，InnoDB 有专门的 purge 线程来清理 deleted_bit 为 true 的记录。为了不影响 MVCC 的正常工作，purge 线程自己也维护了一个read view（这个 read view 相当于系统中最老活跃事务的 read view ）;如果某个记录的 deleted_bit 为 true ，并且 DB_TRX_ID 相对于 purge 线程的 read view 可见，那么这条记录一定是可以被安全清除的。
</code></pre>
<p>对 MVCC 有帮助的实质是 <code>update undo log</code> ，<code>undo log</code> 实际上就是存在 <code>rollback segment</code> 中旧记录链，<strong>它的执行流程如下：</strong></p>
<blockquote>
<p>① 有一个事务向person表插入了一条新记录，<code>name</code> 为 Jerry , <code>age</code> 为 24 岁，<code>隐式主键</code>是 1，<code>事务 ID </code>和<code>回滚指针</code>，我们假设为 NULL</p>
</blockquote>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221122171308607.png" alt="image-20221122171308607"></p>
<blockquote>
<p>② 现在来了一个<code>新事务 1 </code>对该记录的 <code>name</code> 做出了修改，改为 Tom</p>
</blockquote>
<ol>
<li>在事务 1 修改该行(记录)数据时，数据库会先对该行加<code>排他锁</code></li>
<li>然后把该行数据<code>拷贝到 undo log</code> 中，作为旧记录，既在 undo log 中有当前行的拷贝副本</li>
<li>拷贝完毕后，修改该行name为Tom，并且修改隐藏字段的事务 ID 为当前事务 1 的 ID, 我们默认从 1 开始，之后递增，回滚指针指向上一此所拷贝的记录行。</li>
<li>事务提交后，释放锁</li>
</ol>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221122171615183.png" alt="image-20221122171615183"></p>
<blockquote>
<p>③ 又来了个<code>事务 2 </code>修改<code> person 表</code>的同一个记录，将<code>age</code>修改为 30 岁</p>
</blockquote>
<ol>
<li>在事务2修改该行数据时，数据库也先为该行加锁</li>
<li>然后把该行数据拷贝到 undo log 中，作为旧记录，发现该行记录已经有undo log了，那么本次拷贝的数据将作为链表的表头，插在该行记录的 undo log 最前面</li>
<li>修改该行 age 为 30 岁，并且修改隐藏字段的事务 ID 为当前事务 2 的 ID, 那就是 2 ，回滚指针指向上次拷贝到 undo log 的副本记录</li>
<li>事务提交，释放锁</li>
</ol>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221122171646522.png" alt="image-20221122171646522"></p>
<p>从上面，我们就可以看出，不同事务或者相同事务的对同一记录的修改，会导致该记录的undo log成为一条<code>记录版本线性表</code>，既链表，undo log 的<strong>链首就是最新的旧记录，链尾就是最早的旧记录</strong>（当然就像之前说的该 undo log 的节点可能是会 purge 线程清除掉，向图中的第一条 insert undo log，其实在事务提交之后可能就被删除丢失了，不过这里为了演示，所以还放在这里）</p>
<h5 id="4-6-2-3-Read-View"><a href="#4-6-2-3-Read-View" class="headerlink" title="4.6.2.3 Read View"></a>4.6.2.3 Read View</h5><p>Read View 就是事务进行<code>快照读</code>操作的时候生产的<code>读视图 (Read View)</code>，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的 ID (当每个事务开启时，都会被分配一个 ID , 这个 ID 是递增的，所以最新的事务，ID 值越大)</p>
<p>所以我们知道 <code>Read View</code> 主要是用来做可见性判断的, 即当我们用select读取数据时，这一时刻的数据会有很多个版本，但我们并不知道读取哪个版本，这时就靠readview来对我们进行读取版本的限制</p>
<p>包含字段：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>active_trx_ids</td>
<td>用于维护 Read View 生成时刻系统 <strong>正活跃的事务 ID 列表</strong></td>
</tr>
<tr>
<td>old_trx_id</td>
<td><strong>是 active_trx_ids列表中事务 ID 最小（及最早的）的 ID</strong></td>
</tr>
<tr>
<td>new_trx_id</td>
<td><strong>是 active_trx_ids 列表中事务 ID 最大的 ID值 + 1</strong></td>
</tr>
<tr>
<td>creator_trx_id</td>
<td>创建这个 Read View 的事务 ID。</td>
</tr>
</tbody></table>
<pre class=" language-md"><code class="language-md">说明：只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为事务分配事务id，否则在一个只读事务中的事务id值都默认为0。
</code></pre>
<p>Read View遵循一个<code>可见性算法</code>，主要是把<code>操作（修改）当前生成ReadView视图的数据行最新一次事务</code>的 <code>DB_TRX_ID</code>（此事务ID）取出来，与系统当前其他活跃事务的 ID 去对比（由 Read View 维护），如果<code> DB_TRX_ID</code> 跟 Read View 的属性做了某些比较，不符合可见性，那就通过 <code>DB_ROLL_PTR </code>回滚指针去取出 Undo Log 中的<code> DB_TRX_ID</code> 再比较，即遍历链表的 <code>DB_TRX_ID</code>（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的 <code>DB_TRX_ID </code>, 那么这个 <code>DB_TRX_ID </code>所在的旧记录就是当前事务能看见的最新老版本，简单逻辑如下：</p>
<p><font>Tip：</font></p>
<p>此处的<code>DB_TRX_ID</code>并不是执行<code>快照读</code>时产生的事务ID，而是修改这行数据最新一次的事务ID。</p>
<ol>
<li><p>如果被访问版本的<code>DB_TRX_ID</code>属性值与ReadView中的 <code>creator_trx_id</code> 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本**<code>可以</code>**被当前事务访问。</p>
</li>
<li><p>如果被访问版本的<code>DB_TRX_ID</code>属性值<code>小于</code>ReadView中的 <code>old_trx_id</code>值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本**<code>可以</code>**被当前事务访问。</p>
</li>
<li><p>如果被访问版本的<code>DB_TRX_ID</code>属性值<code>大于或等于</code>ReadView中的 <code>new_trx_id</code>值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本**<code>不可以</code>**被当前事务访问。</p>
</li>
<li><p>如果被访问版本的<code>DB_TRX_ID</code>属性值在ReadView的 <code>old_trx_id</code>和 <code>new_trx_id</code>之间，那就需要判断一下<code>DB_TRX_ID</code>属性值是不是在 <code>active_trx_ids</code>列表中。</p>
<ul>
<li><p>​    如果<code>在</code>，说明创建ReadView时生成该版本的事务还是活跃的，该版本**<code>不可以</code>**被访问。</p>
</li>
<li><p>​    如果<code>不在</code>，说明创建ReadView时生成该版本的事务已经被提交，该版本**<code>可以</code>**被访问。</p>
</li>
</ul>
</li>
</ol>
<p>举例说明：原纪录 <code>amount = 100</code></p>
<table>
<thead>
<tr>
<th>事务1（id =1）</th>
<th>事务2</th>
<th>事务3(id = 3)</th>
<th>事务4(id = 4)</th>
</tr>
</thead>
<tbody><tr>
<td>开启事务</td>
<td>开启事务</td>
<td>开启事务</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><strong><code>update amount = 200</code></strong></td>
<td></td>
</tr>
<tr>
<td><strong><code>update amount = 300</code></strong></td>
<td></td>
<td>提交事务</td>
<td></td>
</tr>
<tr>
<td></td>
<td>①**<code>select amount;</code>** 开始快照读，生成**<code>Read View</code>**</td>
<td></td>
<td></td>
</tr>
<tr>
<td>提交事务</td>
<td></td>
<td></td>
<td>开启事务</td>
</tr>
<tr>
<td></td>
<td>②**<code>select amount;</code>**</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><strong><code>update amount = 400;</code></strong></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td></td>
<td>③**<code>select amount;</code>**</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>请问三次<code>select amount;</code> 快照读到的值分别是多少，为什么？</strong></p>
<p><strong>undo版本链路图:</strong></p>
<p><img src="D:\Blog\blog\source\images\2022-11-27-MySQL知识点\image-20221122182144917.png" alt="image-20221122182144917"></p>
<blockquote>
<p>①、第一次</p>
</blockquote>
<p>active_trx_ids(1)；old_trx_id(1) ； new_trx_id(4)</p>
<ol>
<li><p><code>DB_TRX_ID(1) = old_trx_id(1)</code>，说明当前事务ID正在修改，即事务1还未结束，事务2对其修改还不可见，如果可见，则会出现脏读。</p>
</li>
<li><p>当前记录不可见，再根据回滚指针追踪到上个版本记录，如图undo日志内金额为200的行，此时再通过Read View进行可见性判断。</p>
<ul>
<li><code>DB_TRX_ID(3) &gt; old_trx_id(1)</code>:不确定</li>
<li><code>DB_TRX_ID(3) &lt; new_trx_id(4)</code>:不确定</li>
<li>DB_TRX_ID(3)不在active_trx_ids(1)中，说明是已提交的事务，是可见的。</li>
</ul>
<p><strong>金额为200</strong></p>
</li>
</ol>
<blockquote>
<p>②、第二次</p>
</blockquote>
<p>DB_TRX_ID(1)</p>
<p>事务1提交事务，不过undo表与当前行数据无变化，对事务1的**<code>Read View</code><strong>的数据也不会变化，因为RR模式下，</strong><code>Read View</code>** 只会在第一次快照读时生成，后面几次快照读不会生成新的 **<code>Read View</code>**，也不会改动之前Read View的值。</p>
<p>当前行数据与**<code>Read View</code>** 都无变化，那么可见性判断也同①一致，读取到的金额为200。</p>
<blockquote>
<p>③、第三次</p>
</blockquote>
<ul>
<li>当前行 <code>DB_TRX_ID(4) &gt; old_trx_id(1)</code>，不确定；</li>
<li><code>DB_TRX_ID(4) &gt;= new_trx_id(4)</code>，说明当前行是被生成**<code>Read View</code>**之后出现的事务修改的，这种未来的数据肯定是不可见的。</li>
<li>再接着追溯，根据链表到DB_TRX_ID(1），<code>DB_TRX_ID(1）= old_trx_id(1)</code>且在活跃事务表中，说明还未提交，依然不可见，继续追溯到DB_TRX_ID(3)</li>
<li>就与①中追溯的过程相差不大了，最终读取的金额也是为200。</li>
</ul>
<h5 id="4-6-2-4-RC-RR-级别下的-InnoDB-快照读"><a href="#4-6-2-4-RC-RR-级别下的-InnoDB-快照读" class="headerlink" title="4.6.2.4 RC , RR 级别下的 InnoDB 快照读"></a>4.6.2.4 RC , RR 级别下的 InnoDB 快照读</h5><ul>
<li>在 RR 级别下的某个事务的对某条记录的第一次快照读会创建一个快照及 Read View, 将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个 Read View，所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个 Read View，所以对之后的修改不可见；</li>
<li>即 RR 级别下，快照读生成 Read View 时，Read View 会记录此时所有其他活动事务的快照，这些事务的修改对于当前事务都是不可见的。而早于Read View创建的事务所做的修改均是可见</li>
<li>而在 RC 级别下的，事务中，每次快照读都会新生成一个快照和 Read View , 这就是我们在 RC 级别下的事务中可以看到别的事务提交的更新的原因</li>
</ul>
<blockquote>
<p>总之</p>
</blockquote>
<ul>
<li>Read Commited（读已提交）：<code>RC</code>的隔离级别下，每个快照读都会生成并<code>获取最新的readview</code>。</li>
<li>Read Repeated（不可重复读）：<code>RR</code>的隔离级别下，只有在<code>同一个事务</code>的<code>第一个快照读</code>才会<code>创建readview</code>，之后的每次快照读都使用的同一个readview，所以每次的<code>查询结果都是一样</code>的。</li>
</ul>
<h2 id="五、调优"><a href="#五、调优" class="headerlink" title="五、调优"></a>五、调优</h2><h3 id="5-1-设计优化"><a href="#5-1-设计优化" class="headerlink" title="5.1 设计优化"></a>5.1 设计优化</h3><h4 id="5-1-0-三少一多"><a href="#5-1-0-三少一多" class="headerlink" title="5.1.0 三少一多"></a>5.1.0 三少一多</h4><ul>
<li>数据表的个数越少越好</li>
<li>数据表中的字段个数越少越好</li>
<li>数据表中联合主键的字段个数越少越好</li>
<li>使用主键和外键越多越好</li>
</ul>
<pre class=" language-md"><code class="language-md">注意：这个原则并不是绝对的，有时候我们需要牺牲数据的冗余度来换取数据处理的效率。
</code></pre>
<h4 id="5-1-1-尽量使用数值替代字符串类型"><a href="#5-1-1-尽量使用数值替代字符串类型" class="headerlink" title="5.1.1 尽量使用数值替代字符串类型"></a>5.1.1 尽量使用数值替代字符串类型</h4><blockquote>
<p>正例</p>
</blockquote>
<p>主键（id）：<code>primary key</code>优先使用数值类型<code>int</code>，<code>bigint unsigned</code><br>性别（sex）：0代表女，1代表男；数据库没有布尔类型，mysql推荐使用<code>tinyint</code></p>
<blockquote>
<p>理由</p>
</blockquote>
<ul>
<li>因为引擎在处理查询和连接时会逐个比较字符串中每一个字符；</li>
<li>而对于数字型而言只需要比较一次就够了；</li>
<li>字符会降低查询和连接的性能，并会增加存储开销；</li>
</ul>
<h4 id="5-1-2-使用varchar代替char"><a href="#5-1-2-使用varchar代替char" class="headerlink" title="5.1.2 使用varchar代替char"></a>5.1.2 使用varchar代替char</h4><blockquote>
<p>反例</p>
</blockquote>
<p><code>address</code> char(100) DEFAULT NULL COMMENT ‘地址’</p>
<blockquote>
<p>正例</p>
</blockquote>
<p><code>address</code> varchar(100) DEFAULT NULL COMMENT ‘地址’</p>
<blockquote>
<p>理由</p>
</blockquote>
<ul>
<li>varchar变长字段按数据内容实际长度存储，存储空间小，可以节省存储空间；</li>
<li>char按声明大小存储，不足补空格；</li>
<li>其次对于查询来说，在一个相对较小的字段内搜索，效率更高；</li>
</ul>
<h4 id="5-1-3-索引一般5个以内"><a href="#5-1-3-索引一般5个以内" class="headerlink" title="5.1.3 索引一般5个以内"></a>5.1.3 索引一般5个以内</h4><ul>
<li>索引并不是越多越好，虽其提高了查询的效率，但却会降低插入和更新的效率；</li>
<li>索引可以理解为一个就是一张表，其可以存储数据，其数据就要占空间；</li>
<li>索引表的数据是排序的，排序也是要花时间的；</li>
<li>insert或update时有可能会重建索引，如果数据量巨大，重建将进行记录的重新排序，所以建索引需要慎重考虑，视具体情况来定；</li>
<li>一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否有存在的必要；</li>
</ul>
<h4 id="5-1-4-复合索引最左特性"><a href="#5-1-4-复合索引最左特性" class="headerlink" title="5.1.4 复合索引最左特性"></a>5.1.4 复合索引最左特性</h4><ul>
<li>复合索引也称为联合索引，当我们创建一个联合索引的时候，如<code>(k1,k2,k3)</code>，相当于创建了<code>(k1)</code>、<code>(k1,k2)</code>和<code>(k1,k2,k3)</code>三个索引，这就是最左匹配原则。</li>
<li>联合索引不满足最左原则，索引一般会失效。</li>
</ul>
<h4 id="5-1-5-尽量把所有列定义为NOT-NULL"><a href="#5-1-5-尽量把所有列定义为NOT-NULL" class="headerlink" title="5.1.5 尽量把所有列定义为NOT NULL"></a>5.1.5 尽量把所有列定义为NOT NULL</h4><ul>
<li><p><code>NOT NULL</code>列更节省空间，<code>NULL</code>列需要一个额外字节作为判断是否为 <code>NULL</code>的标志位。</p>
</li>
<li><p><code>NULL</code>列需要注意空指针问题，<code>NULL</code>列在计算和比较的时候，需要注意空指针问题。</p>
</li>
<li><p>对于<code>varchar</code>可以设置默认值为<code>空字符串</code>，<code>int</code>的话设置为<code>0</code>（特殊业务除外）</p>
</li>
</ul>
<h4 id="5-1-6-统一使用utf8-utf8mb4"><a href="#5-1-6-统一使用utf8-utf8mb4" class="headerlink" title="5.1.6 统一使用utf8/utf8mb4"></a>5.1.6 统一使用utf8/utf8mb4</h4><ul>
<li>可以避免乱码问题。</li>
<li>可以避免，不同字符集比较转换，导致的索引失效问题。</li>
<li>utf8不支持表情包，utf8mb4支持</li>
</ul>
<h3 id="5-2-查询优化"><a href="#5-2-查询优化" class="headerlink" title="5.2 查询优化"></a>5.2 查询优化</h3><h4 id="5-2-0-Count"><a href="#5-2-0-Count" class="headerlink" title="5.2.0 Count()"></a>5.2.0 Count()</h4><table>
<thead>
<tr>
<th>用法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>count（主键）</td>
<td>InnoDB 会遍历整张表，把每一行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加(主键不可能为null)；</td>
</tr>
<tr>
<td>count(*)</td>
<td>InnoDB不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加;</td>
</tr>
<tr>
<td>count（字段）</td>
<td>没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加，有not null 约束：InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加；</td>
</tr>
<tr>
<td>count（数字）</td>
<td>InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字“1”进去，直接按行进行累加；</td>
</tr>
</tbody></table>
<p><strong>按照效率排序来看，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽量使用 <code>count(*)</code></strong></p>
<h4 id="5-2-1-关联查询优化"><a href="#5-2-1-关联查询优化" class="headerlink" title="5.2.1 关联查询优化"></a>5.2.1 关联查询优化</h4><ul>
<li>保证被驱动表的JOIN字段已经创建了索引</li>
<li>需要JOIN 的字段，数据类型保持绝对一致。</li>
<li><code>LEFT JOIN</code>时，选择小表作为驱动表， 大表作为被驱动表 。减少外层循环的次数。</li>
<li><code>INNER JOIN</code>时，MySQL会自动将小结果集的表选为驱动表 。选择相信MySQL优化策略。</li>
<li>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数)</li>
<li>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用 JOIN 来代替子查询。</li>
<li>衍生表建不了索引</li>
</ul>
<h4 id="5-2-2-子查询优化"><a href="#5-2-2-子查询优化" class="headerlink" title="5.2.2 子查询优化"></a>5.2.2 子查询优化</h4><p>MySQL从4.1版本开始支持子查询，使用子查询可以进行SELECT语句的嵌套查询，即一个SELECT查询的结果作为另一个SELECT语句的条件。 子查询可以一次性完成很多逻辑上需要多个步骤才能完成的SQL操作 。</p>
<p><strong>子查询是</strong> <strong>MySQL</strong> <strong>的一项重要的功能，可以帮助我们通过一个</strong> <strong>SQL</strong> <strong>语句实现比较复杂的查询。但是，子查询的执行效率不高。</strong>原因：</p>
<ul>
<li>① 执行子查询时，MySQL需要为内层查询语句的查询结果<code>建立一个临时表</code>，然后外层查询语句从临时表中查询记录。查询完毕后，<code>再撤销这些临时表</code> 。这样会消耗过多的CPU和IO资源，产生大量的慢查询。</li>
<li>② 子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都<code>不会存在索引</code>，所以查询性能会受到一定的影响。</li>
<li>③ 对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</li>
</ul>
<p>在MySQ中，可以使用连接（<code>JOIN</code>）查询来替代<code>子查询</code>。连接查询不需要建立临时表 ，其 速度比子查询要快 ，如果查询中使用索引的话，性能就会更好。</p>
<pre class=" language-md"><code class="language-md">结论：尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx WHERE xx IS NULL替代
</code></pre>
<h4 id="5-2-3-排序优化"><a href="#5-2-3-排序优化" class="headerlink" title="5.2.3 排序优化"></a>5.2.3 排序优化</h4><ul>
<li>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中<code>避免全表扫描</code>，在 ORDER BY 子句<code>避免使用 FileSort 排序 </code>。当然，某些情况下全表扫描，或者 FileSort 排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。</li>
<li>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用<code>单列索引</code>；如果不同就使用<code>联合索引</code>。</li>
<li>无法使用 Index 时，需要对FileSort 方式进行调优。尝试提高<code>（sort_buffer_size、max_length_for_sort_data)</code>，排序时<code>select *</code> 是一个大忌。最好只Query需要的字段。</li>
</ul>
<h4 id="5-2-4-分组优化"><a href="#5-2-4-分组优化" class="headerlink" title="5.2.4 分组优化"></a>5.2.4 分组优化</h4><ul>
<li>group by 使用索引的原则几乎跟order by一致 ，group by 即使没有过滤条件用到索引，也可以直接<br>使用索引。</li>
<li>group by 先排序再分组，遵照索引建的最佳左前缀法则</li>
<li>当无法使用索引列，增大<code>max_length_for_sort_data</code>和 <code>sort_buffer_size</code> 参数的设置</li>
<li>where效率高于having，能写在where限定的条件就不要写在having中了</li>
<li>减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>Order by、group by、distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>
<li>包含了<code>order by、group by、distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sping Boot知识点</title>
    <url>/2022/11/27/Sping%20Boot%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<html><head></head><body><h1 id="SpringBoot知识点"><a href="#SpringBoot知识点" class="headerlink" title="SpringBoot知识点"></a>SpringBoot知识点</h1><blockquote>
<p>引言</p>
</blockquote>
<ol>
<li>Springboot和Spring的常用注解</li>
<li>自动配置（延迟加载、初始化加载）</li>
<li>统一异常处理、统一返回格式、Restful、事务处理（单机式、分布式）</li>
<li>springboot其他技术（<strong>Redis</strong>、RocketMQ）</li>
<li>IOC、AOP、SPI</li>
<li>Junit单元测试（所有测试）</li>
<li>统一日志输出 （在controler层打印入参信息和打印返回结果信息、自定义starter，引入service-demo）</li>
</ol>
<h2 id="一、常用注解"><a href="#一、常用注解" class="headerlink" title="一、常用注解"></a>一、常用注解</h2><h3 id="1-1-Spring"><a href="#1-1-Spring" class="headerlink" title="1.1 Spring"></a>1.1 Spring</h3><h4 id="1-1-1-给容器中注入组件"><a href="#1-1-1-给容器中注入组件" class="headerlink" title="1.1.1 给容器中注入组件"></a>1.1.1 给容器中注入组件</h4><blockquote>
<p>包扫描+组件标志注解</p>
</blockquote>
<p><code>@Component</code>：泛指各种组件，当我们的类不属于各种归类的时候（不属于@Controller、@Services、@Repository等的时候），我们就可以使用@Component来标注这个类。</p>
<p><code>@Controller</code>：注入服务，用于标注控制层，相当于<a href="https://so.csdn.net/so/search?q=struts&amp;spm=1001.2101.3001.7020">struts</a>中的action层</p>
<p><code>@Service </code>：注入dao用于标注服务层，主要用来进行业务的逻辑处理</p>
<p><code>@Repository</code>：实现dao访问,用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件，不可以单独使用（Spring原生注解）</p>
<p><code>@Mapper</code>：通过mapper.xml里面的namespace属性对应相关的mapper类，spring将动态的生成Bean后注入到ServiceImpl中，属于mybatis注解</p>
<blockquote>
<p>@Bean</p>
</blockquote>
<p><code>@Bean</code>：产生一个Bean对象，然后将这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。</p>
<p>必须标注在有<code>@Configuration</code>标注的类上的方法</p>
<p>导入第三方包里面的注解</p>
<blockquote>
<p><code>@Import</code></p>
</blockquote>
<p><strong>@Import特性</strong></p>
<ul>
<li>@Import只能用在类上 ，@Import通过快速导入的方式实现把实例加入spring的IOC容器中</li>
<li>@Import注解可以用于导入第三方包 ，当然@Bean注解也可以，但是@Import注解快速导入的方式更加便捷</li>
</ul>
<p><strong>@Import注解有三种用法</strong></p>
<ul>
<li>@Import(要导入到容器中的组件)；</li>
<li>ImportSelector(返回需要导入的组件的全类名数组)</li>
<li>ImportBeanDefinitionRegistrar(手动注册bean到容器中)</li>
</ul>
<h4 id="1-1-2-注入bean的注解"><a href="#1-1-2-注入bean的注解" class="headerlink" title="1.1.2 注入bean的注解"></a>1.1.2 注入bean的注解</h4><p><code>@Autowired</code>：由spring提供</p>
<p>@Autowired可以标注在属性上、方法上和构造器上，来完成自动装配。spring自动将匹配到的属性值进行注入</p>
<p><code>@Inject</code>：由JSR-330提供，@Inject用法和@Autowired一样 （JSR是<code>Java Specification Requests</code>的缩写，意思是Java 规范提案）</p>
<p><code>@Resource</code>：由JSR-250提供</p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@AutoWired</td>
<td>@Autowired默认按类型装配，如果发现找到多个bean，则按照name方式比对，如果还有多个，则报出异常</td>
</tr>
<tr>
<td align="center">@Qualifier</td>
<td>spring的注解，按名字注入 一般当出现两个及以上bean时,不知道要注入哪个，结合@AutoWired使用</td>
</tr>
<tr>
<td align="center">@Resource</td>
<td>默认按名称注入例如@Resource(name = “jaqen”)则根据name属性注入找不到则报错，若无name属性则根据属性名称注入，如果匹配不成功则按照类型匹配，匹配不成功则报错。</td>
</tr>
</tbody></table>
<h4 id="1-1-3-初始化和销毁方法"><a href="#1-1-3-初始化和销毁方法" class="headerlink" title="1.1.3 初始化和销毁方法"></a>1.1.3 初始化和销毁方法</h4><ol>
<li><p>通过<code>@Bean(initMethod="init",destoryMethod="destory")</code>方法</p>
</li>
<li><p>通过bean实现InitializingBean来定义初始化逻辑，DisposableBean定义销毁逻辑</p>
</li>
<li><p>可以使用JSR-250：<code>@PostConstruct</code>：初始化方法；<code>@PreDestory</code>：销毁方法。（推荐）</p>
</li>
<li><p>BeanPostProcessor：bean的后置处理器，在bean初始化前后进行一些处理工作</p>
</li>
</ol>
<p>postProcessBeforeInitialization：在初始化之前工作</p>
<p>postProcessAfterInitialization：在初始化工作之后工作</p>
<h4 id="1-1-4-Java配置类相关注解"><a href="#1-1-4-Java配置类相关注解" class="headerlink" title="1.1.4 Java配置类相关注解"></a>1.1.4 Java配置类相关注解</h4><p><code>@configuration</code>：声明当前类为配置类</p>
<p><code>@Bean</code>：注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式</p>
<p><code>@CompoentScan</code>：用于对Component进行扫描</p>
<h4 id="1-1-5-切面AOP注解"><a href="#1-1-5-切面AOP注解" class="headerlink" title="1.1.5 切面AOP注解"></a>1.1.5 切面AOP注解</h4><p>Spring支持AspectJ的注解式切面编程。</p>
<ul>
<li><code>@Aspect </code>声明一个切面</li>
<li><code>@After</code> 在方法执行之后执行（方法上）</li>
<li><code>@Before</code> 在方法执行之前执行（方法上）</li>
<li><code>@Around </code>在方法执行之前与之后执行（方法上）</li>
<li><code>@PointCut</code> 声明切点</li>
</ul>
<p>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持</p>
<h4 id="1-1-6-Bean的属性支持"><a href="#1-1-6-Bean的属性支持" class="headerlink" title="1.1.6 @Bean的属性支持"></a>1.1.6 @Bean的属性支持</h4><p><code>@Scope</code>设置类型包括：</p>
<p>设置Spring容器如何新建Bean实例（方法上，得有@Bean）</p>
<ul>
<li>① Singleton（单例,一个Spring容器中只有一个bean实例，默认模式）</li>
<li>② Protetype（每次调用新建一个bean）</li>
<li>③ Request（web项目中，给每个http request新建一个bean）</li>
<li>④ Session（web项目中，给每个http session新建一个bean）</li>
<li>⑤ GlobalSession（给每一个 global http session新建一个Bean实例）</li>
</ul>
<p><code>@Lazy</code> : 表明一个bean 是否延迟加载，可以作用在方法上，表示这个方法被延迟加载；可以作用在@Component (或者由@Component 作为原注解) 注释的类上，表明这个类中所有的bean 都被延迟加载。如果没有@Lazy注释，或者@Lazy 被设置为false，那么该bean 就会急切渴望被加载；除了上面两种作用域，@Lazy 还可以作用在@Autowired和@Inject注释的属性上，在这种情况下，它将为该字段创建一个惰性代理，作为使用ObjectFactory或Provider的默认方法。</p>
<h4 id="1-1-7-Value"><a href="#1-1-7-Value" class="headerlink" title="1.1.7 @Value"></a>1.1.7 @Value</h4><blockquote>
<p>支持以下注入：</p>
</blockquote>
<ul>
<li>注入普通字符</li>
<li>注入操作系统属性</li>
<li>注入表达式结果</li>
<li>注入其它bean属性</li>
<li>注入文件资源</li>
<li>注入网站资源</li>
<li>注入配置文件</li>
</ul>
<blockquote>
<p>@Value三种情况的用法</p>
</blockquote>
<ul>
<li>${}是去找外部配置的参数，将值赋过来</li>
<li>#{}是SpEL表达式，去寻找对应变量的内容</li>
<li>#{}直接写字符串就是将字符串的值注入进去</li>
</ul>
<h4 id="1-1-8-条件装配"><a href="#1-1-8-条件装配" class="headerlink" title="1.1.8 条件装配"></a>1.1.8 条件装配</h4><p><code>@Profile</code></p>
<p>指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件。例如：</p>
<p>@Profile(“dev”)、@Profile(“test”)、@Profile(“master”)、</p>
<p><code>@Conditional</code></p>
<ul>
<li>@Conditional注解是一个条件装配注解，主要用于限制@Bean注解在什么时候才生效。以指定的条件形式控制bean的创建。</li>
<li>都可以加在类或者方法上；加载类上的含义所有的方法都按照这个条件装配、加载方法上只有该方法进行条件装配。</li>
<li>通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。</li>
<li><code>@ConditionalOnBean</code>子注解（即已经被实现Condition接口，所定义好的注解）只有当满足此Bean后才会被创建。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@ConditionalOnBean</td>
<td align="center">当容器里有指定的bean的条件下</td>
</tr>
<tr>
<td align="left">@ConditionalOnMissingBean</td>
<td align="center">当容器里不存在指定bean的条件下</td>
</tr>
<tr>
<td align="left">@ConditionalOnClass</td>
<td align="center">当类路径下有指定类的条件下</td>
</tr>
<tr>
<td align="left">@ConditionalOnMissingClass</td>
<td align="center">当类路径下不存在指定类的条件下</td>
</tr>
<tr>
<td align="left">@ConditionalOnProperty</td>
<td align="center">指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true</td>
</tr>
</tbody></table>
<h3 id="1-2-SpringBoot"><a href="#1-2-SpringBoot" class="headerlink" title="1.2 SpringBoot"></a>1.2 SpringBoot</h3><h4 id="1-2-1-SpringBootAppliation"><a href="#1-2-1-SpringBootAppliation" class="headerlink" title="1.2.1 @SpringBootAppliation"></a>1.2.1 @SpringBootAppliation</h4><p>由三个主要注解组合而成：<code>@SpringBootConfiguration</code>+<code>@EnableAutoConfiguration</code>+<code>@ComponentScan</code></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>

<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span>AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre>
<p><code>@SpringBootConfiguration</code>:表示这个类可以作为配置类使用；</p>
<p><code>@EnableAutoConfiguration</code>:启动自动注入，是springboot实现自动化配置的核心注解，通过这个注解把spring应用所需的bean注入容器中</p>
<p><code>@ComponentScan</code>： 扫描被 @Component (@Service、@Controller) 注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。</p>
<hr>
<h4 id="1-2-2-WEB"><a href="#1-2-2-WEB" class="headerlink" title="1.2.2 WEB"></a>1.2.2 WEB</h4><p><code>@Controller</code>：控制层标注</p>
<p><code>@ResponseBody</code>：支持将返回值放到response内，而不是一个页面，通常用户返回json数据。</p>
<p><code>@RestController</code>：该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p>
<hr>
<h4 id="1-2-3-请求注解"><a href="#1-2-3-请求注解" class="headerlink" title="1.2.3 请求注解"></a>1.2.3 请求注解</h4><p><code>@RequestMapping</code>：用于映射web请求，包括访问路径和参数。get请求或者post请求都可以</p>
<p><code>@GetMapping</code>：只能用于Get请求</p>
<p><code>@PostMapping</code>：只能用于Post请求</p>
<p><code>@PutMapping</code></p>
<p><code>@DeleteMapping</code></p>
<p><code>@PatchMapping</code></p>
<hr>
<h4 id="1-2-4-接收参数注解"><a href="#1-2-4-接收参数注解" class="headerlink" title="1.2.4 接收参数注解"></a>1.2.4 接收参数注解</h4><p><code>@RequestBody</code>：允许request的参数在request体中，而不是在直接连接的地址后面。（放在参数前）</p>
<p><code>@PathVariable</code>：用于接收路径参数，比如<code>@RequestMapping(“/hello/{name}”)</code>声明的路径，将注解放在参数前，即可获取该值，通常作为Restful的接口实现方法。</p>
<p><code>@RequestParam</code>：主要用于<strong>接收url?后面的参数</strong>，get或post请求，只要后面的url?有参数都可以获取到对应的参数，@RequestParam注解有几个比较重要的属性，required 表示是否必须，默认为 true。defaultValue 可设置请求参数的默认值。value 为接收url的参数名（相当于key值）<br><code>@RequestHeader</code></p>
<p><code>@CookieValue</code></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@RequestParam</td>
<td>获取查询参数，即url?name=这种形式</td>
</tr>
<tr>
<td>@PathVariable</td>
<td>获取路径参数，即url/{id}这种形式。</td>
</tr>
<tr>
<td>@RequestBody</td>
<td>获取Body的参数，一般用于post获取参数</td>
</tr>
<tr>
<td>@RequestHeader</td>
<td>获取请求头的信息</td>
</tr>
<tr>
<td>@CookieValue</td>
<td>获取Cookie的信息</td>
</tr>
</tbody></table>
<h4 id="1-2-5-参数校验"><a href="#1-2-5-参数校验" class="headerlink" title="1.2.5 参数校验"></a>1.2.5 参数校验</h4><p><strong>在需要验证的参数加上<code>@Valid</code>注解，如果验证失败，他将抛出</strong><code>MethodArgumentNotValidException</code>，也可以添加message信息，来指定错误。例如：@NotEmpty(message = “xxx不能为空”)</p>
<p><code>@NotEmpty</code> 被注释的字符串的不能为 null 也不能为空<br><code>@NotBlank</code> 被注释的字符串非 null，并且必须包含一个非空白字符<br><code>@Null</code> 被注释的元素必须为 null<br><code>@NotNull</code> 被注释的元素必须不为 null<br><code>@AssertTrue</code> 被注释的元素必须为 true<br><code>@AssertFalse</code> 被注释的元素必须为 false<br><code>@Pattern(regex=,flag=)</code>被注释的元素必须符合指定的正则表达式<br><code>@Email</code> 被注释的元素必须是 Email 格式。<br><code>@Min(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br><code>@Max(value)</code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br><code>@DecimalMin(value)</code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br><code>@DecimalMax(value) </code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br><code>@Size(max=, min=)</code>被注释的元素的大小必须在指定的范围内<br><code>@Digits (integer, fraction)</code>被注释的元素必须是一个数字，其值必须在可接受的范围内<br><code>@Past</code>被注释的元素必须是一个过去的日期<br><code>@Future </code>被注释的元素必须是一个将来的日期</p>
<h4 id="1-2-6-异常、事务注解"><a href="#1-2-6-异常、事务注解" class="headerlink" title="1.2.6 异常、事务注解"></a>1.2.6 异常、事务注解</h4><blockquote>
<p>异常</p>
</blockquote>
<p><code>@ControllerAdvice</code>：本质上是一个Component，因此也会被当成组建扫描。</p>
<ul>
<li>全局异常处理：配合<code>@ExceptionHandler</code>：用于全局处理控制器里的异常</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
    * 请求参数异常处理
    */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>MethodArgumentNotValidException ex<span class="token punctuation">,</span>                                                           HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>全局数据绑定：配合<code>@ModelAttribute</code></li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//法一</span>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalHandler</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@ModelAttribute</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">presetParam</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"globalAttr"</span><span class="token punctuation">,</span><span class="token string">"this is a global attribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//法二：绑定数据</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdviceController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"methodTwo"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"globalAttr"</span><span class="token punctuation">)</span> String globalAttr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> globalAttr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>全局数据预处理：配合<code>@InitBinder</code>实现对请求参数预处理</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//处理类</span>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalHandler</span><span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@InitBinder</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processParam</span><span class="token punctuation">(</span>WebDataBinder dataBinder<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">/*
         * 创建一个字符串微调编辑器
         * 参数{boolean emptyAsNull}: 是否把空字符串("")视为 null
         */</span>  
        StringTrimmerEditor trimmerEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTrimmerEditor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//预处理绑定数据配合@ModelAttribute</span>
    <span class="token annotation punctuation">@InitBinder</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init1</span><span class="token punctuation">(</span>WebDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        binder<span class="token punctuation">.</span><span class="token function">setFieldDefaultPrefix</span><span class="token punctuation">(</span><span class="token string">"user."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@InitBinder</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init2</span><span class="token punctuation">(</span>WebDataBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        binder<span class="token punctuation">.</span><span class="token function">setFieldDefaultPrefix</span><span class="token punctuation">(</span><span class="token string">"book."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//Controller</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span> Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"name："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | age："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span>
                <span class="token operator">+</span> <span class="token string">"name："</span> <span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | price："</span> <span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<hr>
<blockquote>
<p>事务</p>
</blockquote>
<p><code>@Transactional</code>：一般用在Service层，表示开启事务</p>
<p>Exception 分为运行时异常 RuntimeException 和非运行时异常。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚。</p>
<p>@Transactional 注解一般用在可以作用在类或者方法上。</p>
<ul>
<li>作用于类：当把@Transactional 注解放在类上时，表示所有该类的public 方法都配置相同的事务属性信息。</li>
<li>作用于方法：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息</li>
</ul>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</td>
</tr>
<tr>
<td>propagation</td>
<td>事务的传播行为，默认值为 REQUIRED。</td>
</tr>
<tr>
<td>isolation</td>
<td>事务的隔离度，默认值采用 DEFAULT。</td>
</tr>
<tr>
<td>timeout</td>
<td>事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td>
</tr>
<tr>
<td>read-only</td>
<td>指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td>
</tr>
<tr>
<td>rollback-for</td>
<td>用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td>
</tr>
<tr>
<td>no-rollback- for</td>
<td>抛出 no-rollback-for 指定的异常类型，不回滚事务。</td>
</tr>
</tbody></table>
<h4 id="1-2-7-读取配置"><a href="#1-2-7-读取配置" class="headerlink" title="1.2.7 读取配置"></a>1.2.7 读取配置</h4><p><code>@value</code></p>
<p>使用：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> String studentName<span class="token punctuation">;</span>
</code></pre>
<p><code>@ConfigurationProperties</code></p>
<p>yml配置文件：</p>
<pre class=" language-yml"><code class="language-yml">student:
    name: Jaqen
    age: 22
</code></pre>
<p>使用：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">"student"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//对应配置文件类字段名小写</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//类的字段名和配置文件的字段名保持一致</span>
    String name<span class="token punctuation">;</span>
    Integer age<span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//get和set方法必须有才能注入</span>
<span class="token punctuation">}</span>
</code></pre>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Value</td>
<td>用于获取bean的属性，一般用于读取配置文件的数据，作用在变量上</td>
</tr>
<tr>
<td>@ConfigurationProperties</td>
<td>用于注入Bean属性，然后再通过当前Bean获取注入值，作用在类上</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>用于指定要读取的配置文件，可以和@Value或@ConfigurationProperties配合使用</td>
</tr>
</tbody></table>
<h2 id="二、自动配置"><a href="#二、自动配置" class="headerlink" title="二、自动配置"></a>二、自动配置</h2><h3 id="2-1-发现问题"><a href="#2-1-发现问题" class="headerlink" title="2.1 发现问题"></a>2.1 发现问题</h3><p>Spring 一直在飞速的发展，如今已经成为了在Java EE开发中真正意义上的标准，但是随着技术的发展，Java EE使用 Spring 逐渐变得笨重起来，大量的 XML 文件存在于项目之中。<strong>繁琐的配置，整合第三方框架的配置问题，导致了开发和部署效率的降低。</strong></p>
<p>而SpringBoot集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是<strong>零配置的开箱即用（out-of-the-box）</strong>，大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。</p>
<h3 id="2-2-提出方案"><a href="#2-2-提出方案" class="headerlink" title="2.2 提出方案"></a>2.2 提出方案</h3><h4 id="2-2-1-SpringBoot的优点"><a href="#2-2-1-SpringBoot的优点" class="headerlink" title="2.2.1 SpringBoot的优点"></a>2.2.1 SpringBoot的优点</h4><img src="..\images\2022-11-27-Sping-Boot知识点\image-20220726172201507.png" alt="image-20220726172201507" style="zoom:67%;">

<blockquote>
<p>良好的基因</p>
</blockquote>
<p>Spring Boot 是伴随着 Spring 4.0 诞生的，从字面理解，Boot是引导的意思，因此 Spring Boot 旨在帮助开发者快速搭建 Spring 框架。Spring Boot 继承了原有 Spring 框架的优秀基因，使 Spring 在使用中更加方便快捷。</p>
<blockquote>
<p>简化编码</p>
</blockquote>
<p>再新建一个web项目，Spring Boot 会帮助开发者快速启动一个 web 容器，我们只需要在 pom 文件中添加如下一个 starter-web 依赖即可。</p>
<blockquote>
<p>简化配置</p>
</blockquote>
<p>Spring 虽然使Java EE轻量级框架，但由于其繁琐的配置，一度被人认为是“配置地狱”。各种XML、Annotation配置会让人眼花缭乱，而且配置多的话，如果出错了也很难找出原因。Spring Boot更多的是采用 Java Config 的方式，对 Spring 进行配置。</p>
<blockquote>
<p>简化部署</p>
</blockquote>
<p>在使用 Spring 时，项目部署时需要我们在服务器上部署 tomcat，然后把项目打成 war 包扔到 tomcat里，在使用 Spring Boot 后，我们不需要在服务器上去部署 tomcat，因为 Spring Boot 内嵌了 tomcat，我们只需要将项目打成 jar 包，使用 java -jar xxx.jar一键式启动项目。</p>
<blockquote>
<p> 简化监控</p>
</blockquote>
<p>通过引入 spring-boot-start-actuator 依赖，直接使用 REST 方式来获取进程的运行期性能参数，从而达到监控的目的，比较方便。但是 Spring Boot 只是个微框架，没有提供相应的服务发现与注册的配套功能，没有外围监控集成方案，没有外围安全管理方案，所以在微服务架构中，还需要 Spring Cloud 来配合一起使用。</p>
<h3 id="2-3-解决方案"><a href="#2-3-解决方案" class="headerlink" title="2.3 解决方案"></a>2.3 解决方案</h3><p>==约定大于配置==</p>
<h4 id="2-3-1-本质"><a href="#2-3-1-本质" class="headerlink" title="2.3.1 本质"></a>2.3.1 本质</h4><p>@ComponentScan 注解的作用是扫描 @SpringBootApplication 所在的 Application 类所在的包（basepackage）下所有的 @component 注解（或拓展了 @component 的注解）标记的 bean，并注册到 spring 容器中。</p>
<p>但是想要Spring 容器管理的 bean 不在 Spring Boot 包扫描路径下，则无法注入到Spring容器。</p>
<p>解决 Spring Boot 中不能被默认路径扫描的配置类的方式：</p>
<ul>
<li>在 Spring Boot 主类上使用 @Import 注解</li>
<li>使用 spring.factories 文件自动配置</li>
</ul>
<hr>
<p><strong>而SpringBoot自动装配的本质就是通过Spring去读取META-INF/spring.factories中保存的配置类文件然后加载bean定义的过程。</strong></p>
<h4 id="2-3-2-原理解析"><a href="#2-3-2-原理解析" class="headerlink" title="2.3.2 原理解析"></a>2.3.2 原理解析</h4><p><img src="/../images/2022-11-27-Sping-Boot%E7%9F%A5%E8%AF%86%E7%82%B9/20210629121733256.png"></p>
<p>Spring Boot启动的时候会通过<code>@EnableAutoConfiguration</code>注解找到<code>META-INF/spring.factories</code>配置文件中的所有自动配置类，并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类，它能通过以Properties结尾命名的类中取得在全局配置文件中配置的属性如：server.port，而XxxxProperties类是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。</p>
<h3 id="2-4-延迟加载"><a href="#2-4-延迟加载" class="headerlink" title="2.4 延迟加载"></a>2.4 延迟加载</h3><h4 id="2-4-1-概念"><a href="#2-4-1-概念" class="headerlink" title="2.4.1 概念"></a>2.4.1 概念</h4><ul>
<li>延迟初始化通常又被称为“懒加载”。</li>
<li>延迟初始化定义：在启动时不初始化Bean，直到用到这个Bean的时候才去初始化。</li>
<li>默认情况下，Bean在启动时进行初始化。</li>
</ul>
<h4 id="2-4-2-Lazy"><a href="#2-4-2-Lazy" class="headerlink" title="2.4.2 @Lazy"></a>2.4.2 @Lazy</h4><p><strong>解决循环依赖以及加快spring的ioc容器启动</strong></p>
<blockquote>
<p>局部延迟</p>
</blockquote>
<ul>
<li><p>在@Component类上加上@Lazy注解</p>
</li>
<li><p>在@Configuration类中配置@Bean时添加@Lazy注解</p>
</li>
<li><p>@ComponentScan(value = “xxx.xxx”, lazyInit = true)</p>
</li>
<li><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XXX<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XXX.XXX.XXXX<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
</li>
</ul>
<blockquote>
<p>全局延迟</p>
</blockquote>
<ul>
<li>applicaion.yml中：</li>
</ul>
<pre class=" language-yml"><code class="language-yml">spring.main.lazy-initialization=true
</code></pre>
<ul>
<li>xml中：</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">...</span> <span class="token attr-name">default-lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<ul>
<li>主程序中：</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式一</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoSpringbootApplication</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication sa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>DemoSpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        sa<span class="token punctuation">.</span><span class="token function">setLazyInitialization</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sa<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//方式二</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoSpringbootApplication</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplicationBuilder sab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span>DemoSpringbootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        sab<span class="token punctuation">.</span><span class="token function">lazyInitialization</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="2-4-3-原理"><a href="#2-4-3-原理" class="headerlink" title="2.4.3 原理"></a>2.4.3 原理</h4><p>容器启动的时候 只处理 <code>non-lazy-init bean</code>，懒加载的bean在Spring启动阶段根本不做任何处理。</p>
<p>延迟加载与非延迟加载在bean的注册是没有区别的，按需要注册；在依赖查找和依赖注入的区别就体现在，<strong>非延迟查找在上下文启动之前就初始化了，延迟加载在初始化完成之后加载</strong>；在spring应用上下文生命周期之前后输出；</p>
<p><strong>Spring 初始化入口 refresh()：</strong></p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>
            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>
            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>
            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>
                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>
                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>
                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>
                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>
                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>
                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>
                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>
                <span class="token comment" spellcheck="true">//初始化所有非懒加载的bean</span>
                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>
                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="2-5-初始化方式"><a href="#2-5-初始化方式" class="headerlink" title="2.5 初始化方式"></a>2.5 初始化方式</h3><h4 id="2-5-1-PostConstruct"><a href="#2-5-1-PostConstruct" class="headerlink" title="2.5.1 @PostConstruct"></a>2.5.1 @PostConstruct</h4><p>假设类UserController有个成员变量UserService被@Autowired修饰，那么UserService的注入是在UserController的构造方法之后执行的。</p>
<p>如果想在UserController对象生成时候完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入的对象，那么就无法在构造函数中实现（ps：spring启动时初始化异常）</p>
<p>因此，可以使用@PostConstruct注解来完成初始化，@PostConstruct注解的方法将会在UserService注入完成后被自动调用。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment" spellcheck="true">// 初始化方法</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">userServiceInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p><strong>总结：</strong>类初始化调用顺序：</p>
<ol>
<li>构造方法Constructor</li>
<li>@Autowired</li>
<li>@PostConstruct</li>
</ol>
<h4 id="2-5-2-InitializingBean接口"><a href="#2-5-2-InitializingBean接口" class="headerlink" title="2.5.2 InitializingBean接口"></a>2.5.2 InitializingBean接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment" spellcheck="true">// 初始化方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">userServiceInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="三、统一处理"><a href="#三、统一处理" class="headerlink" title="三、统一处理"></a>三、统一处理</h2><h3 id="3-1-统一异常处理"><a href="#3-1-统一异常处理" class="headerlink" title="3.1 统一异常处理"></a>3.1 统一异常处理</h3><p><code>@ControllerAdvice</code></p>
<p>作用于类上，使用该注解可以实现三个方面的功能：1. 全局异常处理；2. 全局数据绑定；3. 全局数据预处理。在进行全局异常处理时，需要配合 @ExceptionHandler 注解使用。</p>
<p><code>@RestControllerAdvice</code></p>
<p>同样也是作用于类上，它是 @ControllerAdvice 和 @ResponesBody 的合体，可以支持返回 JSON 格式的数据。在后面的代码示例中就会使用这个注解。</p>
<p><code>@ExceptionHandler</code></p>
<p>作用于方法上，顾明思议，它就是一个异常处理器，作用是统一处理某一类异常，可以很大程度的减少代码重复率和复杂度。该注解的 value 属性可以用于指定具体的拦截异常类型。</p>
<p>如果有多个 @ExceptionHandler 存在，则需要指定不同的 value 类型，由于异常类拥有继承关系，所以 @ExceptionHandler 会首先执行在继承树中靠前的异常类型。基于这个特性，我们可以使用 @ExceptionHandler 来处理程序中各种具体异常了，比如处理：</p>
<ul>
<li><p>ServletException，即进入 Controller 前的异常，如：NoHandlerFoundException 、HttpRequestMethodNotSupportedException、HttpMediaTypeNotSupportedException等</p>
</li>
<li><p>基于特定业务的自定义业务异常，如：BusinessException、BaseException</p>
</li>
<li><p>参数校验异常，如：BindException、<br>MethodArgumentNotValidException、ConstraintViolationException</p>
</li>
<li><p>未知异常，当上面的异常处理无法捕获某个异常时，统一使用 Exception来兜底</p>
</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//特定异常处理</span>
    <span class="token comment" spellcheck="true">//IllegalArgumentException、IllegalStateException、MethodArgumentNotValidException</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>IllegalArgumentException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>IllegalArgumentException e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"非法参数异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了IllegalArgumentException处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//自定义异常处理</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>CustomException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>CustomException e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"业务告警异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//兜底异常处理</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> R <span class="token function">error</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>getMessage<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"执行了全局异常处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-2-统一返回格式"><a href="#3-2-统一返回格式" class="headerlink" title="3.2 统一返回格式"></a>3.2 统一返回格式</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回码。默认返回成功
     */</span>
    <span class="token keyword">protected</span> String code <span class="token operator">=</span> ResponseCodeMessageEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回码信息
     */</span>
    <span class="token keyword">protected</span> String message <span class="token operator">=</span> ResponseCodeMessageEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回结果
     */</span>
    <span class="token keyword">protected</span> T result<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 根据错误码返回错误码和错误信息
     *
     * @param code
     *            错误码
     */</span>
    <span class="token keyword">public</span> <span class="token function">Response</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> RESPONSE_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 根据错误码、返回信息和返回结果组装返回码、返回信息和返回结果
     *
     * @param code
     *            错误码
     * @param message
     *            错误信息
     * @param result
     *            返回结果
     */</span>
    <span class="token keyword">public</span> <span class="token function">Response</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 返回成功
     *
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 返回成功
     *
     * @param result
     *            返回结果
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span>T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">restResult</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResponseCodeMessageEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param msg
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">restResult</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>FAILURE<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param responseCodeMessage
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fail</span><span class="token punctuation">(</span>ResponseCodeMessage responseCodeMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">restResult</span><span class="token punctuation">(</span>responseCodeMessage<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> responseCodeMessage<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">restResult</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">restResult</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">restResult</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断请求是否成功
     *
     * @return 请求是否成功的结果
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ResponseCodeMessageEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断请求是否失败
     * 
     * @param response
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFail</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isSuccess</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 返回码、返回信息映射
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> RESPONSE_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 获取结果详情，如果结果为空（null）抛出{@code TbException} 异常
     * &lt;p>
     *
     * @param response
     * @param errorLogMsgTemplate
     *            错误抛出异常附带的消息模板
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getResultAndThrowExceptionIfNull</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">,</span> String errorLogMsgTemplate<span class="token punctuation">,</span>
        Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        T result <span class="token operator">=</span> <span class="token function">getResultAndThrowExceptionIfFail</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response result is null，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>DATA_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取结果详情，如果结果为空（null）抛出{@code TbException} 异常
     * &lt;p>
     *
     * @param response
     * @param errorLogMsgTemplate
     *            错误抛出异常附带的消息模板
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getResultAndThrowWarnExceptionIfNull</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">,</span> String errorLogMsgTemplate<span class="token punctuation">,</span>
        Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        T result <span class="token operator">=</span> <span class="token function">getResultAndThrowExceptionIfFail</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response result is null，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>DATA_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取结果详情，如果返回码非成功，则抛出异常
     * &lt;p>
     *
     * @param response
     * @param errorLogMsgTemplate
     *            日志模板
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getResultAndThrowExceptionIfFail</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">,</span> String errorLogMsgTemplate<span class="token punctuation">,</span>
        Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response is null，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>DATA_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>Response<span class="token punctuation">.</span><span class="token function">isFail</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response is fail ，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取结果详情，如果返回码非成功，则抛出异常
     * &lt;p>
     *
     * @param response
     * @param errorLogMsgTemplate
     *            日志模板
     * @param &lt;T>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getResultAndThrowWarnExceptionIfFail</span><span class="token punctuation">(</span>Response<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">,</span> String errorLogMsgTemplate<span class="token punctuation">,</span>
        Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response is null，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ResponseCodeMessageEnum<span class="token punctuation">.</span>DATA_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>Response<span class="token punctuation">.</span><span class="token function">isFail</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"response is fail ，errorMsg={}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errorLogMsgTemplate<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> TbException<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-3-Restful风格"><a href="#3-3-Restful风格" class="headerlink" title="3.3 Restful风格"></a>3.3 Restful风格</h3><p> 一种软件架构风格、设计风格，而不是标准，只是提供了一组<strong>设计原则和约束条件</strong>。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h3 id="3-4-事务处理"><a href="#3-4-事务处理" class="headerlink" title="3.4 事务处理"></a>3.4 事务处理</h3><blockquote>
<p>引言</p>
</blockquote>
<p>是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合。</p>
<h4 id="3-4-1-单机事务"><a href="#3-4-1-单机事务" class="headerlink" title="3.4.1 单机事务"></a>3.4.1 单机事务</h4><blockquote>
<p>Mysql事务隔离级别</p>
</blockquote>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>隔离级别的值</th>
<th>导致的问题</th>
</tr>
</thead>
<tbody><tr>
<td>Read-Uncommitted</td>
<td>0</td>
<td>导致脏读</td>
</tr>
<tr>
<td>Read-Committed</td>
<td>1</td>
<td><strong>Oracle默认隔离级别。</strong>避免脏读，允许不可重复读和幻读</td>
</tr>
<tr>
<td>Repeatable-Read</td>
<td>2</td>
<td><strong>MySQL默认的隔离级别</strong>。避免脏读、不可重复读，允许幻读</td>
</tr>
<tr>
<td>Serializable</td>
<td>3</td>
<td>串行化读，事务只能一个一个执行，避免了 脏读、不可重复读、幻读。执行效率慢，使用时慎重</td>
</tr>
</tbody></table>
<blockquote>
<p>Spring事务隔离级别</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> ISOLATION_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ISOLATION_READ_UNCOMMITTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ISOLATION_READ_COMMITTED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ISOLATION_REPEATABLE_READ <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ISOLATION_SERIALIZABLE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>ISOLATION_DEFAULT</td>
<td>这是个 PlatfromTransactionManager 默认的隔离级别， 使用数据库默认的事务隔离级别。另外四个与 JDBC 的隔离级别相对应。</td>
</tr>
<tr>
<td>SOLATION_READ_UNCOMMITTED</td>
<td>这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读， 不可重复读和幻读。</td>
</tr>
<tr>
<td>ISOLATION_READ_COMMITTED</td>
<td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。 ISOLATION_REPEATABLE_READ</td>
</tr>
<tr>
<td>ISOLATION_SERIALIZABLE</td>
<td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。</td>
</tr>
</tbody></table>
<blockquote>
<p>脏读</p>
</blockquote>
<p>一个事务对数据进行了增删改查，但是未提交事务。另一个事物可以读取到未提交的数据，如果第一个事务进行了回滚，那么第二个事务就读到了脏数据。</p>
<blockquote>
<p>不可重复读</p>
</blockquote>
<p>一次事务发生了两次读操作，两个读操作之间发生了另一个事务对数据修改操作，这时候第一次和第二次读到的数据不一致。</p>
<blockquote>
<p>幻读</p>
</blockquote>
<p>幻读，指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行。</p>
<blockquote>
<p>可串行化</p>
</blockquote>
<p>Serializable是最高的隔离级别，性能很低，一般很少用。在这级别下，事务是串行顺序执行的，不仅避免了脏读、不可重复读，还避免了幻读。</p>
<p>==总结==</p>
<ul>
<li>脏读读到的是尚未提交的数据</li>
<li>不可重复读读到的是已经提交被修改的数据</li>
<li>幻读读到的是已经提交被插入或者删除的数据</li>
</ul>
<h4 id="3-4-2-分布式事务"><a href="#3-4-2-分布式事务" class="headerlink" title="3.4.2 分布式事务"></a>3.4.2 分布式事务</h4><blockquote>
<p>Tips：分布式事务与分布式锁的区别</p>
</blockquote>
<p>分布式锁解决的是分布式资源抢占的问题；分布式事务和本地事务是解决流程化提交问题。</p>
<blockquote>
<p>概念</p>
</blockquote>
<p>对于分布式系统而言，需要保证分布式系统中的数据一致性，保证数据在子系统中始终保持一致，避免业务出现问题。分布式系统中数据要么一起成功，要么一起失败，必须是一个整体性的事务。</p>
<blockquote>
<p>CAP定理</p>
</blockquote>
<ul>
<li>一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)</li>
<li>可用性(Availability) ： 每个操作都必须以可预期的响应结束</li>
<li>分区容错性(Partition tolerance) ： 即使出现单个组件无法可用，操作依然可以完成</li>
</ul>
<p><img src="/../images/2022-11-27-Sping-Boot%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220729155745153.png" alt="image-20220729155745153"></p>
<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。在互联网领域的绝大多数的场景中，都需要<strong>牺牲强一致性来换取系统的高可用性</strong>，系统往往只需要保证最终一致性。</p>
<h2 id="四、整合Redis-amp-RocketMQ"><a href="#四、整合Redis-amp-RocketMQ" class="headerlink" title="四、整合Redis&amp;RocketMQ"></a>四、整合Redis&amp;RocketMQ</h2><h3 id="4-1-Redis"><a href="#4-1-Redis" class="headerlink" title="4.1 Redis"></a>4.1 Redis</h3><h4 id="4-1-1-连接工具"><a href="#4-1-1-连接工具" class="headerlink" title="4.1.1 连接工具"></a>4.1.1 连接工具</h4><p>在1.×版本的时候，SpringBoot的底层还是使用Jedis来连接Redis的，但是在2.×版本后，就换成了Lettuce。两者的区别如下：<br><code>Jedis</code>: 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式！</p>
<p><code>Lettuce</code>: 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式！</p>
<h4 id="4-1-2-pom文件"><a href="#4-1-2-pom文件" class="headerlink" title="4.1.2 pom文件"></a>4.1.2 pom文件</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--集成redis--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--序列化--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    
</code></pre>
<h4 id="4-1-3-application-yml"><a href="#4-1-3-application-yml" class="headerlink" title="4.1.3 application.yml"></a>4.1.3 application.yml</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># redis数据库索引(默认为0)</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">3</span>
    <span class="token comment" spellcheck="true"># redis服务器地址（默认为loaclhost）</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.73.12
    <span class="token comment" spellcheck="true"># redis端口（默认为6379）</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token comment" spellcheck="true"># redis访问密码（默认为空）</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> pwd123
    <span class="token comment" spellcheck="true"># redis连接超时时间（单位毫秒）</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token comment" spellcheck="true"># redis连接池配置</span>
    <span class="token key atrule">pool</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true"># 最大可用连接数（默认为8，负数表示无限）</span>
      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
      <span class="token comment" spellcheck="true"># 最大空闲连接数（默认为8，负数表示无限）</span>
      <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
      <span class="token comment" spellcheck="true"># 最小空闲连接数（默认为0，该值只有为正数才有用）</span>
      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token comment" spellcheck="true"># 从连接池中获取连接最大等待时间（默认为-1，单位为毫秒，负数表示无限）</span>
      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
</code></pre>
<h4 id="4-1-4-常用方法"><a href="#4-1-4-常用方法" class="headerlink" title="4.1.4 常用方法"></a>4.1.4 常用方法</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testRedis</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jaqen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// redisTemplate  #操作不同的数据类型，api和我们的指令是一样的 </span>
<span class="token comment" spellcheck="true">// opsForValue  #操作字符串 类似String </span>
<span class="token comment" spellcheck="true">// opsForList  #操作List 类似List </span>
<span class="token comment" spellcheck="true">// opsForSet  #操作set</span>
<span class="token comment" spellcheck="true">// opsForHash  #操作hash</span>
<span class="token comment" spellcheck="true">// opsForZSet  #操作zset</span>
<span class="token comment" spellcheck="true">// opsForGeo   #操作geo</span>
<span class="token comment" spellcheck="true">// opsForHyperLogLog  #操作HyperLogLog</span>
<span class="token comment" spellcheck="true">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的 CRUD </span>
<span class="token comment" spellcheck="true">// 获取redis的连接对象 </span>
<span class="token comment" spellcheck="true">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection(); </span>
<span class="token comment" spellcheck="true">// connection.flushDb(); </span>
<span class="token comment" spellcheck="true">// connection.flushAll();</span>
</code></pre>
<h4 id="4-1-5-序列化"><a href="#4-1-5-序列化" class="headerlink" title="4.1.5 序列化"></a>4.1.5 序列化</h4><p>Redis对于对象的保存，Redis必须配置序列化，才可以实现。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 自己定义了一个RedisTemplate</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span>
        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Json序列化配置</span>
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// String 的序列化</span>
        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>
        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>
        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="4-1-6-工具类"><a href="#4-1-6-工具类" class="headerlink" title="4.1.6 工具类"></a>4.1.6 工具类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>


    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">keys</span><span class="token punctuation">(</span>String keys<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 指定缓存失效时间
     * @param key 键
     * @param time 时间(秒)
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 根据key 获取过期时间
     * @param key 键 不能为null
     * @return 时间(秒) 返回0代表为永久有效
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 判断key是否存在
     * @param key 键
     * @return true 存在 false不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 删除缓存
     * @param key 可以传一个值 或多个
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 普通缓存获取
     * @param key 键
     * @return 值
     */</span>
    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 普通缓存放入
     * @param key 键
     * @param value 值
     * @return true成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
     <span class="token comment" spellcheck="true">/**
     * 普通缓存放入, 不存在放入，存在返回
     * @param key 键
     * @param value 值
     * @return true成功 false失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">setnx</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 普通缓存放入并设置时间
     * @param key 键
     * @param value 值
     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期
     * @return true成功 false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="4-2-RocketMQ"><a href="#4-2-RocketMQ" class="headerlink" title="4.2 RocketMQ"></a>4.2 RocketMQ</h3><h4 id="4-2-1-概念"><a href="#4-2-1-概念" class="headerlink" title="4.2.1 概念"></a>4.2.1 概念</h4><p>RocketMQ作为一款纯java、分布式、队列模型的开源消息中间件，支持事务消息、顺序消息、批量消息、定时消息、消息回溯等。</p>
<p><img src="https://img-blog.csdnimg.cn/202012041505436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p5eDEyNjAxNjgzOTU=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><code>Producer</code>：消息的发送者；举例：发件人<br><code>Consumer</code>：消息接收者；举例：收件人<br><code>Consumer Group</code>：消费组；每一个 consumer 实例都属于一个 consumer group，每一条消息只会被同一个 consumer group 里的一个 consumer 实例消费。（不同consumer group可以同时消费同一条消息）<br><code>Broker</code>：暂存和传输消息；举例：快递公司<br><code>NameServer</code>：管理 Broker；举例：快递公司的管理机构<br><code>Topic</code>：区分消息的种类；一个发送者可以发送消息给一个或者多个 Topic；一个消息的接收者可以订阅一个或者多个 Topic 消息<br><code>Message Queue</code>：相当于是 Topic 的分区；用于并行发送和接收消息</p>
<h4 id="4-2-2-pom文件"><a href="#4-2-2-pom文件" class="headerlink" title="4.2.2 pom文件"></a>4.2.2 pom文件</h4><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="4-2-3-生产者"><a href="#4-2-3-生产者" class="headerlink" title="4.2.3 生产者"></a>4.2.3 生产者</h4><blockquote>
<p>yaml文件</p>
</blockquote>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>
  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 10.124.128.200<span class="token punctuation">:</span><span class="token number">9876</span>
  <span class="token key atrule">producer</span><span class="token punctuation">:</span>
    <span class="token key atrule">group</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>group
    <span class="token comment" spellcheck="true"># 发送同步消息失败时，重试次数，默认是 2</span>
    <span class="token key atrule">retry-times-when-send-failed</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token comment" spellcheck="true"># 发送异步消息失败时，重试次数，默认是 2</span>
    <span class="token key atrule">retry-times-when-send-async-failed</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token comment" spellcheck="true"># 发送消息超时时间，默认是 3s</span>
    <span class="token key atrule">send-message-timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>

    <span class="token comment" spellcheck="true"># 连接阿里云RocketMQ时需要配置AK与SK</span>
    <span class="token key atrule">access-key</span><span class="token punctuation">:</span> 
    <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> 
</code></pre>
<blockquote>
<p>producer</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RocketMQTemplate rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sendSyncMessage"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSyncMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> msgMap<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//构建消息</span>
        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicName"</span><span class="token punctuation">,</span> <span class="token string">"Tag"</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONBytes</span><span class="token punctuation">(</span>msgData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment" spellcheck="true">//发送同步消息 </span>
        <span class="token comment" spellcheck="true">//方法1：调用 getProducer() 方法时会返回DefaultMQProducer对象</span>
        SendResult sendResult <span class="token operator">=</span>  rocketMQTemplate<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//方法2：使用rocketMQTemplate封装的消息发送方法</span>
        <span class="token comment" spellcheck="true">// 第一个参数指定Topic与Tag，格式: `topicName:tags`</span>
        <span class="token comment" spellcheck="true">// 第二个参数，Message对象</span>
        sendResult <span class="token operator">=</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"TopicName:Tag"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="4-2-4-消费者"><a href="#4-2-4-消费者" class="headerlink" title="4.2.4 消费者"></a>4.2.4 消费者</h4><blockquote>
<p>yaml文件</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml">rocketmq:
  name-server: 10.124.128.200:9876

  # 下面的配置只有在用阿里云的RocketMQ时，才配置，自己搭建的不需要配置
  consumer:
    access-key: 
    secret-key: 
  access-channel: CLOUD
</code></pre>
<blockquote>
<p>consumer</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"springboot-mq"</span><span class="token punctuation">,</span> 
        consumerGroup <span class="token operator">=</span> <span class="token string">"springboot-mq-consumer-1"</span><span class="token punctuation">,</span>
        selectorExpression <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive message："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//如果消费失败，则抛出RuntimeException，RocketMQ会自动重试</span>
        <span class="token comment" spellcheck="true">//可以手动抛出，也可以使用 Lombok 的 @SneakyThrows 注解来抛出 RuntimeException</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"消费失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>@RocketMQMessageListener</code> 注解的常用配置参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>consumerGroup</td>
<td>String</td>
<td></td>
<td>消费者组</td>
</tr>
<tr>
<td>topic</td>
<td>String</td>
<td></td>
<td>Topic</td>
</tr>
<tr>
<td>selectorType</td>
<td>selectorType</td>
<td>SelectorType.TAG</td>
<td>使用TAG 或者SQL92选择消息，默认tag</td>
</tr>
<tr>
<td>selectorExpression</td>
<td>String</td>
<td>“*”</td>
<td>控制哪些消息可以选择</td>
</tr>
<tr>
<td>consumeMode</td>
<td>ConsumeMode</td>
<td>ConsumeMode.CONCURRENTLY</td>
<td>消费模式，并发接收还是顺序接收，默认并发模式</td>
</tr>
<tr>
<td>messageModel</td>
<td>MessageModel</td>
<td>MessageModel.CLUSTERING</td>
<td>消费模式，广播模式还是集群模式，默认集群模式</td>
</tr>
<tr>
<td>consumeThreadMax</td>
<td>int</td>
<td>64</td>
<td>最大消费线程数</td>
</tr>
<tr>
<td>consumeTimeout</td>
<td>long</td>
<td>15L</td>
<td>消费超时时间（一条消息可能会阻塞使用线程的最长时间min）</td>
</tr>
<tr>
<td>nameServer</td>
<td>String</td>
<td>配置文件中读取：${rocketmq.name-server:}</td>
<td>nameServer地址</td>
</tr>
<tr>
<td>accessKey</td>
<td>String</td>
<td>${rocketmq.consumer.access-key:}</td>
<td>AK</td>
</tr>
<tr>
<td>secretKey</td>
<td>String</td>
<td>${rocketmq.consumer.secret-key:}</td>
<td>SK</td>
</tr>
<tr>
<td>accessChannel</td>
<td>String</td>
<td>${rocketmq.access-channel:}</td>
<td></td>
</tr>
</tbody></table>
<h2 id="五、IOC-amp-AOP-amp-SPI"><a href="#五、IOC-amp-AOP-amp-SPI" class="headerlink" title="五、IOC&amp;AOP&amp;SPI"></a>五、IOC&amp;AOP&amp;SPI</h2><h3 id="5-1-IOC"><a href="#5-1-IOC" class="headerlink" title="5.1 IOC"></a>5.1 IOC</h3><blockquote>
<p>参考博文</p>
</blockquote>
<p><a href="https://blog.csdn.net/ivan820819/article/details/79744797?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165931992416780366561674%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165931992416780366561674&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-79744797-null-null.142%5Ev36%5Epc_rank_34&amp;utm_term=IOC&amp;spm=1018.2226.3001.4187">浅谈IOC</a></p>
<h4 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h4><blockquote>
<p>控制反转</p>
</blockquote>
<p>IOC是<code>Inversion of Control</code>的缩写，多数书籍翻译成“控制反转”，借助于“第三方”实现具有依赖关系的对象之间的解耦，其中IOC最基本的技术就是<strong>反射（Reflection）</strong></p>
<p><img src="https://img-blog.csdnimg.cn/a68f13a032224ba199b45e09322f8447.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaXZhbjgyMDgxOQ==,size_10,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/c9899cc96f1445cbb0e0ec785e03d77e.png" alt="img"></p>
<p>以前通过new来创建对象，是程序主动去创建依赖对象。而现在，<strong>由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象</strong>,从主动行为变为了被动行为，控制权颠倒过来了，这就是“<strong>控制反转</strong>”这个名称的由来。</p>
<blockquote>
<p>依赖注入（DI）</p>
</blockquote>
<p>所谓依赖注入，就是由IOC容器在运行期间，<strong>动态地将某种依赖关系注入到对象之中</strong>。</p>
<p>依赖注入(DI)和控制反转(IOC)是<strong>同一个概念的不同描述</strong>，就是指通过引入IOC容器，利用依赖关系注入的方式，实现对象之间的解耦。</p>
<h4 id="5-1-2-优缺点"><a href="#5-1-2-优缺点" class="headerlink" title="5.1.2 优缺点"></a>5.1.2 优缺点</h4><ul>
<li>第一、软件系统中由于引入了第三方IOC容器，生成对象的步骤变得有些复杂，本来是两者之间的事情，又凭空多出一道手续，所以，我们在刚开始使用IOC框架的时候，会感觉系统变得不太直观。所以，引入了一个全新的框架，就会增加团队成员学习和认识的培训成本，并且在以后的运行维护中，还得让新加入者具备同样的知识体系。</li>
<li>第二、由于IOC容器生成对象是通过反射方式，在运行效率上有一定的损耗。如果要追求运行效率的话，就必须对此进行权衡。</li>
<li>第三、具体到IOC框架产品(比如：Spring)来讲，需要进行大量的配制工作，比较繁琐，对于一些小的项目而言，客观上也可能加大一些工作成本。</li>
<li>第四、IOC框架产品本身的成熟度需要进行评估，如果引入一个不成熟的IOC框架产品，那么会影响到整个项目，所以这也是一个隐性的风险。</li>
</ul>
<h3 id="5-2-AOP"><a href="#5-2-AOP" class="headerlink" title="5.2 AOP"></a>5.2 AOP</h3><blockquote>
<p>参考博文</p>
</blockquote>
<p><a href="https://blog.csdn.net/q982151756/article/details/80513340?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165932491716781790770297%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165932491716781790770297&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80513340-null-null.142%5Ev37%5Epc_rank_34&amp;utm_term=AOP&amp;spm=1018.2226.3001.4187">细说Spring-AOP</a></p>
<h4 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h4><p>在软件业，AOP为<code>Aspect Oriented Programming</code>的缩写，意为：<strong>面向切面编程</strong>，<u>通过预编译方</u><br><u>式和运行期动态代理实现程序功能的统一维护的一种技术</u>。AOP是OOP的延续，是软件开发中的一个<br>热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑<br>的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高<br>了开发的效率。</p>
<ul>
<li><code>Aspect</code>（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</li>
<li><code>Joint point</code>（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li>
<li><code>Pointcut</code>（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li>
<li><code>Advice</code>（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</li>
<li><code>Target</code>（目标对象）：织入 Advice 的目标对象.。</li>
<li><code>Weaving</code>（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</li>
</ul>
<h4 id="5-2-2-通知方式"><a href="#5-2-2-通知方式" class="headerlink" title="5.2.2 通知方式"></a>5.2.2 通知方式</h4><table>
<thead>
<tr>
<th>注解</th>
<th>通知</th>
</tr>
</thead>
<tbody><tr>
<td>@Before</td>
<td>目标对象的方法调用之前触发</td>
</tr>
<tr>
<td>@After</td>
<td>目标对象的方法调用之后触发</td>
</tr>
<tr>
<td>@AfterReturning</td>
<td>目标对象的方法调用完成，在返回结果值之后触发</td>
</tr>
<tr>
<td>@AfterThrowing</td>
<td>目标对象的方法运行中抛出 / 触发异常后触发</td>
</tr>
<tr>
<td>@Around</td>
<td>编程式控制目标对象的方法调用</td>
</tr>
</tbody></table>
<p>例子：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
 
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterReturning<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterThrowing<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span>
 
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspects</span> <span class="token punctuation">{</span>
    
    <span class="token comment" spellcheck="true">//抽取公共的切入点表达式</span>
    <span class="token comment" spellcheck="true">//1、本类引用</span>
    <span class="token comment" spellcheck="true">//2、其他的切面引用</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(方法得全类名路径:例如  包名+类名+方法)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">//@Before在目标方法之前切入；切入点表达式（指定在哪个方法切入）</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logStart</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>
        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"运行--->@Before:参数列表是：{"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"com.star.aop.LogAspects.pointCut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logEnd</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"结束--->@After"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment" spellcheck="true">//JoinPoint一定要出现在参数表的第一位</span>
    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"pointCut()"</span><span class="token punctuation">,</span>returning<span class="token operator">=</span><span class="token string">"result"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logReturn</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span>Object result<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正常返回--->@AfterReturning:运行结果：{"</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"pointCut()"</span><span class="token punctuation">,</span>throwing<span class="token operator">=</span><span class="token string">"exception"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span>Exception exception<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"异常--->异常信息：{"</span><span class="token operator">+</span>exception<span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="5-3-SPI"><a href="#5-3-SPI" class="headerlink" title="5.3 SPI"></a>5.3 SPI</h3><blockquote>
<p>参考博文</p>
</blockquote>
<p><a href="https://blog.csdn.net/lukabruce/article/details/124671361?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165949057016781685359387%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165949057016781685359387&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124671361-null-null.142%5Ev39%5Epc_rank_34_2&amp;utm_term=Java%20SPI&amp;spm=1018.2226.3001.4187">SPI详解</a></p>
<h4 id="5-3-1-概念"><a href="#5-3-1-概念" class="headerlink" title="5.3.1 概念"></a>5.3.1 概念</h4><p>SPI全称<code>Service Provider Interface</code>，是Java提供的一套用来被第三方实现或者扩展的接口，它可以用来<strong>启用框架扩展和替换组件</strong>。 SPI的作用就是为这些被扩展的API寻找服务实现。</p>
<blockquote>
<p>SPI和API</p>
</blockquote>
<p> API （<code>Application Programming Interface</code>）在大多数情况下，都是<code>实现方</code>制定接口并完成对接口的实现，<code>调用方</code>仅仅依赖接口调用，且无权选择不同实现。 从使用人员上来说，API 直接被<strong>应用开发人员</strong>使用。</p>
<p>  SPI （<code>Service Provider Interface）</code>是<code>调用方</code>来制定接口规范，提供给外部来实现，调用方在调用时则选择自己需要的外部实现。 从使用人员上来说，SPI 被<strong>框架扩展人员</strong>使用。</p>
<h4 id="5-3-2-ServiceLoader"><a href="#5-3-2-ServiceLoader" class="headerlink" title="5.3.2 ServiceLoader"></a>5.3.2 ServiceLoader</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServiceLoader</span><span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token punctuation">{</span>
 
    <span class="token comment" spellcheck="true">//扫描目录前缀</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PREFIX <span class="token operator">=</span> <span class="token string">"META-INF/services/"</span><span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 被加载的类或接口</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>S<span class="token operator">></span> service<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 用于定位、加载和实例化实现方实现的类的类加载器</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> ClassLoader loader<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 上下文对象</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> AccessControlContext acc<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 按照实例化的顺序缓存已经实例化的类</span>
    <span class="token keyword">private</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> S<span class="token operator">></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 懒查找迭代器</span>
    <span class="token keyword">private</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ServiceLoader<span class="token punctuation">.</span>LazyIterator lookupIterator<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">// 私有内部类，提供对所有的service的类的加载与实例化</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LazyIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token punctuation">{</span>
        Class<span class="token operator">&lt;</span>S<span class="token operator">></span> service<span class="token punctuation">;</span>
        ClassLoader loader<span class="token punctuation">;</span>
        Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> configs <span class="token operator">=</span> null<span class="token punctuation">;</span>
        String nextName <span class="token operator">=</span> null<span class="token punctuation">;</span>
 
        <span class="token comment" spellcheck="true">//...</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>configs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//获取目录下所有的类</span>
                    String fullName <span class="token operator">=</span> PREFIX <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> null<span class="token punctuation">)</span>
                        configs <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span>
                        configs <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//...</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//....</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
 
        <span class="token keyword">private</span> S <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String cn <span class="token operator">=</span> nextName<span class="token punctuation">;</span>
            nextName <span class="token operator">=</span> null<span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//反射加载类</span>
                c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//实例化</span>
                S p <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//放进缓存</span>
                providers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//..</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//..</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="5-3-2-优缺点"><a href="#5-3-2-优缺点" class="headerlink" title="5.3.2 优缺点"></a>5.3.2 优缺点</h4><blockquote>
<p>弊端</p>
</blockquote>
<ul>
<li>只能遍历所有的实现，并全部实例化。</li>
<li>配置文件中只是简单的列出了所有的扩展实现，而没有给他们命名。导致在程序中很难去准确的引用它们。</li>
<li>扩展如果依赖其他的扩展，做不到自动注入和装配。</li>
<li>扩展很难和其他的框架集成，比如扩展里面依赖了一个Spring bean，原生的Java SPI不支持。</li>
</ul>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>不需要改动源码就可以实现扩展，解耦。</li>
<li>实现扩展对原来的代码几乎没有侵入性。</li>
<li>只需要添加配置就可以实现扩展，符合开闭原则。</li>
</ul>
<h2 id="六、Junit单元测试"><a href="#六、Junit单元测试" class="headerlink" title="六、Junit单元测试"></a>六、Junit单元测试</h2><h3 id="6-1-Junit的变化"><a href="#6-1-Junit的变化" class="headerlink" title="6.1 Junit的变化"></a>6.1 Junit的变化</h3><p>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</p>
<p><code>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</code></p>
<p><code>JUnit Platform</code>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p>
<p><code>JUnit Jupiter</code>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p>
<p><code>JUnit Vintage</code>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p>
<p>==注意：==</p>
<p><strong>SpringBoot 2.4 以上版本移除了默认对</strong> <strong>Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test</strong>）</p>
<h3 id="6-2-常用注解"><a href="#6-2-常用注解" class="headerlink" title="6.2 常用注解"></a>6.2 常用注解</h3><p><code>@Test</code> :表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试<br><code>@ParameterizedTest</code> :表示方法是参数化测试<br><code>@RepeatedTest</code> :表示方法可重复执行<br><code>@DisplayName</code> :为测试类或者测试方法设置展示名称<br><code>@BeforeEach</code> :表示在每个单元测试之前执行<br><code>@AfterEach</code> :表示在每个单元测试之后执行<br><code>@BeforeAll</code> :表示在所有单元测试之前执行<br><code>@AfterAll </code>:表示在所有单元测试之后执行<br><code>@Tag</code> :表示单元测试类别，类似于JUnit4中的@Categories<br><code>@Disabled</code> :表示测试类或测试方法不执行，类似于JUnit4中的@Ignore<br><code>@Timeout</code> :表示测试方法运行如果超过了指定时间将会返回错误<br><code>@ExtendWith</code> :为测试类或测试方法提供扩展类引用</p>
<p><code>@Nested</code>:嵌套测试</p>
<h3 id="6-3-断言"><a href="#6-3-断言" class="headerlink" title="6.3 断言"></a>6.3 断言</h3><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。JUnit 5 内置的断言可以分成如下几个类别：</p>
<p><strong>检查业务逻辑返回的数据是否合理</strong></p>
<p><strong>所有的测试运行结束以后，会有一个详细的测试报告</strong></p>
<h4 id="6-3-1-简单断言"><a href="#6-3-1-简单断言" class="headerlink" title="6.3.1 简单断言"></a>6.3.1 简单断言</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为 true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为 false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为 null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为 null</td>
</tr>
</tbody></table>
<p>例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"simple assertion"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Assertions<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"simple math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//预期数字，实际数字， 错误提示信息</span>
    
<span class="token punctuation">}</span>
</code></pre>
<h4 id="6-3-2-数组断言"><a href="#6-3-2-数组断言" class="headerlink" title="6.3.2 数组断言"></a>6.3.2 数组断言</h4><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"array assertion"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     Assertions<span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="6-3-3-组合断言"><a href="#6-3-3-组合断言" class="headerlink" title="6.3.3 组合断言"></a>6.3.3 组合断言</h4><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"assert all"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Assertions<span class="token punctuation">.</span><span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"Math"</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Assertions<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Assertions<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="6-3-4-异常断言"><a href="#6-3-4-异常断言" class="headerlink" title="6.3.4 异常断言"></a>6.3.4 异常断言</h4><p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"异常测试"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ArithmeticException exception <span class="token operator">=</span> Assertions<span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>
           <span class="token comment" spellcheck="true">//扔出断言异常</span>
            ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<h4 id="6-3-5-超时断言"><a href="#6-3-5-超时断言" class="headerlink" title="6.3.5 超时断言"></a>6.3.5 超时断言</h4><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"超时测试"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeoutTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//如果测试方法时间超过1s将会异常</span>
    Assertions<span class="token punctuation">.</span><span class="token function">assertTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="6-4-前置条件"><a href="#6-4-前置条件" class="headerlink" title="6.4 前置条件"></a>6.4 前置条件</h3><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"前置条件"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssumptionsTest</span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//测试环境下作为前置条件</span>
 <span class="token keyword">private</span> <span class="token keyword">final</span> String environment <span class="token operator">=</span> <span class="token string">"DEV"</span><span class="token punctuation">;</span>
 
 <span class="token annotation punctuation">@Test</span>
 <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"simple"</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleAssume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumeTrue</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"DEV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assumeFalse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"PROD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token annotation punctuation">@Test</span>
 <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"assume then do"</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assumeThenDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assumingThat</span><span class="token punctuation">(</span>
       Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"DEV"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"In DEV"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>assumeTrue</code> 和 <code>assumFalse</code> 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。</p>
<p><code>assumingThat</code> 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。</p>
<p>只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>
<h3 id="6-5-参数化测试"><a href="#6-5-参数化测试" class="headerlink" title="6.5 参数化测试"></a>6.5 参数化测试</h3><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。<code>@ParameterizedTest</code>替换<code>Test</code></p>
<p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
<p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p>
<p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p>
<p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p>
<p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p>
<p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"参数化测试"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterizedTest1</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assertions<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指定方法名</span>
<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"方法来源参数"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWithExplicitLocalMethodSource</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assertions<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="七、统一日志输出"><a href="#七、统一日志输出" class="headerlink" title="七、统一日志输出"></a>七、统一日志输出</h2><h3 id="7-1-日志级别"><a href="#7-1-日志级别" class="headerlink" title="7.1 日志级别"></a>7.1 日志级别</h3><p>优先级<strong>从高到低</strong>分别是 ERROR、WARN、INFO、DEBUG。 <strong>等于或高于</strong>日志记录器当前配置级别的日志的<strong>将被打印出来</strong></p>
<table>
<thead>
<tr>
<th>级别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DEBUG</td>
<td>指出细粒度信息事件，主要用来调试应用程序</td>
</tr>
<tr>
<td>INFO</td>
<td>表明粗粒度级别，上强调应用程序的运行过程，比如进入某个业务分支</td>
</tr>
<tr>
<td>WARN</td>
<td>表明出现潜在错误</td>
</tr>
<tr>
<td>ERROR</td>
<td>指出虽然发生错误事件，但不影响系统的继续运行</td>
</tr>
<tr>
<td>FATAL</td>
<td>指出每个严重的错误事件将会导致应用程序的退出</td>
</tr>
</tbody></table>
<p>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台,您还可以通过启动您的应用程序 –debug 标志来启用<strong>调试</strong>模式（开发的时候推荐开启）,以下两种方式皆可：</p>
<pre class=" language-markdown"><code class="language-markdown">1.在运行命令后加入–debug标志，如：java -jar *.jar --debug

2.在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。
</code></pre>
<h3 id="7-2-Slf4j"><a href="#7-2-Slf4j" class="headerlink" title="7.2 @Slf4j"></a>7.2 @Slf4j</h3><ol>
<li>代码</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SLFJTest</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span>LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SmsOtpServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"信息{}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ol>
<li><code>@Slf4j</code></li>
</ol>
<p>两种实现方式都可以完成日志打印输出。</p>
<h3 id="7-3-日志配置文件"><a href="#7-3-日志配置文件" class="headerlink" title="7.3 日志配置文件"></a>7.3 日志配置文件</h3><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。我们还可以在application.properties或application.yml配置，但是只能配置简单的场景，保存路径、日志格式等，复杂的场景（区分 info 和 error 的日志、每天产生一个日志文件等）满足不了，只能自定义配置。</p>
<p>一般我们使用logback来输出日志，创建<code>logback.xml</code>或者<code>logback-spring.xml(推荐)</code>，并且放在 src/main/resources 下面即可，注意：<strong>logback.xml加载早于application.yml</strong></p>
<p><strong>logback.xml:</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE configuration></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 'milliseconds','seconds','minutes' and 'hours' --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${project.parent.artifactId}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${log.path:-/data/logs}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.level<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${log.level:-debug}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>${log.name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>patternTemplate<span class="token punctuation">"</span></span>
              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[%-5level] [%contextName] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{req.remoteHost}] [%X{req.requestURI}] [%tid] %logger.%M --<span class="token punctuation">></span> %msg%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jmxConfigurator</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shutdownHook</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.hook.DelayingShutdownHook<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 控制台输出日志 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.welab.tb.desensitization.logback.WelabConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.encoder.LayoutWrappingEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${patternTemplate}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.welab.tb.desensitization.logback.WelabRollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>${log.path}/${log.name}/${log.name}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- rollover daily --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">></span></span>${log.path}/${log.name}-log-%d{yyyy-MM-dd}.%i.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>15MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- or whenever the file size reaches 5MB --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- &lt;maxHistory>&lt;/maxHistory> --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.encoder.LayoutWrappingEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${patternTemplate}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 异步输出 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ASYNC<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discardingThreshold</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discardingThreshold</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">></span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeCallerData</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeCallerData</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>neverBlock</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>neverBlock</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 停应用时最多等待多少毫秒处理queue中日志,暂定10秒 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFlushTime</span><span class="token punctuation">></span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFlushTime</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 添加附加的appender,最多只能添加一个 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${log.level}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--这里指定logger name 是为jmx设置日志级别做铺垫 --></span>
    <span class="token comment" spellcheck="true">&lt;!--nacos 心跳 INFO 屏蔽--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.nacos<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zaxxer.hikari.pool.HikariPool<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.welab<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ulisesbocchio.jasyptspringboot.configuration<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.kafka.clients<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.welab.privacy<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.redisson.cluster<span class="token punctuation">"</span></span> <span class="token attr-name">addivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.seata<span class="token punctuation">"</span></span> <span class="token attr-name">addivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="八、自定义Starter"><a href="#八、自定义Starter" class="headerlink" title="八、自定义Starter"></a>八、自定义Starter</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h3><p>Starter是Spring Boot中的一个非常重要的概念，Starter相当于模块，它能将模块所需的依赖整合起来并对模块内的Bean根据环境（ 条件）进行自动配置。</p>
<p><strong>使用者只需要依赖相应功能的Starter，无需做过多的配置和依赖，Spring Boot就能自动扫描并加载相应的模块并设置默认值，做到开箱即用</strong></p>
<p>基于SPI的一种实现</p>
<hr>
<p>在我们的日常开发工作中，经常会有一些独立于业务之外的配置模块，我们经常将其放到一个特定的包下，然后如果另一个工程需要复用这块功能的时候，需要将代码硬拷贝到另一个工程，重新集成一遍，麻烦至极。</p>
<p>如果我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，并在starter中设置好默认值，复用的时候只需要将其在pom中引用依赖即可，Spring Boot为我们完成自动装配，做到<code>开箱即用</code>。</p>
<h3 id="8-2-开发步骤"><a href="#8-2-开发步骤" class="headerlink" title="8.2 开发步骤"></a>8.2 开发步骤</h3><blockquote>
<p>命名规范</p>
</blockquote>
<ul>
<li>Spring<strong>官方Starter</strong>通常命名为<code>spring-boot-starter-{name}</code>如：spring-boot-starter-web</li>
<li>Spring官方建议<strong>非官方Starter</strong>命名应遵循<code>{name}-spring-boot-starter</code>的格式：如mybatis-spring-boot-starter。</li>
</ul>
<h4 id="8-2-1-创建pom文件"><a href="#8-2-1-创建pom文件" class="headerlink" title="8.2.1 创建pom文件"></a>8.2.1 创建pom文件</h4><p>删除<code>&lt;plugins&gt;&lt;/plugins&gt;</code>内的内容，必须添加<code>spring-boot-starter</code>依赖。</p>
<h4 id="8-2-2-定义Properties类"><a href="#8-2-2-定义Properties类" class="headerlink" title="8.2.2 定义Properties类"></a>8.2.2 定义Properties类</h4><p>在config包中，创建一个实体类：PersonProperties，通过它来映射配置信息</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 实体类，用来映射配置信息
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:application.properties"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String prefix<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-3-定义业务类"><a href="#8-2-3-定义业务类" class="headerlink" title="8.2.3 定义业务类"></a>8.2.3 定义业务类</h4><p>在业务包中创建一个业务类，例如：PersonService，供其他项目使用</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    PersonProperties personProperties<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> personProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> userName <span class="token operator">+</span> personProperties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-4-定义自动配置类"><a href="#8-2-4-定义自动配置类" class="headerlink" title="8.2.4 定义自动配置类"></a>8.2.4 定义自动配置类</h4><p>在config包中，创建一个配置类：PersonAutoConfiguration，其代码如下</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>PersonProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//启用 PersonProperties，并默认将它添加到容器中</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonAutoConfiguration</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>PersonService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当容器中没有 PersonService 时生效</span>

        <span class="token annotation punctuation">@Bean</span>
        <span class="token keyword">public</span> PersonService <span class="token function">personService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            PersonService personService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> personService <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="8-2-5-创建spring-factories文件"><a href="#8-2-5-创建spring-factories文件" class="headerlink" title="8.2.5 创建spring.factories文件"></a>8.2.5 创建spring.factories文件</h4><p>由于 Spring Boot 的自动配置是基于 Spring Factories 机制实现的，因此我们自定义 starter 时，同样需要在项目类路径下创建一个 spring.factories 文件。在Resources中创建一个 META-INF 文件夹，并在 META-INF 文件夹中创建一个 spring.factories 文件。</p>
<p>将 Spring Boot 的 EnableAutoConfiguration 接口与自定义 starter 的自动配置类 PersonAutoConfiguration组成一组键值对添加到 spring.factories 文件中，以方便 Spring Boot 在启动时，获取到自定义 starter 的自动配置，代码如下</p>
<pre class=" language-factories"><code class="language-factories">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
com.welab.starter.config.PersonAutoConfiguration
</code></pre>
<h4 id="8-2-6-构建引入"><a href="#8-2-6-构建引入" class="headerlink" title="8.2.6 构建引入"></a>8.2.6 构建引入</h4><p>直接install到本地maven仓库，然后就可以通过gav坐标引入到其他maven项目中。</p>
</body></html>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
</search>
